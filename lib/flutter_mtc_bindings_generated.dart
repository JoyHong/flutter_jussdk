// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/include/*.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen_mtc.yaml`.
///
class FlutterMtcBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterMtcBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterMtcBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// @brief Archive logs and commit to server.
  ///
  /// @param [in] zCookie Cookie value in notification callback.
  /// @param [in] pcInfo The parameter information in json format.
  /// Parameters include MtcParmAcvCommitArchiveName, MtcParmAcvCommitMemo,
  /// MtcParmAcvCommitDeviceId, MtcParmAcvCommitPaths, MtcParmAcvAppInfo.
  ///
  /// Schema:
  /// {
  /// "name": "MtcAcvCommit",
  /// "properties": {
  /// "Memo": {
  /// "type"         : "string",
  /// "description"  : "Memo information in commit message",
  /// "require"      : true
  /// },
  /// "DeviceId": {
  /// "type"         : "string",
  /// "description"  : "Device ID in commit message",
  /// "require"      : true
  /// },
  /// "ArchiveName": {
  /// "type"         : "string",
  /// "description"  : "Achive file name",
  /// },
  /// "Paths": {
  /// "type"         : "array",
  /// "description"  : "The path name of files or directoires to be archived.",
  /// "items"        : { "type": "string" },
  /// "minItems"     : 1,
  /// "uniqueItems"  : true
  /// }
  /// }
  /// }
  ///
  /// Example:
  /// {
  /// "Memo"         : "exmaple",
  /// "DeviceId"     : "JUPHOONDEVCIEID01",
  /// "ArchiveName"  : "example-20140420.tgz", or "example-20140420.bz2",
  /// "Paths"        : ["example/dir/file1", "example/dir/file2", "exmaple/dir2"],
  /// "AppInfo"      : {"AppVersion" : "1.0",...}
  /// }
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with MtcAcvCommitOkNotification or MtcAcvCommitDidFailNotification.
  /// @retval 1 on invoke this interface failed. There will be no
  /// notification.
  int Mtc_AcvCommitJ(
    int zCookie,
    ffi.Pointer<ffi.Char> pcInfo,
    bool enforced,
  ) {
    return _Mtc_AcvCommitJ(
      zCookie,
      pcInfo,
      enforced,
    );
  }

  late final _Mtc_AcvCommitJPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Size, ffi.Pointer<ffi.Char>, ffi.Bool)>>('Mtc_AcvCommitJ');
  late final _Mtc_AcvCommitJ = _Mtc_AcvCommitJPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, bool)>();

  /// @brief MTC archive files locally.
  ///
  /// @param [in] pcArchive The archived file name.
  /// @param [in] pcPaths The path name in json format.
  /// Parameters include MtcParmAcvCommitPaths.
  /// @retval 1 on invoke this interface failed.
  /// @retval 0 archive file is saved locally.
  ///
  /// Schema:
  /// {
  /// "Paths": {
  /// "type"         : "array",
  /// "description"  : "The path name of files or directoires to be archived.",
  /// "items"        : { "type": "string" },
  /// "minItems"     : 1,
  /// "uniqueItems"  : true
  /// }
  /// }
  ///
  /// Example:
  /// {
  /// "Paths" : ["example/dir/file1", "example/dir/file2", "exmaple/dir2"]
  /// }
  int Mtc_AcvPack(
    ffi.Pointer<ffi.Char> pcArchive,
    ffi.Pointer<ffi.Char> pcPaths,
  ) {
    return _Mtc_AcvPack(
      pcArchive,
      pcPaths,
    );
  }

  late final _Mtc_AcvPackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('Mtc_AcvPack');
  late final _Mtc_AcvPack = _Mtc_AcvPackPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief Initialize Client Resource.
  ///
  /// @param [in] pcProfDir Profile directory
  /// @param [in] pCtx For Windows, it can be set a callback function with type of
  /// PFN_ZUIEVNT. SDK use this callback to notify UI to invoke Mtc_CliDrive
  /// on UI thread. If set to ZNULL, SDK will use default implement.
  /// For Android and iOS, use ZNULL;
  ///
  /// @retval 0 Initialize client resource successfully.
  /// @retval 1 Initialize client resource failed.
  ///
  /// @see @ref Mtc_CliDestroy
  int Mtc_CliInit(
    ffi.Pointer<ffi.Char> pcProfDir,
    ffi.Pointer<ffi.Void> pCtx,
  ) {
    return _Mtc_CliInit(
      pcProfDir,
      pCtx,
    );
  }

  late final _Mtc_CliInitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>('Mtc_CliInit');
  late final _Mtc_CliInit = _Mtc_CliInitPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  /// @brief Destroy Client Resource.
  ///
  /// @see @ref Mtc_CliInit
  void Mtc_CliDestroy() {
    return _Mtc_CliDestroy();
  }

  late final _Mtc_CliDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Mtc_CliDestroy');
  late final _Mtc_CliDestroy = _Mtc_CliDestroyPtr.asFunction<void Function()>();

  /// @brief Open a account.
  ///
  /// @param [in] pcUserName The account name.
  /// If account name is ZNULL, it will load default profile information.
  ///
  /// @retval 0 Open a account successfully.
  /// @retval 1 Initialize a account failed.
  ///
  /// @see @ref Mtc_CliClose
  int Mtc_CliOpen(
    ffi.Pointer<ffi.Char> pcUserName,
  ) {
    return _Mtc_CliOpen(
      pcUserName,
    );
  }

  late final _Mtc_CliOpenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_CliOpen');
  late final _Mtc_CliOpen =
      _Mtc_CliOpenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Close current account.
  ///
  /// @see @ref Mtc_CliOpen
  void Mtc_CliClose() {
    return _Mtc_CliClose();
  }

  late final _Mtc_CliClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Mtc_CliClose');
  late final _Mtc_CliClose = _Mtc_CliClosePtr.asFunction<void Function()>();

  /// @brief Start Client Service.
  ///
  /// @retval 0 Start client service successfully.
  /// @retval 1 Start client service failed.
  ///
  /// @see @ref Mtc_CliStop
  int Mtc_CliStart() {
    return _Mtc_CliStart();
  }

  late final _Mtc_CliStartPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('Mtc_CliStart');
  late final _Mtc_CliStart = _Mtc_CliStartPtr.asFunction<int Function()>();

  /// @brief Stop Client Service.
  ///
  /// @see @ref Mtc_CliStart
  void Mtc_CliStop() {
    return _Mtc_CliStop();
  }

  late final _Mtc_CliStopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Mtc_CliStop');
  late final _Mtc_CliStop = _Mtc_CliStopPtr.asFunction<void Function()>();

  /// @brief Start to Login Client.
  ///
  /// @param [in] iOption The option flag for login. @ref MtcLoginOption.
  /// @param [in] pcAccNetIp The access network IP string.
  ///
  /// @retval 0 Client is logining.
  /// @retval 1 Client login failed.
  ///
  /// @see @ref Mtc_CliLogout
  int Mtc_CliLogin(
    int iOption,
    ffi.Pointer<ffi.Char> pcAccNetIp,
  ) {
    return _Mtc_CliLogin(
      iOption,
      pcAccNetIp,
    );
  }

  late final _Mtc_CliLoginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>>('Mtc_CliLogin');
  late final _Mtc_CliLogin =
      _Mtc_CliLoginPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  /// @brief Refresh the registration.
  ///
  /// This interface is try to send re-REGISTRE message to refresh the
  /// registration information on the server. Although the SDK will send
  /// re-REGISTER automatically accroding to the expire time length, there still
  /// be in some condition which the client wants to send re-REGISTER to keep
  /// registration information valid. Like on mobile phone platfrom, the
  /// SDK may not be able to send re-REGISTER on time during background mode.
  /// In these cases, the application should invoke this interface to send
  /// re-REGISTER manually to discover errors maybe occured during background mode.
  ///
  /// @see @ref Mtc_CliLogin @ref Mtc_CliLogout
  void Mtc_CliRefresh() {
    return _Mtc_CliRefresh();
  }

  late final _Mtc_CliRefreshPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Mtc_CliRefresh');
  late final _Mtc_CliRefresh = _Mtc_CliRefreshPtr.asFunction<void Function()>();

  /// @brief Start to Logout Client.
  ///
  /// If Mtc_DbGetUserReg returns true, Logout result will be notified by
  /// callbacks which were set by MtcCliLocalDidLogoutNotification and MtcCliServerLogoutedNotification.
  ///
  /// @retval 0 Client is logouting.
  /// @retval 1 Client logout failed.
  ///
  /// @see @ref Mtc_CliLogin
  int Mtc_CliLogout() {
    return _Mtc_CliLogout();
  }

  late final _Mtc_CliLogoutPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('Mtc_CliLogout');
  late final _Mtc_CliLogout = _Mtc_CliLogoutPtr.asFunction<int Function()>();

  /// @brief Is client reconnecting.
  ///
  /// @retval true is reconnecting, otherwise is not reconnecting.
  bool Mtc_CliIsReconning() {
    return _Mtc_CliIsReconning();
  }

  late final _Mtc_CliIsReconningPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('Mtc_CliIsReconning');
  late final _Mtc_CliIsReconning =
      _Mtc_CliIsReconningPtr.asFunction<bool Function()>();

  /// @brief Get client state.
  ///
  /// @return Client State. State see @ref EN_MTC_CLI_STATE_TYPE.
  int Mtc_CliGetState() {
    return _Mtc_CliGetState();
  }

  late final _Mtc_CliGetStatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('Mtc_CliGetState');
  late final _Mtc_CliGetState =
      _Mtc_CliGetStatePtr.asFunction<int Function()>();

  /// @brief Client Drive Service.
  ///
  /// MTC service was implemented by MSF, for multi-thread mode,
  /// MSF is running in independent thread, GUI is another one generally.
  /// MTC implmented service login in GUI, so it is running in GUI.
  /// When MSF need notify status to GUI, the event should transfered in
  /// two threads. For thread safety, service event was posted by
  ///
  /// @param [in] zEvntId Service Event from RSD.
  ///
  /// @retval 0 Drive Service successfully.
  /// @retval 1 Drive Service failed.
  int Mtc_CliDrive(
    ffi.Pointer<ffi.Void> zEvntId,
  ) {
    return _Mtc_CliDrive(
      zEvntId,
    );
  }

  late final _Mtc_CliDrivePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'Mtc_CliDrive');
  late final _Mtc_CliDrive =
      _Mtc_CliDrivePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// @brief Detect available local IP address.
  /// It is available in register mode.
  ///
  /// @return Available local IP detected.
  int Mtc_CliDetLclIp() {
    return _Mtc_CliDetLclIp();
  }

  late final _Mtc_CliDetLclIpPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'Mtc_CliDetLclIp');
  late final _Mtc_CliDetLclIp =
      _Mtc_CliDetLclIpPtr.asFunction<int Function()>();

  /// @brief Get Device Id string.
  ///
  /// @return Device Id string.
  ffi.Pointer<ffi.Char> Mtc_CliGetDevId() {
    return _Mtc_CliGetDevId();
  }

  late final _Mtc_CliGetDevIdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_CliGetDevId');
  late final _Mtc_CliGetDevId =
      _Mtc_CliGetDevIdPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief Get Device Id string.
  ///
  /// @return Device Id string.
  ffi.Pointer<ffi.Char> Mtc_CliGetDevIdX() {
    return _Mtc_CliGetDevIdX();
  }

  late final _Mtc_CliGetDevIdXPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_CliGetDevIdX');
  late final _Mtc_CliGetDevIdX =
      _Mtc_CliGetDevIdXPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief Apply application Id string.
  ///
  /// @param pcAppId Stirng of application Id.
  ///
  /// @retval 0 Apply successfully.
  /// @retval 1 Apply failed.
  int Mtc_CliApplyAppId(
    ffi.Pointer<ffi.Char> pcAppId,
  ) {
    return _Mtc_CliApplyAppId(
      pcAppId,
    );
  }

  late final _Mtc_CliApplyAppIdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_CliApplyAppId');
  late final _Mtc_CliApplyAppId =
      _Mtc_CliApplyAppIdPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Apply device Id string.
  ///
  /// @param pcDevId Stirng of device id.
  ///
  /// @retval 0 Apply successfully.
  /// @retval 1 Apply failed.
  int Mtc_CliApplyDevId(
    ffi.Pointer<ffi.Char> pcDevId,
  ) {
    return _Mtc_CliApplyDevId(
      pcDevId,
    );
  }

  late final _Mtc_CliApplyDevIdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_CliApplyDevId');
  late final _Mtc_CliApplyDevId =
      _Mtc_CliApplyDevIdPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Apply session Id string.
  ///
  /// @param pcSessId Stirng of session id.
  ///
  /// @retval 0 Apply successfully.
  /// @retval 1 Apply failed.
  int Mtc_CliApplySessId(
    ffi.Pointer<ffi.Char> pcSessId,
  ) {
    return _Mtc_CliApplySessId(
      pcSessId,
    );
  }

  late final _Mtc_CliApplySessIdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_CliApplySessId');
  late final _Mtc_CliApplySessId =
      _Mtc_CliApplySessIdPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Set push parameter.
  ///
  /// example:
  /// @code
  /// {"Notify.APNS.AppId":"com.juphoon.justalk",
  /// "Notify.APNS.Token":"681C42B23EA88992B8856C"}
  /// @endcode
  /// or
  /// @code
  /// {"Notify.APNS.AppId":"com.juphoon.justalk.debug",
  /// "Notify.APNS.Token":"681C42B23EA88992B8856C"}
  /// @endcode
  /// or
  /// @code
  /// {"Notify.Baidu.AppId":"AECZXODEKCKDA",
  /// "Notify.Baidu.UserId":"ZZDEIEQRELASDIOUF",
  /// "Notify.Baidu.ChannelId":"123050392"}
  /// @endcode
  /// or
  /// @code
  /// {"Notify.Google.AppId":"QERIPUZXCVPDFA",
  /// "Notify.Google.RegistrationId":"AOIUERQEZV"}
  /// @endcode
  ///
  /// @retval 0 Set successfully.
  /// @retval 1 Set failed.
  int Mtc_CliSetPushParm(
    ffi.Pointer<ffi.Char> pcParm,
  ) {
    return _Mtc_CliSetPushParm(
      pcParm,
    );
  }

  late final _Mtc_CliSetPushParmPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_CliSetPushParm');
  late final _Mtc_CliSetPushParm =
      _Mtc_CliSetPushParmPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Clear push parameter.
  /// @param  pcAppId The application ID string.
  /// @retval 0 Set successfully.
  /// @retval 1 Set failed.
  int Mtc_CliClrPushParm(
    ffi.Pointer<ffi.Char> pcAppId,
  ) {
    return _Mtc_CliClrPushParm(
      pcAppId,
    );
  }

  late final _Mtc_CliClrPushParmPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_CliClrPushParm');
  late final _Mtc_CliClrPushParm =
      _Mtc_CliClrPushParmPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Network changed trigger.
  /// @param iAccessNetworkType Access network type, @ref group_def_access_net_type.
  void Mtc_CliNetworkChanged(
    int iAccessNetworkType,
  ) {
    return _Mtc_CliNetworkChanged(
      iAccessNetworkType,
    );
  }

  late final _Mtc_CliNetworkChangedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'Mtc_CliNetworkChanged');
  late final _Mtc_CliNetworkChanged =
      _Mtc_CliNetworkChangedPtr.asFunction<void Function(int)>();

  /// @brief Set the device information for statistics.
  ///
  /// @param pcKey The device informatino key, @ref MtcInfoKey.
  /// @param pcValue The information string.
  /// @retval 0 Set successfully.
  /// @retval 1 Set failed.
  int Mtc_CliSetDevInfo(
    ffi.Pointer<ffi.Char> pcKey,
    ffi.Pointer<ffi.Char> pcValue,
  ) {
    return _Mtc_CliSetDevInfo(
      pcKey,
      pcValue,
    );
  }

  late final _Mtc_CliSetDevInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_CliSetDevInfo');
  late final _Mtc_CliSetDevInfo = _Mtc_CliSetDevInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief Awake client process.
  void Mtc_CliWakeup(
    bool bAwake,
  ) {
    return _Mtc_CliWakeup(
      bAwake,
    );
  }

  late final _Mtc_CliWakeupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>('Mtc_CliWakeup');
  late final _Mtc_CliWakeup =
      _Mtc_CliWakeupPtr.asFunction<void Function(bool)>();

  /// mtc query account status */
  /// /**
  /// @brief Query account status.
  ///
  /// @param pcUserName Account user name stirng.
  /// @param zCookie Cookie value in notification.
  ///
  /// @retval 0 Query performed, result will notify by
  /// MtcCliAccountQueryOkNotification or MtcCliAccountQueryDidFailNotification
  /// @retval 1 Query perform failed.
  int Mtc_CliQueryStatus(
    ffi.Pointer<ffi.Char> pcUserName,
    int zCookie,
  ) {
    return _Mtc_CliQueryStatus(
      pcUserName,
      zCookie,
    );
  }

  late final _Mtc_CliQueryStatusPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>(
      'Mtc_CliQueryStatus');
  late final _Mtc_CliQueryStatus = _Mtc_CliQueryStatusPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int)>();

  /// @brief Set keep alive.
  ///
  /// @param bEnable true enable keep alive, otherwise disable.
  /// @param iIntervalSec Keep alive interval in seconds.
  int Mtc_CliSetKeepAlive(
    bool bEnable,
    int iIntervalSec,
  ) {
    return _Mtc_CliSetKeepAlive(
      bEnable,
      iIntervalSec,
    );
  }

  late final _Mtc_CliSetKeepAlivePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool, ffi.Int)>>(
          'Mtc_CliSetKeepAlive');
  late final _Mtc_CliSetKeepAlive =
      _Mtc_CliSetKeepAlivePtr.asFunction<int Function(bool, int)>();

  /// @brief Get Client Router Information.
  ///
  /// @return Client Router Information.
  ffi.Pointer<ffi.Char> Mtc_CliGetRouterInfo() {
    return _Mtc_CliGetRouterInfo();
  }

  late final _Mtc_CliGetRouterInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_CliGetRouterInfo');
  late final _Mtc_CliGetRouterInfo =
      _Mtc_CliGetRouterInfoPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief Get Client Router clientload result.
  ///
  /// @return true if router clientload succeed.
  /// @return false if router clientload failed;
  bool Mtc_CliGetClientLoadResult() {
    return _Mtc_CliGetClientLoadResult();
  }

  late final _Mtc_CliGetClientLoadResultPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Mtc_CliGetClientLoadResult');
  late final _Mtc_CliGetClientLoadResult =
      _Mtc_CliGetClientLoadResultPtr.asFunction<bool Function()>();

  /// @brief Clean temporary files.
  ///
  /// @retval 0 Clean successfully.
  /// @retval 1 Clean failed.
  int Mtc_CliCleanTempFiles() {
    return _Mtc_CliCleanTempFiles();
  }

  late final _Mtc_CliCleanTempFilesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('Mtc_CliCleanTempFiles');
  late final _Mtc_CliCleanTempFiles =
      _Mtc_CliCleanTempFilesPtr.asFunction<int Function()>();

  /// @brief Set Public Param.
  ///
  /// @param pcName param name, maybe @ref MTC_PUBLIC_PARAM_NOTIFY_KEY.
  /// @param pcValue value.
  ///
  /// @retval 0 Set successfully.
  /// @retval 1 Set failed.
  int Mtc_CliSetPublicParam(
    ffi.Pointer<ffi.Char> pcName,
    ffi.Pointer<ffi.Char> pcValue,
  ) {
    return _Mtc_CliSetPublicParam(
      pcName,
      pcValue,
    );
  }

  late final _Mtc_CliSetPublicParamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_CliSetPublicParam');
  late final _Mtc_CliSetPublicParam = _Mtc_CliSetPublicParamPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief Subscribe Message From Server.
  ///
  /// @param pcMsg message name string.
  /// @param zCookie Cookie value in notification.
  ///
  /// @retval 0 Set successfully, result will notify by
  /// MtcCliServerMessageReceivedNotification.
  /// @retval 1 Set failed.
  int Mtc_CliSubServerMessage(
    ffi.Pointer<ffi.Char> pcMsg,
    int zCookie,
  ) {
    return _Mtc_CliSubServerMessage(
      pcMsg,
      zCookie,
    );
  }

  late final _Mtc_CliSubServerMessagePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>(
      'Mtc_CliSubServerMessage');
  late final _Mtc_CliSubServerMessage = _Mtc_CliSubServerMessagePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int)>();

  /// @brief Unsubscribe Message From Server.
  ///
  /// @param pcMsg message name string.
  ///
  /// @retval 0 Set successfully.
  /// @retval 1 Set failed.
  int Mtc_CliUnsubServerMessage(
    ffi.Pointer<ffi.Char> pcMsg,
  ) {
    return _Mtc_CliUnsubServerMessage(
      pcMsg,
    );
  }

  late final _Mtc_CliUnsubServerMessagePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_CliUnsubServerMessage');
  late final _Mtc_CliUnsubServerMessage = _Mtc_CliUnsubServerMessagePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Set Client Property.
  ///
  /// @param pcKey key name string.
  /// @param pcValue value name string.
  ///
  /// @retval 0 Set successfully.
  /// @retval 1 Set failed.
  int Mtc_CliSetProperty(
    ffi.Pointer<ffi.Char> pcKey,
    ffi.Pointer<ffi.Char> pcValue,
  ) {
    return _Mtc_CliSetProperty(
      pcKey,
      pcValue,
    );
  }

  late final _Mtc_CliSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_CliSetProperty');
  late final _Mtc_CliSetProperty = _Mtc_CliSetPropertyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief Get Client pointer.
  ///
  /// @retval return Client pointer.
  ffi.Pointer<ffi.Void> Mtc_CliGetClient() {
    return _Mtc_CliGetClient();
  }

  late final _Mtc_CliGetClientPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'Mtc_CliGetClient');
  late final _Mtc_CliGetClient =
      _Mtc_CliGetClientPtr.asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// @brief Dynamic loading of openssl dynamic library,Only used in ios、android.
  ///
  /// @param [in] pcLibPath dynamic library path.
  ///
  /// @retval 0 Set successfully，or static loading openssl
  /// @retval 1 Set failed
  int Mtc_CliloadJusslLib(
    ffi.Pointer<ffi.Char> pcLibPath,
  ) {
    return _Mtc_CliloadJusslLib(
      pcLibPath,
    );
  }

  late final _Mtc_CliloadJusslLibPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_CliloadJusslLib');
  late final _Mtc_CliloadJusslLib =
      _Mtc_CliloadJusslLibPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Set Java notification process function name.
  ///
  /// @retval 0 Set successfully.
  /// @retval 1 Set failed.
  int Mtc_CliSetJavaNotify(
    ffi.Pointer<ffi.Char> pcClassName,
    ffi.Pointer<ffi.Char> pcMethodName,
  ) {
    return _Mtc_CliSetJavaNotify(
      pcClassName,
      pcMethodName,
    );
  }

  late final _Mtc_CliSetJavaNotifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_CliSetJavaNotify');
  late final _Mtc_CliSetJavaNotify = _Mtc_CliSetJavaNotifyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief Set the service event callback to MTC driver owner.
  ///
  /// @retval 0 Set successfully.
  /// @retval 1 Set failed.
  int Mtc_CliCbSetJavaEvent(
    ffi.Pointer<ffi.Char> pcClassName,
    ffi.Pointer<ffi.Char> pcMethodName,
  ) {
    return _Mtc_CliCbSetJavaEvent(
      pcClassName,
      pcMethodName,
    );
  }

  late final _Mtc_CliCbSetJavaEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_CliCbSetJavaEvent');
  late final _Mtc_CliCbSetJavaEvent = _Mtc_CliCbSetJavaEventPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief Set Java abort process function name.
  ///
  /// @retval 0 Set successfully.
  /// @retval 1 Set failed.
  int Mtc_CliSetJavaAbort(
    ffi.Pointer<ffi.Char> pcClassName,
    ffi.Pointer<ffi.Char> pcMethodName,
    int zCookie,
  ) {
    return _Mtc_CliSetJavaAbort(
      pcClassName,
      pcMethodName,
      zCookie,
    );
  }

  late final _Mtc_CliSetJavaAbortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('Mtc_CliSetJavaAbort');
  late final _Mtc_CliSetJavaAbort = _Mtc_CliSetJavaAbortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  /// @brief Set the Zos_Printf string print callback.
  /// Zos print and log functions will always call it if callback is not NULL.
  ///
  /// @param [in] pfnCb Callback function.
  int Mtc_CliCbSetJavaPrint(
    ffi.Pointer<ffi.Char> pcClassName,
    ffi.Pointer<ffi.Char> pcMethodName,
  ) {
    return _Mtc_CliCbSetJavaPrint(
      pcClassName,
      pcMethodName,
    );
  }

  late final _Mtc_CliCbSetJavaPrintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_CliCbSetJavaPrint');
  late final _Mtc_CliCbSetJavaPrint = _Mtc_CliCbSetJavaPrintPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief Set the Zos_Printf string print callback.
  /// Zos print and log functions will always call it if callback is not NULL.
  ///
  /// @param [in] pfnCb Callback function.
  int Mtc_CliCbSetJavaPrintX(
    ffi.Pointer<ffi.Char> pcClassName,
    ffi.Pointer<ffi.Char> pcMethodName,
  ) {
    return _Mtc_CliCbSetJavaPrintX(
      pcClassName,
      pcMethodName,
    );
  }

  late final _Mtc_CliCbSetJavaPrintXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_CliCbSetJavaPrintX');
  late final _Mtc_CliCbSetJavaPrintX = _Mtc_CliCbSetJavaPrintXPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief Set the Zos_Printf string print callback.
  /// Zos print and log functions will always call it if callback is not ZNULL.
  ///
  /// @param [in] pfnCb Callback function.
  void Mtc_CliCbSetPrint(
    PFN_MTCCLIPRINT pfnCb,
  ) {
    return _Mtc_CliCbSetPrint(
      pfnCb,
    );
  }

  late final _Mtc_CliCbSetPrintPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PFN_MTCCLIPRINT)>>(
          'Mtc_CliCbSetPrint');
  late final _Mtc_CliCbSetPrint =
      _Mtc_CliCbSetPrintPtr.asFunction<void Function(PFN_MTCCLIPRINT)>();

  /// @brief Set the Zos_Printf string print callback.
  /// Zos print and log functions will always call it if callback is not ZNULL.
  ///
  /// @param [in] pfnCb Callback function.
  void Mtc_CliCbSetPrintX(
    PFN_MTCCLIPRINTX pfnCb,
  ) {
    return _Mtc_CliCbSetPrintX(
      pfnCb,
    );
  }

  late final _Mtc_CliCbSetPrintXPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PFN_MTCCLIPRINTX)>>(
          'Mtc_CliCbSetPrintX');
  late final _Mtc_CliCbSetPrintX =
      _Mtc_CliCbSetPrintXPtr.asFunction<void Function(PFN_MTCCLIPRINTX)>();

  /// @brief Set the service event callback to MTC driver owner.
  /// @param [in] pfnCb Callback function.
  void Mtc_CliCbSetNotify(
    PFN_MTCCLINOTIFY pfnCb,
  ) {
    return _Mtc_CliCbSetNotify(
      pfnCb,
    );
  }

  late final _Mtc_CliCbSetNotifyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(PFN_MTCCLINOTIFY)>>(
          'Mtc_CliCbSetNotify');
  late final _Mtc_CliCbSetNotify =
      _Mtc_CliCbSetNotifyPtr.asFunction<void Function(PFN_MTCCLINOTIFY)>();

  /// @brief Set the service event callback to MTC driver owner.
  /// @param [in] pfnCb Callback function.
  int Mtc_CliCbSetEvent(
    PFN_MTCUIEVNT pfnCb,
  ) {
    return _Mtc_CliCbSetEvent(
      pfnCb,
    );
  }

  late final _Mtc_CliCbSetEventPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(PFN_MTCUIEVNT)>>(
          'Mtc_CliCbSetEvent');
  late final _Mtc_CliCbSetEvent =
      _Mtc_CliCbSetEventPtr.asFunction<int Function(PFN_MTCUIEVNT)>();

  /// @brief Set callback for abort.
  ///
  /// @param pfnCallback Callback function for abort.
  /// @param zCookie Cookie value in notification.
  int Mtc_CliCbSetAbort(
    PFN_MTCCLIABORT pfnCallback,
    int zCookie,
  ) {
    return _Mtc_CliCbSetAbort(
      pfnCallback,
      zCookie,
    );
  }

  late final _Mtc_CliCbSetAbortPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(PFN_MTCCLIABORT, ffi.Size)>>(
          'Mtc_CliCbSetAbort');
  late final _Mtc_CliCbSetAbort =
      _Mtc_CliCbSetAbortPtr.asFunction<int Function(PFN_MTCCLIABORT, int)>();

  /// @brief Set log level.
  ///
  /// @param [in] iLevel Log level, 0 for no log, larger value for more log.
  void Mtc_CliCfgSetLogLevel(
    int iLevel,
  ) {
    return _Mtc_CliCfgSetLogLevel(
      iLevel,
    );
  }

  late final _Mtc_CliCfgSetLogLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'Mtc_CliCfgSetLogLevel');
  late final _Mtc_CliCfgSetLogLevel =
      _Mtc_CliCfgSetLogLevelPtr.asFunction<void Function(int)>();

  /// @brief Set log file size and count.
  ///
  /// @param [in] iFileCount File count.
  /// @param [in] iFileSize File size in bytes.
  void Mtc_CliCfgSetLogSize(
    int iFileCount,
    int iFileSize,
  ) {
    return _Mtc_CliCfgSetLogSize(
      iFileCount,
      iFileSize,
    );
  }

  late final _Mtc_CliCfgSetLogSizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.UnsignedInt, ffi.UnsignedInt)>>(
      'Mtc_CliCfgSetLogSize');
  late final _Mtc_CliCfgSetLogSize =
      _Mtc_CliCfgSetLogSizePtr.asFunction<void Function(int, int)>();

  /// @brief Set log print.
  ///
  /// @param [in] bPrint log print.
  ///
  /// @retval 0 Set operation successfully.
  /// @retval 1 Set operation failed.
  int Mtc_CliCfgSetLogPrint(
    bool bPrint,
  ) {
    return _Mtc_CliCfgSetLogPrint(
      bPrint,
    );
  }

  late final _Mtc_CliCfgSetLogPrintPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_CliCfgSetLogPrint');
  late final _Mtc_CliCfgSetLogPrint =
      _Mtc_CliCfgSetLogPrintPtr.asFunction<int Function(bool)>();

  /// @brief Set log file enable.
  ///
  /// @param [in] bEnable log file enable.
  void Mtc_CliCfgSetLogFileEnable(
    bool bEnable,
  ) {
    return _Mtc_CliCfgSetLogFileEnable(
      bEnable,
    );
  }

  late final _Mtc_CliCfgSetLogFileEnablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'Mtc_CliCfgSetLogFileEnable');
  late final _Mtc_CliCfgSetLogFileEnable =
      _Mtc_CliCfgSetLogFileEnablePtr.asFunction<void Function(bool)>();

  /// @brief Set mme log file enable.
  ///
  /// @param [in] bEnable log file enable.
  void Mtc_CliCfgSetMmeLogFileEnable(
    bool bEnable,
  ) {
    return _Mtc_CliCfgSetMmeLogFileEnable(
      bEnable,
    );
  }

  late final _Mtc_CliCfgSetMmeLogFileEnablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'Mtc_CliCfgSetMmeLogFileEnable');
  late final _Mtc_CliCfgSetMmeLogFileEnable =
      _Mtc_CliCfgSetMmeLogFileEnablePtr.asFunction<void Function(bool)>();

  /// @brief Set mme log file size and count.
  ///
  /// @param [in] iFileCount File count.
  /// @param [in] iFileSize File size in KB, default is 4000KB, max 5MB.
  void Mtc_CliCfgSetMmeLogSize(
    int iFileCount,
    int iFileSize,
  ) {
    return _Mtc_CliCfgSetMmeLogSize(
      iFileCount,
      iFileSize,
    );
  }

  late final _Mtc_CliCfgSetMmeLogSizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.UnsignedInt, ffi.UnsignedInt)>>(
      'Mtc_CliCfgSetMmeLogSize');
  late final _Mtc_CliCfgSetMmeLogSize =
      _Mtc_CliCfgSetMmeLogSizePtr.asFunction<void Function(int, int)>();

  /// @brief Set log async init.
  ///
  /// @param [in] bEnable log async init. default is disabled.
  ///
  /// @retval 0 Set operation successfully.
  /// @retval 1 Set operation failed.
  int Mtc_CliCfgSetLogAsyncInit(
    bool bEnable,
  ) {
    return _Mtc_CliCfgSetLogAsyncInit(
      bEnable,
    );
  }

  late final _Mtc_CliCfgSetLogAsyncInitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_CliCfgSetLogAsyncInit');
  late final _Mtc_CliCfgSetLogAsyncInit =
      _Mtc_CliCfgSetLogAsyncInitPtr.asFunction<int Function(bool)>();

  /// @brief Set log task support.
  ///
  /// @param [in] bEnable Enable The log task. default is disabled.
  ///
  /// @retval 0 Set operation successfully.
  /// @retval 1 Set operation failed.
  int Mtc_CliCfgSetLogTaskSupt(
    bool bEnable,
  ) {
    return _Mtc_CliCfgSetLogTaskSupt(
      bEnable,
    );
  }

  late final _Mtc_CliCfgSetLogTaskSuptPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_CliCfgSetLogTaskSupt');
  late final _Mtc_CliCfgSetLogTaskSupt =
      _Mtc_CliCfgSetLogTaskSuptPtr.asFunction<int Function(bool)>();

  /// @brief This function set log buffer size.
  /// if log buffer size is not 0. The log data will be written to the buffer first,
  /// until it is full before writing to the log file. If you want to manually update the buffer data to the file, call @ref Mtc_AnyLogBufSize
  /// if log buffer size is 0.log data will write to the file directly.
  ///
  /// @param [in] iSize The log buffer size. default is 0.
  ///
  /// @see
  int Mtc_CliCfgSetLogBufSize(
    int iSize,
  ) {
    return _Mtc_CliCfgSetLogBufSize(
      iSize,
    );
  }

  late final _Mtc_CliCfgSetLogBufSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>(
          'Mtc_CliCfgSetLogBufSize');
  late final _Mtc_CliCfgSetLogBufSize =
      _Mtc_CliCfgSetLogBufSizePtr.asFunction<int Function(int)>();

  /// @brief This function set log alert size.
  /// The log alert size only working when log task is enable.
  /// When the log size reaches the alert size, a alert timer will be started to notify the log task to write buffer to the log.
  /// Otherwise, it will wait for the cycle timer to time out and write periodically.
  ///
  /// @param [in] iSize The log alert size. default is 4096.
  ///
  /// @see Mtc_CliCfgSetLogTaskSupt Mtc_CliCfgSetLogTaskCycleTimeLen Mtc_CliCfgSetLogTaskAlertTimeLen
  int Mtc_CliCfgSetLogAlertSize(
    int iSize,
  ) {
    return _Mtc_CliCfgSetLogAlertSize(
      iSize,
    );
  }

  late final _Mtc_CliCfgSetLogAlertSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>(
          'Mtc_CliCfgSetLogAlertSize');
  late final _Mtc_CliCfgSetLogAlertSize =
      _Mtc_CliCfgSetLogAlertSizePtr.asFunction<int Function(int)>();

  /// @brief This function set log task cycle time len.
  ///
  /// @param [in] iTimeLen The log task clycle time len (ms). default is 60000 (1 minute).
  ///
  /// @see
  int Mtc_CliCfgSetLogTaskCycleTimeLen(
    int iTimeLen,
  ) {
    return _Mtc_CliCfgSetLogTaskCycleTimeLen(
      iTimeLen,
    );
  }

  late final _Mtc_CliCfgSetLogTaskCycleTimeLenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>(
          'Mtc_CliCfgSetLogTaskCycleTimeLen');
  late final _Mtc_CliCfgSetLogTaskCycleTimeLen =
      _Mtc_CliCfgSetLogTaskCycleTimeLenPtr.asFunction<int Function(int)>();

  /// @brief This function set log task alert time len.
  ///
  /// @param [in] iTimeLen The log task alert time len (ms). default is 500 (500 ms).
  ///
  /// @see
  int Mtc_CliCfgSetLogTaskAlertTimeLen(
    int iTimeLen,
  ) {
    return _Mtc_CliCfgSetLogTaskAlertTimeLen(
      iTimeLen,
    );
  }

  late final _Mtc_CliCfgSetLogTaskAlertTimeLenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>(
          'Mtc_CliCfgSetLogTaskAlertTimeLen');
  late final _Mtc_CliCfgSetLogTaskAlertTimeLen =
      _Mtc_CliCfgSetLogTaskAlertTimeLenPtr.asFunction<int Function(int)>();

  /// @brief Set Log file directory.
  ///
  /// @param [in] pcDir The log file directory.
  ///
  /// @retval 0 Set directory successfully.
  /// @retval 1 Set directory failed.
  int Mtc_CliCfgSetLogDir(
    ffi.Pointer<ffi.Char> pcDir,
  ) {
    return _Mtc_CliCfgSetLogDir(
      pcDir,
    );
  }

  late final _Mtc_CliCfgSetLogDirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_CliCfgSetLogDir');
  late final _Mtc_CliCfgSetLogDir =
      _Mtc_CliCfgSetLogDirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Get Log file directory.
  ///
  /// @return The log file directory, default "".
  ffi.Pointer<ffi.Char> Mtc_CliCfgGetLogDir() {
    return _Mtc_CliCfgGetLogDir();
  }

  late final _Mtc_CliCfgGetLogDirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_CliCfgGetLogDir');
  late final _Mtc_CliCfgGetLogDir =
      _Mtc_CliCfgGetLogDirPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief Get whether enable diag.
  ///
  /// @retval true Enable Diag.
  /// @retval false Disable Diag.
  bool Mtc_CliCfgGetDiagEnable() {
    return _Mtc_CliCfgGetDiagEnable();
  }

  late final _Mtc_CliCfgGetDiagEnablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Mtc_CliCfgGetDiagEnable');
  late final _Mtc_CliCfgGetDiagEnable =
      _Mtc_CliCfgGetDiagEnablePtr.asFunction<bool Function()>();

  /// @brief Set whether enable diag.
  ///
  /// @param [in] bEnable ZTRUE enable diag.
  ///
  /// @retval 0 Set option successfully.
  /// @retval 1 Set option failed.
  int Mtc_CliCfgSetDiagEnable(
    bool bEnable,
  ) {
    return _Mtc_CliCfgSetDiagEnable(
      bEnable,
    );
  }

  late final _Mtc_CliCfgSetDiagEnablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_CliCfgSetDiagEnable');
  late final _Mtc_CliCfgSetDiagEnable =
      _Mtc_CliCfgSetDiagEnablePtr.asFunction<int Function(bool)>();

  /// @brief Set license context.
  ///
  /// @param [in] zContext The application context, only avaliable on Android.
  ///
  /// @retval 0 Set file name successfully.
  /// @retval 1 Set file name failed.
  int Mtc_CliCfgSetContext(
    ZAPPCONTEXT zContext,
  ) {
    return _Mtc_CliCfgSetContext(
      zContext,
    );
  }

  late final _Mtc_CliCfgSetContextPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ZAPPCONTEXT)>>(
          'Mtc_CliCfgSetContext');
  late final _Mtc_CliCfgSetContext =
      _Mtc_CliCfgSetContextPtr.asFunction<int Function(ZAPPCONTEXT)>();

  /// mtc config set application version
  int Mtc_CliCfgSetAppVer(
    ffi.Pointer<ffi.Char> pcVer,
  ) {
    return _Mtc_CliCfgSetAppVer(
      pcVer,
    );
  }

  late final _Mtc_CliCfgSetAppVerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_CliCfgSetAppVer');
  late final _Mtc_CliCfgSetAppVer =
      _Mtc_CliCfgSetAppVerPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// mtc config get application version
  ffi.Pointer<ffi.Char> Mtc_CliCfgGetAppVer() {
    return _Mtc_CliCfgGetAppVer();
  }

  late final _Mtc_CliCfgGetAppVerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_CliCfgGetAppVer');
  late final _Mtc_CliCfgGetAppVer =
      _Mtc_CliCfgGetAppVerPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief Set wait time before suspend.
  ///
  /// @param iMilliSeconds The time in milliseconds. If large than 0, the thread
  /// will enter suspend state after iMilliSeconds MS.
  /// If equal or less than 0, the threads will not enter
  /// suspend state.
  void Mtc_CliCfgSetWaitMsBeforeSuspend(
    int iMilliSeconds,
  ) {
    return _Mtc_CliCfgSetWaitMsBeforeSuspend(
      iMilliSeconds,
    );
  }

  late final _Mtc_CliCfgSetWaitMsBeforeSuspendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'Mtc_CliCfgSetWaitMsBeforeSuspend');
  late final _Mtc_CliCfgSetWaitMsBeforeSuspend =
      _Mtc_CliCfgSetWaitMsBeforeSuspendPtr.asFunction<void Function(int)>();

  /// @brief Set whether enable save thea log to file.
  ///
  /// @param [in] bEnable ZTRUE enable save thea log to file.
  ///
  /// @retval 0 Set option successfully.
  /// @retval 1 Set option failed.
  int Mtc_CliCfgSetTheaLogEnable(
    bool bEnable,
  ) {
    return _Mtc_CliCfgSetTheaLogEnable(
      bEnable,
    );
  }

  late final _Mtc_CliCfgSetTheaLogEnablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_CliCfgSetTheaLogEnable');
  late final _Mtc_CliCfgSetTheaLogEnable =
      _Mtc_CliCfgSetTheaLogEnablePtr.asFunction<int Function(bool)>();

  /// @brief Get whether enable save thea log to file.
  ///
  /// @retval true Enable save thea log to file.
  /// @retval false Disable save thea log to file.
  bool Mtc_CliCfgGetTheaLogEnable() {
    return _Mtc_CliCfgGetTheaLogEnable();
  }

  late final _Mtc_CliCfgGetTheaLogEnablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Mtc_CliCfgGetTheaLogEnable');
  late final _Mtc_CliCfgGetTheaLogEnable =
      _Mtc_CliCfgGetTheaLogEnablePtr.asFunction<bool Function()>();

  /// @brief Set Log file directory for thea.
  ///
  /// @param [in] pcDir The log file directory for thea.
  ///
  /// @retval 0 Set directory successfully.
  /// @retval 1 Set directory failed.
  int Mtc_CliCfgSetTheaLogDir(
    ffi.Pointer<ffi.Char> pcDir,
  ) {
    return _Mtc_CliCfgSetTheaLogDir(
      pcDir,
    );
  }

  late final _Mtc_CliCfgSetTheaLogDirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_CliCfgSetTheaLogDir');
  late final _Mtc_CliCfgSetTheaLogDir = _Mtc_CliCfgSetTheaLogDirPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Get Log file directory for thea.
  ///
  /// @return The log file directory, default "".
  ffi.Pointer<ffi.Char> Mtc_CliCfgGetTheaLogDir() {
    return _Mtc_CliCfgGetTheaLogDir();
  }

  late final _Mtc_CliCfgGetTheaLogDirPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_CliCfgGetTheaLogDir');
  late final _Mtc_CliCfgGetTheaLogDir = _Mtc_CliCfgGetTheaLogDirPtr.asFunction<
      ffi.Pointer<ffi.Char> Function()>();

  /// @brief Set mme lib directory.
  ///
  /// @param [in] pcDir The lib directory for mme.
  ///
  /// @retval 0 Set directory successfully.
  /// @retval 1 Set directory failed.
  int Mtc_CliCfgSetMmeLibDir(
    ffi.Pointer<ffi.Char> pcDir,
  ) {
    return _Mtc_CliCfgSetMmeLibDir(
      pcDir,
    );
  }

  late final _Mtc_CliCfgSetMmeLibDirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_CliCfgSetMmeLibDir');
  late final _Mtc_CliCfgSetMmeLibDir = _Mtc_CliCfgSetMmeLibDirPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Set user trace info.
  ///
  /// @param [in] pcTrace The user trace info.
  ///
  /// @retval 0 Set directory successfully.
  /// @retval 1 Set directory failed.
  int Mtc_CliCfgSetTrace(
    ffi.Pointer<ffi.Char> pcTrace,
  ) {
    return _Mtc_CliCfgSetTrace(
      pcTrace,
    );
  }

  late final _Mtc_CliCfgSetTracePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_CliCfgSetTrace');
  late final _Mtc_CliCfgSetTrace =
      _Mtc_CliCfgSetTracePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Get user trace info.
  ///
  /// @return The user trace info, default "".
  ffi.Pointer<ffi.Char> Mtc_CliCfgGetTrace() {
    return _Mtc_CliCfgGetTrace();
  }

  late final _Mtc_CliCfgGetTracePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_CliCfgGetTrace');
  late final _Mtc_CliCfgGetTrace =
      _Mtc_CliCfgGetTracePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief Set whether provision file unreadable.
  ///
  /// @param [in] bEnable true enable provision file unreadable.
  ///
  /// @retval 0 Set option successfully.
  /// @retval 1 Set option failed.
  int Mtc_CliCfgSetProvisionUnreadable(
    bool bEnable,
  ) {
    return _Mtc_CliCfgSetProvisionUnreadable(
      bEnable,
    );
  }

  late final _Mtc_CliCfgSetProvisionUnreadablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_CliCfgSetProvisionUnreadable');
  late final _Mtc_CliCfgSetProvisionUnreadable =
      _Mtc_CliCfgSetProvisionUnreadablePtr.asFunction<int Function(bool)>();

  /// @brief Set whether enable log confusion.
  ///
  /// @param [in] bEnable true enable log confusion.
  ///
  /// @retval 0 Set option successfully.
  /// @retval 1 Set option failed.
  int Mtc_CliCfgSetLogConfusionEnable(
    bool bEnable,
  ) {
    return _Mtc_CliCfgSetLogConfusionEnable(
      bEnable,
    );
  }

  late final _Mtc_CliCfgSetLogConfusionEnablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_CliCfgSetLogConfusionEnable');
  late final _Mtc_CliCfgSetLogConfusionEnable =
      _Mtc_CliCfgSetLogConfusionEnablePtr.asFunction<int Function(bool)>();

  /// @brief Apply all data change to all components.
  ///
  /// @retval 0 Apply data change successfully.
  /// @retval 1 Apply data change failed.
  int Mtc_CliDbApplyAll() {
    return _Mtc_CliDbApplyAll();
  }

  late final _Mtc_CliDbApplyAllPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('Mtc_CliDbApplyAll');
  late final _Mtc_CliDbApplyAll =
      _Mtc_CliDbApplyAllPtr.asFunction<int Function()>();

  /// @brief Get data change apply flag.
  ///
  /// @return Data change apply flag.
  ///
  /// @see @ref Mtc_CliDbSetApplyChange
  bool Mtc_CliDbGetApplyChange() {
    return _Mtc_CliDbGetApplyChange();
  }

  late final _Mtc_CliDbGetApplyChangePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Mtc_CliDbGetApplyChange');
  late final _Mtc_CliDbGetApplyChange =
      _Mtc_CliDbGetApplyChangePtr.asFunction<bool Function()>();

  /// @brief Set data change apply flag realtime.
  ///
  /// @retval 0 Set data change apply flag successfully.
  /// @retval 1 Set data change apply flag failed.
  ///
  /// @see @ref Mtc_CliDbGetApplyChange
  int Mtc_CliDbSetApplyChange(
    bool bApply,
  ) {
    return _Mtc_CliDbSetApplyChange(
      bApply,
    );
  }

  late final _Mtc_CliDbSetApplyChangePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_CliDbSetApplyChange');
  late final _Mtc_CliDbSetApplyChange =
      _Mtc_CliDbSetApplyChangePtr.asFunction<int Function(bool)>();

  /// @brief Get data HTTP proxy.
  ///
  /// @return Data HTTP proxy.
  ///
  /// @see @ref Mtc_CliDbSetHttpProxy
  ffi.Pointer<ffi.Char> Mtc_CliDbGetHttpProxy() {
    return _Mtc_CliDbGetHttpProxy();
  }

  late final _Mtc_CliDbGetHttpProxyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_CliDbGetHttpProxy');
  late final _Mtc_CliDbGetHttpProxy =
      _Mtc_CliDbGetHttpProxyPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief Set data HTTP proxy realtime.
  ///
  /// @retval 0 Set data HTTP proxy successfully.
  /// @retval 1 Set data HTTP proxy failed.
  ///
  /// @see @ref Mtc_CliDbGetHttpProxy
  int Mtc_CliDbSetHttpProxy(
    ffi.Pointer<ffi.Char> pcProxy,
  ) {
    return _Mtc_CliDbSetHttpProxy(
      pcProxy,
    );
  }

  late final _Mtc_CliDbSetHttpProxyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_CliDbSetHttpProxy');
  late final _Mtc_CliDbSetHttpProxy = _Mtc_CliDbSetHttpProxyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Get DNS local listen port from database.
  ///
  /// @return The DNS local listen port.
  ///
  /// @see @ref Mtc_CliDbSetDnsLclPort
  int Mtc_CliDbGetDnsLclPort() {
    return _Mtc_CliDbGetDnsLclPort();
  }

  late final _Mtc_CliDbGetDnsLclPortPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'Mtc_CliDbGetDnsLclPort');
  late final _Mtc_CliDbGetDnsLclPort =
      _Mtc_CliDbGetDnsLclPortPtr.asFunction<int Function()>();

  /// @brief Set DNS local listen port.
  ///
  /// @param [in] iPort DNS local listen port.
  ///
  /// @retval 0 Set DNS local listen port successfully.
  /// @retval 1 Set DNS local listen port failed.
  ///
  /// @see @ref Mtc_CliDbGetDnsLclPort
  int Mtc_CliDbSetDnsLclPort(
    int iPort,
  ) {
    return _Mtc_CliDbSetDnsLclPort(
      iPort,
    );
  }

  late final _Mtc_CliDbSetDnsLclPortPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>(
          'Mtc_CliDbSetDnsLclPort');
  late final _Mtc_CliDbSetDnsLclPort =
      _Mtc_CliDbSetDnsLclPortPtr.asFunction<int Function(int)>();

  /// @brief Get DNS primary or secondary server IP from database.
  ///
  /// @param [in] bPrimary DNS primary option.
  ///
  /// @return The DNS primary or secondary server IP.
  ///
  /// @see @ref Mtc_CliDbSetDnsServIp
  int Mtc_CliDbGetDnsServIp(
    bool bPrimary,
  ) {
    return _Mtc_CliDbGetDnsServIp(
      bPrimary,
    );
  }

  late final _Mtc_CliDbGetDnsServIpPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Bool)>>(
          'Mtc_CliDbGetDnsServIp');
  late final _Mtc_CliDbGetDnsServIp =
      _Mtc_CliDbGetDnsServIpPtr.asFunction<int Function(bool)>();

  /// @brief Set DNS primary or secondary server IP.
  ///
  /// @param [in] bPrimary DNS primary option.
  /// @param [in] iServIp DNS primary or secondary server IP.
  ///
  /// @retval 0 Set DNS primary or secondary server IP successfully.
  /// @retval 1 Set DNS primary or secondary server IP failed.
  ///
  /// @see @ref Mtc_CliDbGetDnsServIp
  int Mtc_CliDbSetDnsServIp(
    bool bPrimary,
    int iServIp,
  ) {
    return _Mtc_CliDbSetDnsServIp(
      bPrimary,
      iServIp,
    );
  }

  late final _Mtc_CliDbSetDnsServIpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool, ffi.UnsignedInt)>>(
          'Mtc_CliDbSetDnsServIp');
  late final _Mtc_CliDbSetDnsServIp =
      _Mtc_CliDbSetDnsServIpPtr.asFunction<int Function(bool, int)>();

  /// @brief Get DNS primary or secondary server port from database.
  ///
  /// @param [in] bPrimary DNS primary option.
  ///
  /// @return The DNS primary or secondary server port.
  ///
  /// @see @ref Mtc_CliDbSetDnsServPort
  int Mtc_CliDbGetDnsServPort(
    bool bPrimary,
  ) {
    return _Mtc_CliDbGetDnsServPort(
      bPrimary,
    );
  }

  late final _Mtc_CliDbGetDnsServPortPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Bool)>>(
          'Mtc_CliDbGetDnsServPort');
  late final _Mtc_CliDbGetDnsServPort =
      _Mtc_CliDbGetDnsServPortPtr.asFunction<int Function(bool)>();

  /// @brief Set DNS primary or secondary server port.
  ///
  /// @param [in] bPrimary DNS primary option.
  /// @param [in] iPort DNS primary or secondary server port.
  ///
  /// @retval 0 Set DNS primary or secondary server port successfully.
  /// @retval 1 Set DNS primary or secondary server port failed.
  ///
  /// @see @ref Mtc_CliDbGetDnsServPort
  int Mtc_CliDbSetDnsServPort(
    bool bPrimary,
    int iPort,
  ) {
    return _Mtc_CliDbSetDnsServPort(
      bPrimary,
      iPort,
    );
  }

  late final _Mtc_CliDbSetDnsServPortPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool, ffi.UnsignedInt)>>(
          'Mtc_CliDbSetDnsServPort');
  late final _Mtc_CliDbSetDnsServPort =
      _Mtc_CliDbSetDnsServPortPtr.asFunction<int Function(bool, int)>();

  /// @brief Get DNS use google dns server flag from local database.
  ///
  /// @return The DNS use google dns server flag.
  ///
  /// @see @ref Mtc_CliDbSetDnsUseGoogle
  bool Mtc_CliDbGetDnsUseGoogle() {
    return _Mtc_CliDbGetDnsUseGoogle();
  }

  late final _Mtc_CliDbGetDnsUseGooglePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Mtc_CliDbGetDnsUseGoogle');
  late final _Mtc_CliDbGetDnsUseGoogle =
      _Mtc_CliDbGetDnsUseGooglePtr.asFunction<bool Function()>();

  /// @brief Set DNS use google dns server flag.
  ///
  /// @param [in] bUse The DNS use google dns server flag.
  /// ZTRUE for using google public dns server as second DNS server.
  /// ZFALSE for not use.
  ///
  /// @retval 0 Set DNS use google dns server flag successfully.
  /// @retval 1 Set DNS use google dns server flag failed.
  ///
  /// @see @ref Mtc_CliDbGetDnsUseGoogle
  int Mtc_CliDbSetDnsUseGoogle(
    bool bUse,
  ) {
    return _Mtc_CliDbSetDnsUseGoogle(
      bUse,
    );
  }

  late final _Mtc_CliDbSetDnsUseGooglePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_CliDbSetDnsUseGoogle');
  late final _Mtc_CliDbSetDnsUseGoogle =
      _Mtc_CliDbSetDnsUseGooglePtr.asFunction<int Function(bool)>();

  /// @brief Get data Host Maps.
  ///
  /// @return Data Host Maps.
  ///
  /// @see @ref Mtc_CliDbSetHostMaps
  ffi.Pointer<ffi.Char> Mtc_CliDbGetHostMaps() {
    return _Mtc_CliDbGetHostMaps();
  }

  late final _Mtc_CliDbGetHostMapsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_CliDbGetHostMaps');
  late final _Mtc_CliDbGetHostMaps =
      _Mtc_CliDbGetHostMapsPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief Set data Host Maps.
  ///
  /// @retval 0 Set data Host Maps successfully.
  /// @retval 1 Set data Host Maps failed.
  ///
  /// @see @ref Mtc_CliDbGetHostMaps
  int Mtc_CliDbSetHostMaps(
    ffi.Pointer<ffi.Char> pcHostMaps,
  ) {
    return _Mtc_CliDbSetHostMaps(
      pcHostMaps,
    );
  }

  late final _Mtc_CliDbSetHostMapsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_CliDbSetHostMaps');
  late final _Mtc_CliDbSetHostMaps = _Mtc_CliDbSetHostMapsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Get first connect type.
  ///
  /// @return Data First connect type.
  ///
  /// @see @ref Mtc_CliDbSetFirstConnType
  int Mtc_CliDbGetFirstConnType() {
    return _Mtc_CliDbGetFirstConnType();
  }

  late final _Mtc_CliDbGetFirstConnTypePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'Mtc_CliDbGetFirstConnType');
  late final _Mtc_CliDbGetFirstConnType =
      _Mtc_CliDbGetFirstConnTypePtr.asFunction<int Function()>();

  /// @brief Set first connect type.
  ///
  /// @param [in] iFirstConnType The first connect protocol type.
  ///
  /// @retval 0 Set type successfully.
  /// @retval 1 Set type failed.
  ///
  /// @see @ref Mtc_CliDbGetFirstConnType
  int Mtc_CliDbSetFirstConnType(
    int iFirstConnType,
  ) {
    return _Mtc_CliDbSetFirstConnType(
      iFirstConnType,
    );
  }

  late final _Mtc_CliDbSetFirstConnTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>(
          'Mtc_CliDbSetFirstConnType');
  late final _Mtc_CliDbSetFirstConnType =
      _Mtc_CliDbSetFirstConnTypePtr.asFunction<int Function(int)>();

  /// @brief Get use statistics mod enable.
  ///
  /// @return Stsc used flag.
  ///
  /// @see @ref Mtc_CliDbSetStsEnable
  bool Mtc_CliDbGetStsEnable() {
    return _Mtc_CliDbGetStsEnable();
  }

  late final _Mtc_CliDbGetStsEnablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('Mtc_CliDbGetStsEnable');
  late final _Mtc_CliDbGetStsEnable =
      _Mtc_CliDbGetStsEnablePtr.asFunction<bool Function()>();

  /// @brief Set use statistics mod enable.
  ///
  /// @retval 0 Set stsc enable flag successfully.
  /// @retval 1 Set stsc enable flag failed.
  ///
  /// @see @ref Mtc_CliDbGetStsEnable
  int Mtc_CliDbSetStsEnable(
    bool bEnable,
  ) {
    return _Mtc_CliDbSetStsEnable(
      bEnable,
    );
  }

  late final _Mtc_CliDbSetStsEnablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_CliDbSetStsEnable');
  late final _Mtc_CliDbSetStsEnable =
      _Mtc_CliDbSetStsEnablePtr.asFunction<int Function(bool)>();

  /// @brief Get get apply data async dns flag.
  ///
  /// @return async dns flag.
  ///
  /// @see @ref Mtc_CliDbSetAsyncDns
  bool Mtc_CliDbGetAsyncDns() {
    return _Mtc_CliDbGetAsyncDns();
  }

  late final _Mtc_CliDbGetAsyncDnsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('Mtc_CliDbGetAsyncDns');
  late final _Mtc_CliDbGetAsyncDns =
      _Mtc_CliDbGetAsyncDnsPtr.asFunction<bool Function()>();

  /// @brief Set get apply data async dns flag.
  ///
  /// @retval 0 Set async dns flag successfully.
  /// @retval 1 Set async dns flag failed.
  ///
  /// @see @ref Mtc_CliDbGetAsyncDns
  int Mtc_CliDbSetAsyncDns(
    bool bAsyncDns,
  ) {
    return _Mtc_CliDbSetAsyncDns(
      bAsyncDns,
    );
  }

  late final _Mtc_CliDbSetAsyncDnsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_CliDbSetAsyncDns');
  late final _Mtc_CliDbSetAsyncDns =
      _Mtc_CliDbSetAsyncDnsPtr.asFunction<int Function(bool)>();

  /// @brief Get path select algo type.
  ///
  /// @return path select algo type.
  ///
  /// @see @ref Mtc_CliDbSetPathAlgoType
  int Mtc_CliDbGetPathAlgoType() {
    return _Mtc_CliDbGetPathAlgoType();
  }

  late final _Mtc_CliDbGetPathAlgoTypePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'Mtc_CliDbGetPathAlgoType');
  late final _Mtc_CliDbGetPathAlgoType =
      _Mtc_CliDbGetPathAlgoTypePtr.asFunction<int Function()>();

  /// @brief Set path select algo type.
  ///
  /// @param [in] iType The path select algo type.
  ///
  /// @retval 0 Set type successfully.
  /// @retval 1 Set type failed.
  ///
  /// @see @ref Mtc_CliDbGetPathAlgoType
  int Mtc_CliDbSetPathAlgoType(
    int iType,
  ) {
    return _Mtc_CliDbSetPathAlgoType(
      iType,
    );
  }

  late final _Mtc_CliDbSetPathAlgoTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>(
          'Mtc_CliDbSetPathAlgoType');
  late final _Mtc_CliDbSetPathAlgoType =
      _Mtc_CliDbSetPathAlgoTypePtr.asFunction<int Function(int)>();

  /// @brief Get get always work mode flag.
  ///
  /// @return always work mode flag.
  ///
  /// @see @ref Mtc_CliDbSetAlwaysWorkMode
  bool Mtc_CliDbGetAlwaysWorkMode() {
    return _Mtc_CliDbGetAlwaysWorkMode();
  }

  late final _Mtc_CliDbGetAlwaysWorkModePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Mtc_CliDbGetAlwaysWorkMode');
  late final _Mtc_CliDbGetAlwaysWorkMode =
      _Mtc_CliDbGetAlwaysWorkModePtr.asFunction<bool Function()>();

  /// @brief Set get always work mode flag.
  ///
  /// @retval 0 Set always work mode flag successfully.
  /// @retval 1 Set always work mode flag failed.
  ///
  /// @see @ref Mtc_CliDbGetAlwaysWorkMode
  int Mtc_CliDbSetAlwaysWorkMode(
    bool bEnable,
  ) {
    return _Mtc_CliDbSetAlwaysWorkMode(
      bEnable,
    );
  }

  late final _Mtc_CliDbSetAlwaysWorkModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_CliDbSetAlwaysWorkMode');
  late final _Mtc_CliDbSetAlwaysWorkMode =
      _Mtc_CliDbSetAlwaysWorkModePtr.asFunction<int Function(bool)>();

  /// @brief Get force login session flag.
  ///
  /// @return force login session flag.
  ///
  /// @see @ref Mtc_CliDbSetForceLogin
  bool Mtc_CliDbGetForceLogin() {
    return _Mtc_CliDbGetForceLogin();
  }

  late final _Mtc_CliDbGetForceLoginPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Mtc_CliDbGetForceLogin');
  late final _Mtc_CliDbGetForceLogin =
      _Mtc_CliDbGetForceLoginPtr.asFunction<bool Function()>();

  /// @brief Set force login session flag realtime.
  ///
  /// @retval 0 Set force login session flag successfully.
  /// @retval 1 Set force login session failed.
  ///
  /// @see @ref Mtc_CliDbGetForceLogin
  int Mtc_CliDbSetForceLogin(
    bool bEnable,
  ) {
    return _Mtc_CliDbSetForceLogin(
      bEnable,
    );
  }

  late final _Mtc_CliDbSetForceLoginPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_CliDbSetForceLogin');
  late final _Mtc_CliDbSetForceLogin =
      _Mtc_CliDbSetForceLoginPtr.asFunction<int Function(bool)>();

  /// @brief Get alwasys try registerAlive flag.
  ///
  /// @return alwasys try registerAlive flag.
  ///
  /// @see @ref Mtc_CliDbSetAlwaysTryAlive
  bool Mtc_CliDbGetAlwaysTryAlive() {
    return _Mtc_CliDbGetAlwaysTryAlive();
  }

  late final _Mtc_CliDbGetAlwaysTryAlivePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Mtc_CliDbGetAlwaysTryAlive');
  late final _Mtc_CliDbGetAlwaysTryAlive =
      _Mtc_CliDbGetAlwaysTryAlivePtr.asFunction<bool Function()>();

  /// @brief Set alwasys try registerAlive realtime.
  ///
  /// @retval 0 Set alwasys try registerAlive successfully.
  /// @retval 1 Set alwasys try registerAlive failed.
  ///
  /// @see @ref Mtc_CliDbGetAlwaysTryAlive
  int Mtc_CliDbSetAlwaysTryAlive(
    bool bEnable,
  ) {
    return _Mtc_CliDbSetAlwaysTryAlive(
      bEnable,
    );
  }

  late final _Mtc_CliDbSetAlwaysTryAlivePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_CliDbSetAlwaysTryAlive');
  late final _Mtc_CliDbSetAlwaysTryAlive =
      _Mtc_CliDbSetAlwaysTryAlivePtr.asFunction<int Function(bool)>();

  /// @brief Get tls only flag.
  ///
  /// @return tls only flag.
  ///
  /// @see @ref Mtc_CliDbSetTlsOnly
  bool Mtc_CliDbGetTlsOnly() {
    return _Mtc_CliDbGetTlsOnly();
  }

  late final _Mtc_CliDbGetTlsOnlyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('Mtc_CliDbGetTlsOnly');
  late final _Mtc_CliDbGetTlsOnly =
      _Mtc_CliDbGetTlsOnlyPtr.asFunction<bool Function()>();

  /// @brief Set tls only flag.
  ///
  /// @retval 0 Set tls only successfully.
  /// @retval 1 Set tls only failed.
  ///
  /// @see @ref Mtc_CliDbGetTlsOnly
  int Mtc_CliDbSetTlsOnly(
    bool bEnable,
  ) {
    return _Mtc_CliDbSetTlsOnly(
      bEnable,
    );
  }

  late final _Mtc_CliDbSetTlsOnlyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_CliDbSetTlsOnly');
  late final _Mtc_CliDbSetTlsOnly =
      _Mtc_CliDbSetTlsOnlyPtr.asFunction<int Function(bool)>();

  /// @brief Get common mtu.
  ///
  /// @return common mtu.
  ///
  /// @see @ref Mtc_CliDbSetCommonMtuSize
  int Mtc_CliDbGetCommonMtuSize() {
    return _Mtc_CliDbGetCommonMtuSize();
  }

  late final _Mtc_CliDbGetCommonMtuSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'Mtc_CliDbGetCommonMtuSize');
  late final _Mtc_CliDbGetCommonMtuSize =
      _Mtc_CliDbGetCommonMtuSizePtr.asFunction<int Function()>();

  /// @brief Set common mtu.
  ///
  /// @retval ZOK Set value successfully.
  /// @retval ZFAILED Set value failed.
  ///
  /// @see @ref Mtc_CliDbGetCommonMtuSize
  int Mtc_CliDbSetCommonMtuSize(
    int iMtu,
  ) {
    return _Mtc_CliDbSetCommonMtuSize(
      iMtu,
    );
  }

  late final _Mtc_CliDbSetCommonMtuSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>(
          'Mtc_CliDbSetCommonMtuSize');
  late final _Mtc_CliDbSetCommonMtuSize =
      _Mtc_CliDbSetCommonMtuSizePtr.asFunction<int Function(int)>();

  /// @brief Get access type.
  ///
  /// @return access type.
  ///
  /// @see @ref Mtc_CliDbSetCommonMtuSize
  int Mtc_CliDbGetAccessType() {
    return _Mtc_CliDbGetAccessType();
  }

  late final _Mtc_CliDbGetAccessTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('Mtc_CliDbGetAccessType');
  late final _Mtc_CliDbGetAccessType =
      _Mtc_CliDbGetAccessTypePtr.asFunction<int Function()>();

  /// @brief Set access type.
  ///
  /// @param [in] iAccessType The statistics upload type @ref EN_MTC_CLI_DB_ACCESS_TYPE.
  /// @retval ZOK Set value successfully.
  /// @retval ZFAILED Set value failed.
  ///
  /// @see @ref Mtc_CliDbGetAccessType
  int Mtc_CliDbSetAccessType(
    int iAccessType,
  ) {
    return _Mtc_CliDbSetAccessType(
      iAccessType,
    );
  }

  late final _Mtc_CliDbSetAccessTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>(
          'Mtc_CliDbSetAccessType');
  late final _Mtc_CliDbSetAccessType =
      _Mtc_CliDbSetAccessTypePtr.asFunction<int Function(int)>();

  /// @brief Set set root der data.
  ///
  /// @param [in] pcRootData The root data.
  ///
  /// @retval 0 Set root data successfully.
  /// @retval 1 Set root data failed.
  ///
  /// @see @ref Mtc_CliDbGetRootDerData
  int Mtc_CliDbSetRootDerData(
    ffi.Pointer<ffi.Char> pcRootData,
  ) {
    return _Mtc_CliDbSetRootDerData(
      pcRootData,
    );
  }

  late final _Mtc_CliDbSetRootDerDataPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_CliDbSetRootDerData');
  late final _Mtc_CliDbSetRootDerData = _Mtc_CliDbSetRootDerDataPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Get root der data.
  ///
  /// @return Root der data.
  ///
  /// @see @ref Mtc_CliDbSetRootDerData
  ffi.Pointer<ffi.Char> Mtc_CliDbGetRootDerData() {
    return _Mtc_CliDbGetRootDerData();
  }

  late final _Mtc_CliDbGetRootDerDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_CliDbGetRootDerData');
  late final _Mtc_CliDbGetRootDerData = _Mtc_CliDbGetRootDerDataPtr.asFunction<
      ffi.Pointer<ffi.Char> Function()>();

  /// @brief Set set trust cert data.
  ///
  /// @param [in] pcCertName The cert name.
  /// @param [in] pcCertData The cert data.
  ///
  /// @retval 0 Set root data successfully.
  /// @retval 1 Set root data failed.
  ///
  /// @see @ref Mtc_CliDbGetTrustCert
  int Mtc_CliDbSetTrustCert(
    ffi.Pointer<ffi.Char> pcCertName,
    ffi.Pointer<ffi.Char> pcCertData,
  ) {
    return _Mtc_CliDbSetTrustCert(
      pcCertName,
      pcCertData,
    );
  }

  late final _Mtc_CliDbSetTrustCertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_CliDbSetTrustCert');
  late final _Mtc_CliDbSetTrustCert = _Mtc_CliDbSetTrustCertPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief Get root der data.
  ///
  /// @param [in] pcCertName The cert name.
  ///
  /// @return Root der data.
  ///
  /// @see @ref Mtc_CliDbSetTrustCert
  ffi.Pointer<ffi.Char> Mtc_CliDbGetTrustCert(
    ffi.Pointer<ffi.Char> pcCertName,
  ) {
    return _Mtc_CliDbGetTrustCert(
      pcCertName,
    );
  }

  late final _Mtc_CliDbGetTrustCertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('Mtc_CliDbGetTrustCert');
  late final _Mtc_CliDbGetTrustCert = _Mtc_CliDbGetTrustCertPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Get agentCall level.
  ///
  /// @return agentCall level.
  ///
  /// @see @ref Mtc_CliDbSetAgentCallLevel
  int Mtc_CliDbGetAgentCallLevel() {
    return _Mtc_CliDbGetAgentCallLevel();
  }

  late final _Mtc_CliDbGetAgentCallLevelPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'Mtc_CliDbGetAgentCallLevel');
  late final _Mtc_CliDbGetAgentCallLevel =
      _Mtc_CliDbGetAgentCallLevelPtr.asFunction<int Function()>();

  /// @brief Set agentCall level.
  ///
  /// @retval ZOK Set value successfully.
  /// @retval ZFAILED Set value failed.
  ///
  /// @see @ref Mtc_CliDbGetAgentCallLevel
  int Mtc_CliDbSetAgentCallLevel(
    int iLevel,
  ) {
    return _Mtc_CliDbSetAgentCallLevel(
      iLevel,
    );
  }

  late final _Mtc_CliDbSetAgentCallLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>(
          'Mtc_CliDbSetAgentCallLevel');
  late final _Mtc_CliDbSetAgentCallLevel =
      _Mtc_CliDbSetAgentCallLevelPtr.asFunction<int Function(int)>();

  /// @brief Get user count in profile management.
  ///
  /// This interface should be invoke after @ref Mtc_CliInit was called.
  ///
  /// @return The profile user size.
  int Mtc_ProfGetUserSize() {
    return _Mtc_ProfGetUserSize();
  }

  late final _Mtc_ProfGetUserSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('Mtc_ProfGetUserSize');
  late final _Mtc_ProfGetUserSize =
      _Mtc_ProfGetUserSizePtr.asFunction<int Function()>();

  /// @brief MTC profile get user name by index
  ///
  /// This interface should be invoke after @ref Mtc_CliInit was called.
  ///
  /// @param [in] iIndex The index in profile list, 0 to size - 1.
  ///
  /// @return The user name string.
  /// The caller must copy it, then use.
  ffi.Pointer<ffi.Char> Mtc_ProfGetUser(
    int iIndex,
  ) {
    return _Mtc_ProfGetUser(
      iIndex,
    );
  }

  late final _Mtc_ProfGetUserPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'Mtc_ProfGetUser');
  late final _Mtc_ProfGetUser =
      _Mtc_ProfGetUserPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// @brief MTC profile get current user.
  ///
  /// This interface should be invoke after @ref Mtc_CliInit and
  /// @ref Mtc_CliOpen was called.
  ///
  /// @return The current user string, if client is not open return ZNULL.
  ffi.Pointer<ffi.Char> Mtc_ProfGetCurUser() {
    return _Mtc_ProfGetCurUser();
  }

  late final _Mtc_ProfGetCurUserPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_ProfGetCurUser');
  late final _Mtc_ProfGetCurUser =
      _Mtc_ProfGetCurUserPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC profile create a user.
  ///
  /// This interface should be invoke after @ref Mtc_CliInit was called.
  ///
  /// @param [in] pcUserName The new user name.
  ///
  /// @retval 0 Create a user successfully.
  /// @retval 1 Create a user failed.
  int Mtc_ProfCreateUser(
    ffi.Pointer<ffi.Char> pcUserName,
  ) {
    return _Mtc_ProfCreateUser(
      pcUserName,
    );
  }

  late final _Mtc_ProfCreateUserPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_ProfCreateUser');
  late final _Mtc_ProfCreateUser =
      _Mtc_ProfCreateUserPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC profile delete a user.
  ///
  /// This interface should be invoke after @ref Mtc_CliInit was called.
  ///
  /// @param [in] pcUserName The name of the user will be deleted.
  ///
  /// @retval 0 Delete a user successfully.
  /// @retval 1 Delete a user failed.
  int Mtc_ProfDeleteUser(
    ffi.Pointer<ffi.Char> pcUserName,
  ) {
    return _Mtc_ProfDeleteUser(
      pcUserName,
    );
  }

  late final _Mtc_ProfDeleteUserPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_ProfDeleteUser');
  late final _Mtc_ProfDeleteUser =
      _Mtc_ProfDeleteUserPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC profile check exist the user.
  ///
  /// This interface should be invoke after @ref Mtc_CliInit was called.
  ///
  /// @param [in] pcUserName The name of the user will be checked.
  ///
  /// @retval true The user is exist.
  /// @retval false The user is not exist.
  bool Mtc_ProfExistUser(
    ffi.Pointer<ffi.Char> pcUserName,
  ) {
    return _Mtc_ProfExistUser(
      pcUserName,
    );
  }

  late final _Mtc_ProfExistUserPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_ProfExistUser');
  late final _Mtc_ProfExistUser =
      _Mtc_ProfExistUserPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC profile save configuration of current user.
  ///
  /// This interface should be invoke after @ref Mtc_CliInit and
  /// @ref Mtc_CliOpen was called.
  ///
  /// @retval 0 Save provision successfully.
  /// @retval 1 Save provision failed.
  int Mtc_ProfSaveProvision() {
    return _Mtc_ProfSaveProvision();
  }

  late final _Mtc_ProfSaveProvisionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('Mtc_ProfSaveProvision');
  late final _Mtc_ProfSaveProvision =
      _Mtc_ProfSaveProvisionPtr.asFunction<int Function()>();

  /// @brief MTC profile reset configuration of current user.
  ///
  /// This interface should be invoke after @ref Mtc_CliInit and
  /// @ref Mtc_CliOpen was called.
  ///
  /// @retval 0 Reset provision successfully.
  /// @retval 1 Reset provision failed.
  int Mtc_ProfResetProvision() {
    return _Mtc_ProfResetProvision();
  }

  late final _Mtc_ProfResetProvisionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('Mtc_ProfResetProvision');
  late final _Mtc_ProfResetProvision =
      _Mtc_ProfResetProvisionPtr.asFunction<int Function()>();

  /// @brief Get application version from database.
  ///
  /// @return Application version.
  ///
  /// @see @ref Mtc_ProfDbSetAppVer
  ffi.Pointer<ffi.Char> Mtc_ProfDbGetAppVer() {
    return _Mtc_ProfDbGetAppVer();
  }

  late final _Mtc_ProfDbGetAppVerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_ProfDbGetAppVer');
  late final _Mtc_ProfDbGetAppVer =
      _Mtc_ProfDbGetAppVerPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief Set application version from database.
  ///
  /// @param [in] pcAppVer The application version.
  ///
  /// @retval 0 Set application version successfully.
  /// @retval 1 Set application version failed.
  ///
  /// @see @ref Mtc_ProfDbGetAppVer
  int Mtc_ProfDbSetAppVer(
    ffi.Pointer<ffi.Char> pcAppVer,
  ) {
    return _Mtc_ProfDbSetAppVer(
      pcAppVer,
    );
  }

  late final _Mtc_ProfDbSetAppVerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_ProfDbSetAppVer');
  late final _Mtc_ProfDbSetAppVer =
      _Mtc_ProfDbSetAppVerPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Get remember password option from database.
  ///
  /// @retval true Remember password.
  /// @retval false Do not remember password.
  ///
  /// @see @ref Mtc_ProfDbSetRemPwd
  bool Mtc_ProfDbGetRemPwd() {
    return _Mtc_ProfDbGetRemPwd();
  }

  late final _Mtc_ProfDbGetRemPwdPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('Mtc_ProfDbGetRemPwd');
  late final _Mtc_ProfDbGetRemPwd =
      _Mtc_ProfDbGetRemPwdPtr.asFunction<bool Function()>();

  /// @brief Set remember password option.
  ///
  /// @param [in] bRember The option of remembering password.
  ///
  /// @retval 0 Set remember password option successfully.
  /// @retval 1 Set remember password option failed.
  ///
  /// @see @ref Mtc_ProfDbGetRemPwd
  int Mtc_ProfDbSetRemPwd(
    bool bRember,
  ) {
    return _Mtc_ProfDbSetRemPwd(
      bRember,
    );
  }

  late final _Mtc_ProfDbSetRemPwdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_ProfDbSetRemPwd');
  late final _Mtc_ProfDbSetRemPwd =
      _Mtc_ProfDbSetRemPwdPtr.asFunction<int Function(bool)>();

  /// @brief Get the user automatically login option from database.
  ///
  /// @retval true User will automatically login.
  /// @retval false User will not automatically login.
  ///
  /// @see @ref Mtc_ProfDbSetAutoLogin
  bool Mtc_ProfDbGetAutoLogin() {
    return _Mtc_ProfDbGetAutoLogin();
  }

  late final _Mtc_ProfDbGetAutoLoginPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Mtc_ProfDbGetAutoLogin');
  late final _Mtc_ProfDbGetAutoLogin =
      _Mtc_ProfDbGetAutoLoginPtr.asFunction<bool Function()>();

  /// @brief Set the user automatically login option.
  ///
  /// @param [in] bAuto User automatically login option.
  ///
  /// @retval 0 Set the option successfully.
  /// @retval 1 Set the option option failed.
  ///
  /// @see @ref Mtc_ProfDbGetAutoLogin
  int Mtc_ProfDbSetAutoLogin(
    bool bAuto,
  ) {
    return _Mtc_ProfDbSetAutoLogin(
      bAuto,
    );
  }

  late final _Mtc_ProfDbSetAutoLoginPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_ProfDbSetAutoLogin');
  late final _Mtc_ProfDbSetAutoLogin =
      _Mtc_ProfDbSetAutoLoginPtr.asFunction<int Function(bool)>();

  /// @brief Get avatar file name.
  ///
  /// @return The string of avatar file name.
  ///
  /// @see @ref Mtc_ProfDbSetAvatarFile
  ffi.Pointer<ffi.Char> Mtc_ProfDbGetAvatarFile() {
    return _Mtc_ProfDbGetAvatarFile();
  }

  late final _Mtc_ProfDbGetAvatarFilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_ProfDbGetAvatarFile');
  late final _Mtc_ProfDbGetAvatarFile = _Mtc_ProfDbGetAvatarFilePtr.asFunction<
      ffi.Pointer<ffi.Char> Function()>();

  /// @brief Set avatar file name.
  ///
  /// @param [in] pcFileName Avatar file name.
  ///
  /// @retval 0 Set avatar file name successfully.
  /// @retval 1 Set avatar file name failed.
  ///
  /// @see @ref Mtc_ProfDbGetAvatarFile
  int Mtc_ProfDbSetAvatarFile(
    ffi.Pointer<ffi.Char> pcFileName,
  ) {
    return _Mtc_ProfDbSetAvatarFile(
      pcFileName,
    );
  }

  late final _Mtc_ProfDbSetAvatarFilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_ProfDbSetAvatarFile');
  late final _Mtc_ProfDbSetAvatarFile = _Mtc_ProfDbSetAvatarFilePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Get country code.
  ///
  /// @return The string of country code.
  ///
  /// @see @ref Mtc_ProfDbSetCountryCode
  ffi.Pointer<ffi.Char> Mtc_ProfDbGetCountryCode() {
    return _Mtc_ProfDbGetCountryCode();
  }

  late final _Mtc_ProfDbGetCountryCodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_ProfDbGetCountryCode');
  late final _Mtc_ProfDbGetCountryCode = _Mtc_ProfDbGetCountryCodePtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief Set country code.
  ///
  /// @param [in] pcCountryCode Country code.
  ///
  /// @retval 0 Set country code successfully.
  /// @retval 1 Set country code failed.
  ///
  /// @see @ref Mtc_ProfDbGetCountryCode
  int Mtc_ProfDbSetCountryCode(
    ffi.Pointer<ffi.Char> pcCountryCode,
  ) {
    return _Mtc_ProfDbSetCountryCode(
      pcCountryCode,
    );
  }

  late final _Mtc_ProfDbSetCountryCodePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_ProfDbSetCountryCode');
  late final _Mtc_ProfDbSetCountryCode = _Mtc_ProfDbSetCountryCodePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Get the client provisioning enable from database.
  ///
  /// @retval true Start client provisioning.
  /// @retval false Do not start client provisioning.
  ///
  /// @see @ref Mtc_ProfDbSetCpEnable
  bool Mtc_ProfDbGetCpEnable() {
    return _Mtc_ProfDbGetCpEnable();
  }

  late final _Mtc_ProfDbGetCpEnablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('Mtc_ProfDbGetCpEnable');
  late final _Mtc_ProfDbGetCpEnable =
      _Mtc_ProfDbGetCpEnablePtr.asFunction<bool Function()>();

  /// @brief Set client provisioning enable.
  ///
  /// @param [in] bCpEnable The client provisioning option.
  ///
  /// @retval 0 Set the client provisioning option successfully.
  /// @retval 1 Set the client provisioning option failed.
  ///
  /// @see @ref Mtc_ProfDbGetCpEnable
  int Mtc_ProfDbSetCpEnable(
    bool bCpEnable,
  ) {
    return _Mtc_ProfDbSetCpEnable(
      bCpEnable,
    );
  }

  late final _Mtc_ProfDbSetCpEnablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_ProfDbSetCpEnable');
  late final _Mtc_ProfDbSetCpEnable =
      _Mtc_ProfDbSetCpEnablePtr.asFunction<int Function(bool)>();

  /// @brief Get extension parameter.
  ///
  /// @param [in] pcName The parameter name.
  ///
  /// @retval NULL if no parameter which do not exist, or the parameter value.
  ///
  /// @see @ref Mtc_ProfDbSetExtParm
  ffi.Pointer<ffi.Char> Mtc_ProfDbGetExtParm(
    ffi.Pointer<ffi.Char> pcName,
  ) {
    return _Mtc_ProfDbGetExtParm(
      pcName,
    );
  }

  late final _Mtc_ProfDbGetExtParmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('Mtc_ProfDbGetExtParm');
  late final _Mtc_ProfDbGetExtParm = _Mtc_ProfDbGetExtParmPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Set extension parameter.
  ///
  /// @param [in] pcName The parameter name.
  /// @param [in] pcValue The parameter value.
  ///
  /// @retval 0 Set the parameter successfully.
  /// @retval 1 Set the parameter failed.
  ///
  /// @see @ref Mtc_ProfDbGetExtParm
  int Mtc_ProfDbSetExtParm(
    ffi.Pointer<ffi.Char> pcName,
    ffi.Pointer<ffi.Char> pcValue,
  ) {
    return _Mtc_ProfDbSetExtParm(
      pcName,
      pcValue,
    );
  }

  late final _Mtc_ProfDbSetExtParmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_ProfDbSetExtParm');
  late final _Mtc_ProfDbSetExtParm = _Mtc_ProfDbSetExtParmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief MTC create a user from JustalkCloud.
  ///
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] pcUserName The Username string.
  /// @param [in] pcPassword The password string.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeCreateOkNotification or @ref MtcUeCreateDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeCreate(
    int zCookie,
    ffi.Pointer<ffi.Char> pcUserName,
    ffi.Pointer<ffi.Char> pcPassword,
  ) {
    return _Mtc_UeCreate(
      zCookie,
      pcUserName,
      pcPassword,
    );
  }

  late final _Mtc_UeCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Size, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeCreate');
  late final _Mtc_UeCreate = _Mtc_UeCreatePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief MTC create a user from JustalkCloud.
  ///
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] pcRelations The relations type and id in a JSON array.
  /// Each element in array is a JSON object contains
  /// @ref MtcUeRelationTypeKey and @ref MtcUeRelationIdKey
  /// @param [in] pcPassword The password string.
  /// @param [in] bPwdSetByUser unused, set true
  /// @param [in] pcProps The props name and value in a JSON array.
  /// Each element in array is a JSON object contains
  /// @ref MtcUeInitialPropertyNameKey and @ref MtcUeInitialPropertyValueKey
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeCreateOkNotification or @ref MtcUeCreateDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeCreate2(
    int zCookie,
    ffi.Pointer<ffi.Char> pcRelations,
    ffi.Pointer<ffi.Char> pcPassword,
    bool bPwdSetByUser,
    ffi.Pointer<ffi.Char> pcProps,
  ) {
    return _Mtc_UeCreate2(
      zCookie,
      pcRelations,
      pcPassword,
      bPwdSetByUser,
      pcProps,
    );
  }

  late final _Mtc_UeCreate2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeCreate2');
  late final _Mtc_UeCreate2 = _Mtc_UeCreate2Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, bool,
          ffi.Pointer<ffi.Char>)>();

  /// @brief MTC create a user with authentic code from JustalkCloud.
  ///
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] pcAuthCode The Authentic Code string.
  /// @param [in] iIdType @ref EN_MTC_USER_ID_TYPE The user entry type.
  /// @param [in] pcLinkedId The Phone number string.
  /// @param [in] pcPassword The password string.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeCreateOkNotification or @ref MtcUeCreateDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeCreateWithAuthCode(
    int zCookie,
    ffi.Pointer<ffi.Char> pcAuthCode,
    int iIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
    ffi.Pointer<ffi.Char> pcPassword,
  ) {
    return _Mtc_UeCreateWithAuthCode(
      zCookie,
      pcAuthCode,
      iIdType,
      pcLinkedId,
      pcPassword,
    );
  }

  late final _Mtc_UeCreateWithAuthCodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeCreateWithAuthCode');
  late final _Mtc_UeCreateWithAuthCode =
      _Mtc_UeCreateWithAuthCodePtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  /// @brief MTC create a user with authentic code from JustalkCloud.
  ///
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] pcAuthCode The Authentic Code string.
  /// @param [in] pcIdType The Id Type.
  /// @param [in] pcLinkedId The Phone number string.
  /// @param [in] pcPassword The password string.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeCreateOkNotification or @ref MtcUeCreateDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeCreateWithAuthCodeX(
    int zCookie,
    ffi.Pointer<ffi.Char> pcAuthCode,
    ffi.Pointer<ffi.Char> pcIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
    ffi.Pointer<ffi.Char> pcPassword,
  ) {
    return _Mtc_UeCreateWithAuthCodeX(
      zCookie,
      pcAuthCode,
      pcIdType,
      pcLinkedId,
      pcPassword,
    );
  }

  late final _Mtc_UeCreateWithAuthCodeXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeCreateWithAuthCodeX');
  late final _Mtc_UeCreateWithAuthCodeX =
      _Mtc_UeCreateWithAuthCodeXPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief MTC require an Authentication code from  JustalkCloud.
  ///
  /// @param [in] iRequestType @ref EN_MTC_UE_REQUEST_TYPE The auth will be used for what?.
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] iIdType @ref EN_MTC_USER_ID_TYPE The auth tool type.
  /// @param [in] pcLinkedId The auth tool number string.
  /// @param [in] iExpires The authCode will be work well in iExpires seconds.
  /// @param [in] iRetryCount means how many times the message is sent.
  /// @param [in] pcBy means whether message is sent by SMS @ref MTC_UE_AUTHCODE_BYSMS
  /// or audio @ref MTC_UE_AUTHCODE_BYCALL.
  /// @param [in] pcTemplate The template of the message with authorization code.
  /// @param [in] pcEmailTitle The title of the email with authorization code.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeRequestAuthCodeOkNotification or @ref MtcUeRequestAuthCodeDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeRequestAuthCode(
    int iRequestType,
    int zCookie,
    int iIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
    int iExpires,
    int iRetryCount,
    ffi.Pointer<ffi.Char> pcBy,
    ffi.Pointer<ffi.Char> pcTemplate,
    ffi.Pointer<ffi.Char> pcEmailTitle,
  ) {
    return _Mtc_UeRequestAuthCode(
      iRequestType,
      zCookie,
      iIdType,
      pcLinkedId,
      iExpires,
      iRetryCount,
      pcBy,
      pcTemplate,
      pcEmailTitle,
    );
  }

  late final _Mtc_UeRequestAuthCodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt,
              ffi.Size,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeRequestAuthCode');
  late final _Mtc_UeRequestAuthCode = _Mtc_UeRequestAuthCodePtr.asFunction<
      int Function(
          int,
          int,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// @brief MTC require an Authentication code from  JustalkCloud.
  ///
  /// @param [in] iRequestType @ref EN_MTC_UE_REQUEST_TYPE The auth will be used for what?.
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] pcIdType The Id Type.
  /// @param [in] pcLinkedId The auth tool number string.
  /// @param [in] iExpires The authCode will be work well in iExpires seconds.
  /// @param [in] iRetryCount means how many times the message is sent.
  /// @param [in] pcBy means whether message is sent by SMS @ref MTC_UE_AUTHCODE_BYSMS
  /// or audio @ref MTC_UE_AUTHCODE_BYCALL.
  /// @param [in] pcTemplate The template of the message with authorization code.
  /// @param [in] pcEmailTitle The title of the email with authorization code.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeRequestAuthCodeOkNotification or @ref MtcUeRequestAuthCodeDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeRequestAuthCodeX(
    int iRequestType,
    int zCookie,
    ffi.Pointer<ffi.Char> pcIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
    int iExpires,
    int iRetryCount,
    ffi.Pointer<ffi.Char> pcBy,
    ffi.Pointer<ffi.Char> pcTemplate,
    ffi.Pointer<ffi.Char> pcEmailTitle,
  ) {
    return _Mtc_UeRequestAuthCodeX(
      iRequestType,
      zCookie,
      pcIdType,
      pcLinkedId,
      iExpires,
      iRetryCount,
      pcBy,
      pcTemplate,
      pcEmailTitle,
    );
  }

  late final _Mtc_UeRequestAuthCodeXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeRequestAuthCodeX');
  late final _Mtc_UeRequestAuthCodeX = _Mtc_UeRequestAuthCodeXPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// @brief MTC require an Authentication code from  JustalkCloud.
  ///
  /// @param [in] iRequestType @ref EN_MTC_UE_REQUEST_TYPE The auth will be used for what?.
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] iIdType @ref EN_MTC_USER_ID_TYPE The auth tool type.
  /// @param [in] pcLinkedId The auth tool number string.
  /// @param [in] iExpires The authCode will be work well in iExpires seconds.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeRequestClientAuthCodeOkNotification or @ref MtcUeRequestClientAuthCodeDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeRequestClientAuthCode(
    int iRequestType,
    int zCookie,
    int iIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
    int iExpires,
  ) {
    return _Mtc_UeRequestClientAuthCode(
      iRequestType,
      zCookie,
      iIdType,
      pcLinkedId,
      iExpires,
    );
  }

  late final _Mtc_UeRequestClientAuthCodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Size, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('Mtc_UeRequestClientAuthCode');
  late final _Mtc_UeRequestClientAuthCode = _Mtc_UeRequestClientAuthCodePtr
      .asFunction<int Function(int, int, int, ffi.Pointer<ffi.Char>, int)>();

  /// @brief MTC require an Authentication code from  JustalkCloud.
  ///
  /// @param [in] iRequestType @ref EN_MTC_UE_REQUEST_TYPE The auth will be used for what?.
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] pcIdType The Id Type.
  /// @param [in] pcLinkedId The auth tool number string.
  /// @param [in] iExpires The authCode will be work well in iExpires seconds.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeRequestClientAuthCodeOkNotification or @ref MtcUeRequestClientAuthCodeDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeRequestClientAuthCodeX(
    int iRequestType,
    int zCookie,
    ffi.Pointer<ffi.Char> pcIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
    int iExpires,
  ) {
    return _Mtc_UeRequestClientAuthCodeX(
      iRequestType,
      zCookie,
      pcIdType,
      pcLinkedId,
      iExpires,
    );
  }

  late final _Mtc_UeRequestClientAuthCodeXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.Size, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('Mtc_UeRequestClientAuthCodeX');
  late final _Mtc_UeRequestClientAuthCodeX =
      _Mtc_UeRequestClientAuthCodeXPtr.asFunction<
          int Function(
              int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  /// @brief MTC fetch the encrypted password.
  ///
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] pcAuthCode The Authentication code string get from the email or phone.
  /// @param [in] iIdType The UserId string.
  /// @param [in] pcLinkedId The encrypted password string.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeFetchPasswordOkNotification or @ref MtcUeResetPasswordDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeFetchPassword(
    int zCookie,
    ffi.Pointer<ffi.Char> pcAuthCode,
    int iIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
  ) {
    return _Mtc_UeFetchPassword(
      zCookie,
      pcAuthCode,
      iIdType,
      pcLinkedId,
    );
  }

  late final _Mtc_UeFetchPasswordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Size, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeFetchPassword');
  late final _Mtc_UeFetchPassword = _Mtc_UeFetchPasswordPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  /// @brief MTC fetch the encrypted password.
  ///
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] pcAuthCode The Authentication code string get from the email or phone.
  /// @param [in] pcIdType The Id Type.
  /// @param [in] pcLinkedId The encrypted password string.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeFetchPasswordOkNotification or @ref MtcUeFetchPasswordDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeFetchPasswordX(
    int zCookie,
    ffi.Pointer<ffi.Char> pcAuthCode,
    ffi.Pointer<ffi.Char> pcIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
  ) {
    return _Mtc_UeFetchPasswordX(
      zCookie,
      pcAuthCode,
      pcIdType,
      pcLinkedId,
    );
  }

  late final _Mtc_UeFetchPasswordXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeFetchPasswordX');
  late final _Mtc_UeFetchPasswordX = _Mtc_UeFetchPasswordXPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// @brief MTC fetch the encrypted password.
  ///
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] pcIdType The Id Type.
  /// @param [in] pcLinkedId The encrypted password string.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeFetchPasswordOkNotification or @ref MtcUeFetchPasswordDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeFetchPassword2(
    int zCookie,
    ffi.Pointer<ffi.Char> pcIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
  ) {
    return _Mtc_UeFetchPassword2(
      zCookie,
      pcIdType,
      pcLinkedId,
    );
  }

  late final _Mtc_UeFetchPassword2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Size, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeFetchPassword2');
  late final _Mtc_UeFetchPassword2 = _Mtc_UeFetchPassword2Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief MTC reset password.
  ///
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] pcAuthCode The Authentication code string get from the email or phone.
  /// @param [in] pcPassword The new password string.
  /// @param [in] iIdType The UserId string.
  /// @param [in] pcLinkedId The encrypted password string.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeResetPasswordOkNotification or @ref MtcUeResetPasswordDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeResetPassword(
    int zCookie,
    ffi.Pointer<ffi.Char> pcAuthCode,
    ffi.Pointer<ffi.Char> pcPassword,
    int iIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
  ) {
    return _Mtc_UeResetPassword(
      zCookie,
      pcAuthCode,
      pcPassword,
      iIdType,
      pcLinkedId,
    );
  }

  late final _Mtc_UeResetPasswordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeResetPassword');
  late final _Mtc_UeResetPassword = _Mtc_UeResetPasswordPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>)>();

  /// @brief MTC reset password.
  ///
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] pcAuthCode The Authentication code string get from the email or phone.
  /// @param [in] pcPassword The new password string.
  /// @param [in] pcIdType The Id Type.
  /// @param [in] pcLinkedId The encrypted password string.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeResetPasswordOkNotification or @ref MtcUeResetPasswordDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeResetPasswordX(
    int zCookie,
    ffi.Pointer<ffi.Char> pcAuthCode,
    ffi.Pointer<ffi.Char> pcPassword,
    ffi.Pointer<ffi.Char> pcIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
  ) {
    return _Mtc_UeResetPasswordX(
      zCookie,
      pcAuthCode,
      pcPassword,
      pcIdType,
      pcLinkedId,
    );
  }

  late final _Mtc_UeResetPasswordXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeResetPasswordX');
  late final _Mtc_UeResetPasswordX = _Mtc_UeResetPasswordXPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief MTC change an old password to a new password.
  ///
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] pcOldPassword The old password string.
  /// @param [in] pcNewPassword The new password string.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeChangePasswordOkNotification or @ref MtcUeChangePasswordDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeChangePassword(
    int zCookie,
    ffi.Pointer<ffi.Char> pcOldPassword,
    ffi.Pointer<ffi.Char> pcNewPassword,
  ) {
    return _Mtc_UeChangePassword(
      zCookie,
      pcOldPassword,
      pcNewPassword,
    );
  }

  late final _Mtc_UeChangePasswordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Size, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeChangePassword');
  late final _Mtc_UeChangePassword = _Mtc_UeChangePasswordPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief MTC bind the mailbox or phone number associated with an account.
  ///
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] pcAuthCode The Authentication code string get from the email or phone.
  /// @param [in] iIdType @ref EN_MTC_USER_ID_TYPE .
  /// @param [in] pcLinkedId The phone number string or mainbox string.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeBindRelationshipOkNotification or @ref MtcUeBindRelationshipDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeBindRelationship(
    int zCookie,
    ffi.Pointer<ffi.Char> pcAuthCode,
    int iIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
  ) {
    return _Mtc_UeBindRelationship(
      zCookie,
      pcAuthCode,
      iIdType,
      pcLinkedId,
    );
  }

  late final _Mtc_UeBindRelationshipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Size, ffi.Pointer<ffi.Char>, ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeBindRelationship');
  late final _Mtc_UeBindRelationship = _Mtc_UeBindRelationshipPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  /// @brief MTC bind the mailbox or phone number associated with an account.
  ///
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] pcAuthCode The Authentication code string get from the email or phone.
  /// @param [in] pcIdType The Id Type .
  /// @param [in] pcLinkedId The phone number string or mainbox string.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeBindRelationshipOkNotification or @ref MtcUeBindRelationshipDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeBindRelationshipX(
    int zCookie,
    ffi.Pointer<ffi.Char> pcAuthCode,
    ffi.Pointer<ffi.Char> pcIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
  ) {
    return _Mtc_UeBindRelationshipX(
      zCookie,
      pcAuthCode,
      pcIdType,
      pcLinkedId,
    );
  }

  late final _Mtc_UeBindRelationshipXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeBindRelationshipX');
  late final _Mtc_UeBindRelationshipX = _Mtc_UeBindRelationshipXPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// @brief MTC bind the mailbox or phone number associated with an account.
  ///
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] pcIdType The Id Type .
  /// @param [in] pcLinkedId The phone number string or mainbox string.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeBindRelationshipOkNotification or @ref MtcUeBindRelationshipDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeBindRelationship2(
    int zCookie,
    ffi.Pointer<ffi.Char> pcIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
  ) {
    return _Mtc_UeBindRelationship2(
      zCookie,
      pcIdType,
      pcLinkedId,
    );
  }

  late final _Mtc_UeBindRelationship2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Size, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeBindRelationship2');
  late final _Mtc_UeBindRelationship2 = _Mtc_UeBindRelationship2Ptr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief MTC unbind the mailbox or phone number associated with an account.
  ///
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] iIdType @ref EN_MTC_USER_ID_TYPE.
  /// @param [in] pcLinkedId The phone number string or mainbox string.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeBindRelationshipOkNotification or @ref MtcUeBindRelationshipDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeUnbindRelationship(
    int zCookie,
    int iIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
  ) {
    return _Mtc_UeUnbindRelationship(
      zCookie,
      iIdType,
      pcLinkedId,
    );
  }

  late final _Mtc_UeUnbindRelationshipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Size, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeUnbindRelationship');
  late final _Mtc_UeUnbindRelationship = _Mtc_UeUnbindRelationshipPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  /// @brief MTC unbind the mailbox or phone number associated with an account.
  ///
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] pcIdType The Id Type.
  /// @param [in] pcLinkedId The phone number string or mainbox string.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeBindRelationshipOkNotification or @ref MtcUeBindRelationshipDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeUnbindRelationshipX(
    int zCookie,
    ffi.Pointer<ffi.Char> pcIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
  ) {
    return _Mtc_UeUnbindRelationshipX(
      zCookie,
      pcIdType,
      pcLinkedId,
    );
  }

  late final _Mtc_UeUnbindRelationshipXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Size, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeUnbindRelationshipX');
  late final _Mtc_UeUnbindRelationshipX =
      _Mtc_UeUnbindRelationshipXPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief MTC fetch the encrypted password.
  ///
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] iIdType @ref EN_MTC_USER_ID_TYPE.
  /// @param [in] pcLinkedId The username string.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcCliAccountQueryOkNotification or @ref MtcCliAccountQueryDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeQueryStatus(
    int zCookie,
    int iIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
  ) {
    return _Mtc_UeQueryStatus(
      zCookie,
      iIdType,
      pcLinkedId,
    );
  }

  late final _Mtc_UeQueryStatusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Size, ffi.Int, ffi.Pointer<ffi.Char>)>>('Mtc_UeQueryStatus');
  late final _Mtc_UeQueryStatus = _Mtc_UeQueryStatusPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Char>)>();

  /// @brief MTC fetch the encrypted password.
  ///
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] pcIdType The Id Type.
  /// @param [in] pcLinkedId The username string.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcCliAccountQueryOkNotification or @ref MtcCliAccountQueryDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeQueryStatusX(
    int zCookie,
    ffi.Pointer<ffi.Char> pcIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
  ) {
    return _Mtc_UeQueryStatusX(
      zCookie,
      pcIdType,
      pcLinkedId,
    );
  }

  late final _Mtc_UeQueryStatusXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Size, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeQueryStatusX');
  late final _Mtc_UeQueryStatusX = _Mtc_UeQueryStatusXPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief MTC fetch the encrypted password.
  ///
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] iIdType @ref EN_MTC_USER_ID_TYPE.
  /// @param [in] pcLinkedId The username string.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeQueryAccountOkNotification or @ref MtcUeQueryAccountDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeQueryAccount(
    int zCookie,
    int iIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
  ) {
    return _Mtc_UeQueryAccount(
      zCookie,
      iIdType,
      pcLinkedId,
    );
  }

  late final _Mtc_UeQueryAccountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Size, ffi.Int, ffi.Pointer<ffi.Char>)>>('Mtc_UeQueryAccount');
  late final _Mtc_UeQueryAccount = _Mtc_UeQueryAccountPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Char>)>();

  /// @brief MTC fetch the encrypted password.
  ///
  /// @param [in] zCookie The cookie which you want to set.
  /// @param [in] pcIdType The Id Type.
  /// @param [in] pcLinkedId The username string.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeQueryAccountOkNotification or @ref MtcUeQueryAccountDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeQueryAccountX(
    int zCookie,
    ffi.Pointer<ffi.Char> pcIdType,
    ffi.Pointer<ffi.Char> pcLinkedId,
  ) {
    return _Mtc_UeQueryAccountX(
      zCookie,
      pcIdType,
      pcLinkedId,
    );
  }

  late final _Mtc_UeQueryAccountXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Size, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeQueryAccountX');
  late final _Mtc_UeQueryAccountX = _Mtc_UeQueryAccountXPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief MTC get all relations.
  ///
  /// @param  zCookie The UI cookie value.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeGetAllRelationsOkNotifcation or
  /// @ref MtcUeGetAllRelationsDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeGetAllRelations(
    int zCookie,
  ) {
    return _Mtc_UeGetAllRelations(
      zCookie,
    );
  }

  late final _Mtc_UeGetAllRelationsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Size)>>(
          'Mtc_UeGetAllRelations');
  late final _Mtc_UeGetAllRelations =
      _Mtc_UeGetAllRelationsPtr.asFunction<int Function(int)>();

  /// @brief MTC delete user account that already login.
  ///
  /// @param  zCookie The cookie which you want to set.
  /// @param  iDelaySec delay time, only support 0 now.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeDeleteUserOkNotifcation or
  /// @ref MtcUeDeleteUserDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeDeleteUser(
    int zCookie,
    int iDelaySec,
  ) {
    return _Mtc_UeDeleteUser(
      zCookie,
      iDelaySec,
    );
  }

  late final _Mtc_UeDeleteUserPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Size, ffi.Int)>>(
          'Mtc_UeDeleteUser');
  late final _Mtc_UeDeleteUser =
      _Mtc_UeDeleteUserPtr.asFunction<int Function(int, int)>();

  /// @brief Check if URI is valid relation.
  ///
  /// @param [in] pcUri The URI string.
  ///
  /// @retval true The URI is valid relation.
  /// @retval false The URI is not valid realtion.
  bool Mtc_UeIsValidRelation(
    ffi.Pointer<ffi.Char> pcUri,
  ) {
    return _Mtc_UeIsValidRelation(
      pcUri,
    );
  }

  late final _Mtc_UeIsValidRelationPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeIsValidRelation');
  late final _Mtc_UeIsValidRelation = _Mtc_UeIsValidRelationPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC get ID of current login URI.
  ///
  /// @return The string of ID. ZNULL when failed.
  ffi.Pointer<ffi.Char> Mtc_UeGetId() {
    return _Mtc_UeGetId();
  }

  late final _Mtc_UeGetIdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeGetId');
  late final _Mtc_UeGetId =
      _Mtc_UeGetIdPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC get current login URI.
  ///
  /// @return The string of URI. ZNULL when failed.
  ffi.Pointer<ffi.Char> Mtc_UeGetUri() {
    return _Mtc_UeGetUri();
  }

  late final _Mtc_UeGetUriPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeGetUri');
  late final _Mtc_UeGetUri =
      _Mtc_UeGetUriPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC get private unique ID of current login user.
  ///
  /// @return The string of ID. ZNULL when failed.
  ffi.Pointer<ffi.Char> Mtc_UeGetUid() {
    return _Mtc_UeGetUid();
  }

  late final _Mtc_UeGetUidPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeGetUid');
  late final _Mtc_UeGetUid =
      _Mtc_UeGetUidPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC refresh authorization.
  ///
  /// @retval 0 on invoke this interface successfully. The result will be notified by
  /// @ref MtcUeAuthorizationRefreshOkNotification or
  /// @ref MtcUeAuthorizationRefreshDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeRefreshAuth() {
    return _Mtc_UeRefreshAuth();
  }

  late final _Mtc_UeRefreshAuthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('Mtc_UeRefreshAuth');
  late final _Mtc_UeRefreshAuth =
      _Mtc_UeRefreshAuthPtr.asFunction<int Function()>();

  /// @brief Notify the AuthCode to SDK to continue login or refresh authorization process.
  ///
  /// @param  pcAuthCode The AuthCode string.
  ///
  /// @retval 0 on invoke this interface successfully. The result will be notified by
  /// the notification of login or refresh authorization process.
  /// Reference @ref Mtc_CliLogin or @ref Mtc_UeRefreshAuth.
  /// @retval 1 failed
  int Mtc_UePromptAuthCode(
    ffi.Pointer<ffi.Char> pcAuthCode,
  ) {
    return _Mtc_UePromptAuthCode(
      pcAuthCode,
    );
  }

  late final _Mtc_UePromptAuthCodePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UePromptAuthCode');
  late final _Mtc_UePromptAuthCode = _Mtc_UePromptAuthCodePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Set user property
  ///
  /// The property which name start with @ref MTC_UE_PROPERTY_PUBLIC_PREFIX can be
  /// retained by others with @ref Mtc_BuddyQueryProperty.
  /// The property which name start with @ref MTC_UE_PROPERTY_STATUS_PREFIX can be
  /// retained by others with @ref Mtc_BuddyQueryUsersStatus.
  /// Otherwise the property can not be accessed by others.
  ///
  /// @param  zCookie The cookie.
  /// @param  pcName  The property name.
  /// @param  pcValue The property value.
  ///
  /// @retval 0 on invoke this interface successfully. The result will be notified by
  /// @ref MtcUeSetPropertyOkNotification or
  /// @ref MtcUeSetPropertyDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeSetProperty(
    int zCookie,
    ffi.Pointer<ffi.Char> pcName,
    ffi.Pointer<ffi.Char> pcValue,
  ) {
    return _Mtc_UeSetProperty(
      zCookie,
      pcName,
      pcValue,
    );
  }

  late final _Mtc_UeSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Size, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeSetProperty');
  late final _Mtc_UeSetProperty = _Mtc_UeSetPropertyPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief Get user property
  ///
  /// @param  zCookie The cookie.
  /// @param  pcName  The property name.
  ///
  /// @retval 0 on invoke this interface successfully. The result will be notified by
  /// @ref MtcUeGetPropertyOkNotification or
  /// @ref MtcUeGetPropertyDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeGetProperty(
    int zCookie,
    ffi.Pointer<ffi.Char> pcName,
  ) {
    return _Mtc_UeGetProperty(
      zCookie,
      pcName,
    );
  }

  late final _Mtc_UeGetPropertyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Size, ffi.Pointer<ffi.Char>)>>(
      'Mtc_UeGetProperty');
  late final _Mtc_UeGetProperty = _Mtc_UeGetPropertyPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>)>();

  /// @brief Set user properties
  ///
  /// The property which name start with @ref MTC_UE_PROPERTY_PUBLIC_PREFIX can be
  /// retained by others with @ref Mtc_BuddyQueryProperty.
  /// The property which name start with @ref MTC_UE_PROPERTY_STATUS_PREFIX can be
  /// retained by others with @ref Mtc_BuddyQueryUsersStatus.
  /// Otherwise the property can not be accessed by others.
  ///
  /// @param  zCookie      The cookie.
  /// @param  pcPropArray  The property name and value in a JSON array.
  /// Each element in array is a JSON object contains
  /// @ref MtcUePropertyNameKey and @ref MtcUePropertyValueKey.
  ///
  /// @retval 0 on invoke this interface successfully. The result will be notified by
  /// @ref MtcUeSetPropertiesOkNotification or
  /// @ref MtcUeSetPropertiesDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeSetProperties(
    int zCookie,
    ffi.Pointer<ffi.Char> pcPropArray,
  ) {
    return _Mtc_UeSetProperties(
      zCookie,
      pcPropArray,
    );
  }

  late final _Mtc_UeSetPropertiesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Size, ffi.Pointer<ffi.Char>)>>(
      'Mtc_UeSetProperties');
  late final _Mtc_UeSetProperties = _Mtc_UeSetPropertiesPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>)>();

  /// @brief Get user properties
  ///
  /// @param  zCookie     The cookie.
  /// @param  pcNameArray The property names in a JSON array.
  /// Each element in array is a string of property's name.
  ///
  /// @retval 0 on invoke this interface successfully. The result will be notified by
  /// @ref MtcUeGetPropertiesOkNotification or
  /// @ref MtcUeGetPropertiesDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeGetProperties(
    int zCookie,
    ffi.Pointer<ffi.Char> pcNameArray,
  ) {
    return _Mtc_UeGetProperties(
      zCookie,
      pcNameArray,
    );
  }

  late final _Mtc_UeGetPropertiesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Size, ffi.Pointer<ffi.Char>)>>(
      'Mtc_UeGetProperties');
  late final _Mtc_UeGetProperties = _Mtc_UeGetPropertiesPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>)>();

  /// @brief Set user status
  ///
  /// @param  zCookie The cookie.
  /// @param  pcType  The status type.
  /// @param  pcValue The status value.
  ///
  /// @retval 0 on invoke this interface successfully. The result will be notified by
  /// @ref MtcUeSetStatusOkNotification or
  /// @ref MtcUeSetStatusDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeSetStatus(
    int zCookie,
    ffi.Pointer<ffi.Char> pcType,
    ffi.Pointer<ffi.Char> pcValue,
  ) {
    return _Mtc_UeSetStatus(
      zCookie,
      pcType,
      pcValue,
    );
  }

  late final _Mtc_UeSetStatusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Size, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_UeSetStatus');
  late final _Mtc_UeSetStatus = _Mtc_UeSetStatusPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief Reset user name
  ///
  /// @param  zCookie The cookie.
  /// @param  pcNewUserName  The new user name to set.
  ///
  /// @retval 0 on invoke this interface successfully. The result will be notified by
  /// @ref MtcUeResetUsernameOkNotification or
  /// @ref MtcUeResetUsernameDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeResetUserName(
    int zCookie,
    ffi.Pointer<ffi.Char> pcNewUserName,
  ) {
    return _Mtc_UeResetUserName(
      zCookie,
      pcNewUserName,
    );
  }

  late final _Mtc_UeResetUserNamePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Size, ffi.Pointer<ffi.Char>)>>(
      'Mtc_UeResetUserName');
  late final _Mtc_UeResetUserName = _Mtc_UeResetUserNamePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>)>();

  /// @brief Set multi-status of user
  ///
  /// @param  zCookie The cookie.
  /// @param  pcInfo  The status infos in a JSON array.
  /// Each element in array is an object which contains
  /// @ref MtcUeStatusNameKey, @ref MtcUeStatusValueKey.
  /// @param qwTimeStamp The timestamp that status apply.
  ///
  /// @retval 0 on invoke this interface successfully. The result will be notified by
  /// @ref MtcUeSetStatusOkNotification or
  /// @ref MtcUeSetStatusDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeSetStatusX(
    int zCookie,
    ffi.Pointer<ffi.Char> pcInfo,
    int qwTimeStamp,
  ) {
    return _Mtc_UeSetStatusX(
      zCookie,
      pcInfo,
      qwTimeStamp,
    );
  }

  late final _Mtc_UeSetStatusXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Size, ffi.Pointer<ffi.Char>,
              ffi.LongLong)>>('Mtc_UeSetStatusX');
  late final _Mtc_UeSetStatusX = _Mtc_UeSetStatusXPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int)>();

  /// @brief Send online message to peer, only for p2p.
  ///
  /// When the message has been sent successfully, @ref MtcUeSendOnlineMessageOkNotification will
  /// be reported.
  /// When the mssage sent fail, @ref MtcUeSendOnlineMessageDidFailNotification will be reported.
  ///
  /// The peer user will be notified by @ref MtcUeOnlineMessageDidReceiveNotification.
  ///
  /// @param  zCookie   The user defined cookie.
  /// @param  pcToId    The target user's URI.
  /// @param  pcText    The content text of the message.
  /// @param  iTiming   The Timing time value(second).
  ///
  /// @retval 0       The request has been sent successfully.
  /// @retval 1   Failed to send the request.
  int Mtc_UeSendOnlineMessage(
    int zCookie,
    ffi.Pointer<ffi.Char> pcToId,
    ffi.Pointer<ffi.Char> pcText,
    int iTiming,
  ) {
    return _Mtc_UeSendOnlineMessage(
      zCookie,
      pcToId,
      pcText,
      iTiming,
    );
  }

  late final _Mtc_UeSendOnlineMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Size, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('Mtc_UeSendOnlineMessage');
  late final _Mtc_UeSendOnlineMessage = _Mtc_UeSendOnlineMessagePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  /// @brief Send online message to peer by record msg on server, only for p2p.
  ///
  /// When the message has been sent successfully, @ref MtcUeSendOnlineMessageOkNotification will
  /// be reported.
  /// When the mssage sent fail, @ref MtcUeSendOnlineMessageDidFailNotification will be reported.
  ///
  /// The peer user will be notified by @ref MtcUeOnlineMessageDidReceiveNotification.
  ///
  /// @param  zCookie   The user defined cookie.
  /// @param  pcToId    The target user's URI.
  /// @param  pcText    The content text of the message.
  /// @param  iTiming   The Timing time value(second).
  ///
  /// @retval 0       The request has been sent successfully.
  /// @retval 1   Failed to send the request.
  int Mtc_UeSendOnlineMessage2(
    int zCookie,
    ffi.Pointer<ffi.Char> pcToId,
    ffi.Pointer<ffi.Char> pcText,
    int iTiming,
  ) {
    return _Mtc_UeSendOnlineMessage2(
      zCookie,
      pcToId,
      pcText,
      iTiming,
    );
  }

  late final _Mtc_UeSendOnlineMessage2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Size, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('Mtc_UeSendOnlineMessage2');
  late final _Mtc_UeSendOnlineMessage2 =
      _Mtc_UeSendOnlineMessage2Ptr.asFunction<
          int Function(
              int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  /// @brief Query user's UserId information.
  ///
  /// @param  zCookie The cookie value.
  /// @param  pcInfo  The query information. For just one user, using its URI directily.
  /// For multiple users, it must be a string in JSON format,
  /// which contains an array of string. Each string is the user's URI
  /// which wants be queried.
  ///
  /// @retval 0 on invoke this interface successfully. The result will notify
  /// to user with @ref MtcUeQueryUserIdOkNotification
  /// or @ref MtcUeQueryUserIdDidFailNotification.
  /// @retval 1 failed
  int Mtc_UeQueryUserId(
    int zCookie,
    ffi.Pointer<ffi.Char> pcInfo,
  ) {
    return _Mtc_UeQueryUserId(
      zCookie,
      pcInfo,
    );
  }

  late final _Mtc_UeQueryUserIdPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Size, ffi.Pointer<ffi.Char>)>>(
      'Mtc_UeQueryUserId');
  late final _Mtc_UeQueryUserId = _Mtc_UeQueryUserIdPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>)>();

  /// @brief MTC get CC.
  ///
  /// @retval ZNULL if no parameter which do not exist, or country code string
  ffi.Pointer<ffi.Char> Mtc_UeGetCC() {
    return _Mtc_UeGetCC();
  }

  late final _Mtc_UeGetCCPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeGetCC');
  late final _Mtc_UeGetCC =
      _Mtc_UeGetCCPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set id type.
  ///
  /// @param [in] iIdType @ref EN_MTC_USER_ID_TYPE.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetIdType(
    int iIdType,
  ) {
    return _Mtc_UeDbSetIdType(
      iIdType,
    );
  }

  late final _Mtc_UeDbSetIdTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'Mtc_UeDbSetIdType');
  late final _Mtc_UeDbSetIdType =
      _Mtc_UeDbSetIdTypePtr.asFunction<int Function(int)>();

  /// @brief MTC user entry set id type.
  ///
  /// @param [in] pcIdType The Id Type.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetIdTypeX(
    ffi.Pointer<ffi.Char> pcIdType,
  ) {
    return _Mtc_UeDbSetIdTypeX(
      pcIdType,
    );
  }

  late final _Mtc_UeDbSetIdTypeXPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetIdTypeX');
  late final _Mtc_UeDbSetIdTypeX =
      _Mtc_UeDbSetIdTypeXPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get id type.
  ///
  /// @return Type of ID @ref EN_MTC_USER_ID_TYPE.
  int Mtc_UeDbGetIdType() {
    return _Mtc_UeDbGetIdType();
  }

  late final _Mtc_UeDbGetIdTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('Mtc_UeDbGetIdType');
  late final _Mtc_UeDbGetIdType =
      _Mtc_UeDbGetIdTypePtr.asFunction<int Function()>();

  /// @brief MTC user entry get id type.
  ///
  /// @return ZNULL if no parameter which do not exist, or @ref MtcUserIdString.
  ffi.Pointer<ffi.Char> Mtc_UeDbGetIdTypeX() {
    return _Mtc_UeDbGetIdTypeX();
  }

  late final _Mtc_UeDbGetIdTypeXPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetIdTypeX');
  late final _Mtc_UeDbGetIdTypeX =
      _Mtc_UeDbGetIdTypeXPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user get ID.
  ///
  /// @return The ID string if exist.
  ffi.Pointer<ffi.Char> Mtc_UeDbGetId() {
    return _Mtc_UeDbGetId();
  }

  late final _Mtc_UeDbGetIdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetId');
  late final _Mtc_UeDbGetId =
      _Mtc_UeDbGetIdPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set user name.
  ///
  /// @param [in] pcName The user name string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetUserName(
    ffi.Pointer<ffi.Char> pcName,
  ) {
    return _Mtc_UeDbSetUserName(
      pcName,
    );
  }

  late final _Mtc_UeDbSetUserNamePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetUserName');
  late final _Mtc_UeDbSetUserName =
      _Mtc_UeDbSetUserNamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get user name.
  ///
  /// @retval ZNULL if no parameter which do not exist, or user name string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetUserName() {
    return _Mtc_UeDbGetUserName();
  }

  late final _Mtc_UeDbGetUserNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetUserName');
  late final _Mtc_UeDbGetUserName =
      _Mtc_UeDbGetUserNamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set phone number .
  ///
  /// @param [in] pcPhone The phone number string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetPhone(
    ffi.Pointer<ffi.Char> pcPhone,
  ) {
    return _Mtc_UeDbSetPhone(
      pcPhone,
    );
  }

  late final _Mtc_UeDbSetPhonePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetPhone');
  late final _Mtc_UeDbSetPhone =
      _Mtc_UeDbSetPhonePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get phone number.
  ///
  /// @retval ZNULL if no parameter which do not exist, or phone num string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetPhone() {
    return _Mtc_UeDbGetPhone();
  }

  late final _Mtc_UeDbGetPhonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetPhone');
  late final _Mtc_UeDbGetPhone =
      _Mtc_UeDbGetPhonePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set email.
  ///
  /// @param [in] pcEmail The email address string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetEmail(
    ffi.Pointer<ffi.Char> pcEmail,
  ) {
    return _Mtc_UeDbSetEmail(
      pcEmail,
    );
  }

  late final _Mtc_UeDbSetEmailPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetEmail');
  late final _Mtc_UeDbSetEmail =
      _Mtc_UeDbSetEmailPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get email.
  ///
  /// @retval ZNULL if no parameter which do not exist, or email string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetEmail() {
    return _Mtc_UeDbGetEmail();
  }

  late final _Mtc_UeDbGetEmailPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetEmail');
  late final _Mtc_UeDbGetEmail =
      _Mtc_UeDbGetEmailPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set facebook.
  ///
  /// @param [in] pcFacebook The facebook account string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetFacebook(
    ffi.Pointer<ffi.Char> pcFacebook,
  ) {
    return _Mtc_UeDbSetFacebook(
      pcFacebook,
    );
  }

  late final _Mtc_UeDbSetFacebookPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetFacebook');
  late final _Mtc_UeDbSetFacebook =
      _Mtc_UeDbSetFacebookPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get facebook.
  ///
  /// @retval ZNULL if no parameter which do not exist, or facebook account string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetFacebook() {
    return _Mtc_UeDbGetFacebook();
  }

  late final _Mtc_UeDbGetFacebookPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetFacebook');
  late final _Mtc_UeDbGetFacebook =
      _Mtc_UeDbGetFacebookPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set twitter.
  ///
  /// @param [in] pcTwitter The twitter account string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetTwitter(
    ffi.Pointer<ffi.Char> pcTwitter,
  ) {
    return _Mtc_UeDbSetTwitter(
      pcTwitter,
    );
  }

  late final _Mtc_UeDbSetTwitterPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetTwitter');
  late final _Mtc_UeDbSetTwitter =
      _Mtc_UeDbSetTwitterPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get twitter.
  ///
  /// @retval NULL if no parameter which do not exist, or twitter account string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetTwitter() {
    return _Mtc_UeDbGetTwitter();
  }

  late final _Mtc_UeDbGetTwitterPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetTwitter');
  late final _Mtc_UeDbGetTwitter =
      _Mtc_UeDbGetTwitterPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set snapchat.
  ///
  /// @param [in] pcSnapchat The snapchat account string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetSnapchat(
    ffi.Pointer<ffi.Char> pcSnapchat,
  ) {
    return _Mtc_UeDbSetSnapchat(
      pcSnapchat,
    );
  }

  late final _Mtc_UeDbSetSnapchatPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetSnapchat');
  late final _Mtc_UeDbSetSnapchat =
      _Mtc_UeDbSetSnapchatPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get snapchat.
  ///
  /// @retval NULL if no parameter which do not exist, or snapchat account string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetSnapchat() {
    return _Mtc_UeDbGetSnapchat();
  }

  late final _Mtc_UeDbGetSnapchatPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetSnapchat');
  late final _Mtc_UeDbGetSnapchat =
      _Mtc_UeDbGetSnapchatPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set instagram.
  ///
  /// @param [in] pcInstagram The instagram account string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetInstagram(
    ffi.Pointer<ffi.Char> pcInstagram,
  ) {
    return _Mtc_UeDbSetInstagram(
      pcInstagram,
    );
  }

  late final _Mtc_UeDbSetInstagramPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetInstagram');
  late final _Mtc_UeDbSetInstagram = _Mtc_UeDbSetInstagramPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get instagram.
  ///
  /// @retval NULL if no parameter which do not exist, or instagram account string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetInstagram() {
    return _Mtc_UeDbGetInstagram();
  }

  late final _Mtc_UeDbGetInstagramPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetInstagram');
  late final _Mtc_UeDbGetInstagram =
      _Mtc_UeDbGetInstagramPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set weibo.
  ///
  /// @param [in] pcWeibo The weibo account string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetWeibo(
    ffi.Pointer<ffi.Char> pcWeibo,
  ) {
    return _Mtc_UeDbSetWeibo(
      pcWeibo,
    );
  }

  late final _Mtc_UeDbSetWeiboPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetWeibo');
  late final _Mtc_UeDbSetWeibo =
      _Mtc_UeDbSetWeiboPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get weibo.
  ///
  /// @retval NULL if no parameter which do not exist, or weibo account string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetWeibo() {
    return _Mtc_UeDbGetWeibo();
  }

  late final _Mtc_UeDbGetWeiboPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetWeibo');
  late final _Mtc_UeDbGetWeibo =
      _Mtc_UeDbGetWeiboPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set wechat.
  ///
  /// @param [in] pcWechat The wechat account string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetWechat(
    ffi.Pointer<ffi.Char> pcWechat,
  ) {
    return _Mtc_UeDbSetWechat(
      pcWechat,
    );
  }

  late final _Mtc_UeDbSetWechatPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetWechat');
  late final _Mtc_UeDbSetWechat =
      _Mtc_UeDbSetWechatPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get wechat.
  ///
  /// @retval NULL if no parameter which do not exist, or wechat account string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetWechat() {
    return _Mtc_UeDbGetWechat();
  }

  late final _Mtc_UeDbGetWechatPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetWechat');
  late final _Mtc_UeDbGetWechat =
      _Mtc_UeDbGetWechatPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set qq.
  ///
  /// @param [in] pcQq The qq account string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetQq(
    ffi.Pointer<ffi.Char> pcQq,
  ) {
    return _Mtc_UeDbSetQq(
      pcQq,
    );
  }

  late final _Mtc_UeDbSetQqPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetQq');
  late final _Mtc_UeDbSetQq =
      _Mtc_UeDbSetQqPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get qq.
  ///
  /// @retval NULL if no parameter which do not exist, or qq account string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetQq() {
    return _Mtc_UeDbGetQq();
  }

  late final _Mtc_UeDbGetQqPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetQq');
  late final _Mtc_UeDbGetQq =
      _Mtc_UeDbGetQqPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set app.
  ///
  /// @param [in] pcApp The app account string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetApp(
    ffi.Pointer<ffi.Char> pcApp,
  ) {
    return _Mtc_UeDbSetApp(
      pcApp,
    );
  }

  late final _Mtc_UeDbSetAppPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetApp');
  late final _Mtc_UeDbSetApp =
      _Mtc_UeDbSetAppPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get app.
  ///
  /// @retval NULL if no parameter which do not exist, or app account string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetApp() {
    return _Mtc_UeDbGetApp();
  }

  late final _Mtc_UeDbGetAppPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetApp');
  late final _Mtc_UeDbGetApp =
      _Mtc_UeDbGetAppPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set google.
  ///
  /// @param [in] pcGoogle The google account string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetGoogle(
    ffi.Pointer<ffi.Char> pcGoogle,
  ) {
    return _Mtc_UeDbSetGoogle(
      pcGoogle,
    );
  }

  late final _Mtc_UeDbSetGooglePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetGoogle');
  late final _Mtc_UeDbSetGoogle =
      _Mtc_UeDbSetGooglePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get google.
  ///
  /// @retval ZNULL if no parameter which do not exist, or google account string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetGoogle() {
    return _Mtc_UeDbGetGoogle();
  }

  late final _Mtc_UeDbGetGooglePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetGoogle');
  late final _Mtc_UeDbGetGoogle =
      _Mtc_UeDbGetGooglePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set huawei.
  ///
  /// @param [in] pcHuawei The huawei account string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetHuawei(
    ffi.Pointer<ffi.Char> pcHuawei,
  ) {
    return _Mtc_UeDbSetHuawei(
      pcHuawei,
    );
  }

  late final _Mtc_UeDbSetHuaweiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetHuawei');
  late final _Mtc_UeDbSetHuawei =
      _Mtc_UeDbSetHuaweiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get huawei.
  ///
  /// @retval ZNULL if no parameter which do not exist, or huawei account string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetHuawei() {
    return _Mtc_UeDbGetHuawei();
  }

  late final _Mtc_UeDbGetHuaweiPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetHuawei');
  late final _Mtc_UeDbGetHuawei =
      _Mtc_UeDbGetHuaweiPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set alipay.
  ///
  /// @param [in] pcAlipay The alipay account string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetAlipay(
    ffi.Pointer<ffi.Char> pcAlipay,
  ) {
    return _Mtc_UeDbSetAlipay(
      pcAlipay,
    );
  }

  late final _Mtc_UeDbSetAlipayPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetAlipay');
  late final _Mtc_UeDbSetAlipay =
      _Mtc_UeDbSetAlipayPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get alipay.
  ///
  /// @retval NULL if no parameter which do not exist, or alipay account string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetAlipay() {
    return _Mtc_UeDbGetAlipay();
  }

  late final _Mtc_UeDbGetAlipayPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetAlipay');
  late final _Mtc_UeDbGetAlipay =
      _Mtc_UeDbGetAlipayPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set encrypted phone.
  ///
  /// @param [in] pcEphone The encrypted phone string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetEphone(
    ffi.Pointer<ffi.Char> pcEphone,
  ) {
    return _Mtc_UeDbSetEphone(
      pcEphone,
    );
  }

  late final _Mtc_UeDbSetEphonePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetEphone');
  late final _Mtc_UeDbSetEphone =
      _Mtc_UeDbSetEphonePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get encrypted phone.
  ///
  /// @retval NULL if no parameter which do not exist, or encrypted phone string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetEphone() {
    return _Mtc_UeDbGetEphone();
  }

  late final _Mtc_UeDbGetEphonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetEphone');
  late final _Mtc_UeDbGetEphone =
      _Mtc_UeDbGetEphonePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set user define id.
  ///
  /// @param [in] pcUdid The user defined id account string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetUdid(
    ffi.Pointer<ffi.Char> pcUdid,
  ) {
    return _Mtc_UeDbSetUdid(
      pcUdid,
    );
  }

  late final _Mtc_UeDbSetUdidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetUdid');
  late final _Mtc_UeDbSetUdid =
      _Mtc_UeDbSetUdidPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get user defined.
  ///
  /// @param [in] pcUdid The user defined id type string, pcUdid can be ZNULL corresponds to
  /// the parameter of Mtc_UeDbSetUdid.
  ///
  /// @retval NULL if no parameter which do not exist, or user defined account string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetUdid(
    ffi.Pointer<ffi.Char> pcUdid,
  ) {
    return _Mtc_UeDbGetUdid(
      pcUdid,
    );
  }

  late final _Mtc_UeDbGetUdidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('Mtc_UeDbGetUdid');
  late final _Mtc_UeDbGetUdid = _Mtc_UeDbGetUdidPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry set multiple user define ids.
  ///
  /// @param [in] pcUdids is a string in json format reflecting
  /// the user defined id list,Each list element is an object contains
  /// the key of user defined id, the value of user defined id.
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetUdids(
    ffi.Pointer<ffi.Char> pcUdids,
  ) {
    return _Mtc_UeDbSetUdids(
      pcUdids,
    );
  }

  late final _Mtc_UeDbSetUdidsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetUdids');
  late final _Mtc_UeDbSetUdids =
      _Mtc_UeDbSetUdidsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC set Uid.
  ///
  /// @param [in] pcUid The Uid string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetUid(
    ffi.Pointer<ffi.Char> pcUid,
  ) {
    return _Mtc_UeDbSetUid(
      pcUid,
    );
  }

  late final _Mtc_UeDbSetUidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetUid');
  late final _Mtc_UeDbSetUid =
      _Mtc_UeDbSetUidPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC get Uid.
  ///
  /// @retval NULL if no parameter which do not exist, or Uid string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetUid() {
    return _Mtc_UeDbGetUid();
  }

  late final _Mtc_UeDbGetUidPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetUid');
  late final _Mtc_UeDbGetUid =
      _Mtc_UeDbGetUidPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC set realm.
  ///
  /// @param [in] pcRealm The realm string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetRealm(
    ffi.Pointer<ffi.Char> pcRealm,
  ) {
    return _Mtc_UeDbSetRealm(
      pcRealm,
    );
  }

  late final _Mtc_UeDbSetRealmPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetRealm');
  late final _Mtc_UeDbSetRealm =
      _Mtc_UeDbSetRealmPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC get realm.
  ///
  /// @retval NULL if no parameter which do not exist, or realm string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetRealm() {
    return _Mtc_UeDbGetRealm();
  }

  late final _Mtc_UeDbGetRealmPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetRealm');
  late final _Mtc_UeDbGetRealm =
      _Mtc_UeDbGetRealmPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC set public host.
  ///
  /// @param [in] pcPublicHost The public host.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetPublicHost(
    ffi.Pointer<ffi.Char> pcPublicHost,
  ) {
    return _Mtc_UeDbSetPublicHost(
      pcPublicHost,
    );
  }

  late final _Mtc_UeDbSetPublicHostPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetPublicHost');
  late final _Mtc_UeDbSetPublicHost = _Mtc_UeDbSetPublicHostPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC get public host.
  ///
  /// @retval NULL if no parameter which do not exist, or public host string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetPublicHost() {
    return _Mtc_UeDbGetPublicHost();
  }

  late final _Mtc_UeDbGetPublicHostPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetPublicHost');
  late final _Mtc_UeDbGetPublicHost =
      _Mtc_UeDbGetPublicHostPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC set CC.
  ///
  /// @param [in] pcCc The country code.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetCC(
    ffi.Pointer<ffi.Char> pcCc,
  ) {
    return _Mtc_UeDbSetCC(
      pcCc,
    );
  }

  late final _Mtc_UeDbSetCCPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetCC');
  late final _Mtc_UeDbSetCC =
      _Mtc_UeDbSetCCPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC get CC.
  ///
  /// @retval NULL if no parameter which do not exist, or country code string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetCC() {
    return _Mtc_UeDbGetCC();
  }

  late final _Mtc_UeDbGetCCPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetCC');
  late final _Mtc_UeDbGetCC =
      _Mtc_UeDbGetCCPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set password.
  ///
  /// @param [in] pcPassword The password string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetPassword(
    ffi.Pointer<ffi.Char> pcPassword,
  ) {
    return _Mtc_UeDbSetPassword(
      pcPassword,
    );
  }

  late final _Mtc_UeDbSetPasswordPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetPassword');
  late final _Mtc_UeDbSetPassword =
      _Mtc_UeDbSetPasswordPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get password.
  ///
  /// @retval NULL if no parameter which do not exist, or password string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetPassword() {
    return _Mtc_UeDbGetPassword();
  }

  late final _Mtc_UeDbGetPasswordPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetPassword');
  late final _Mtc_UeDbGetPassword =
      _Mtc_UeDbGetPasswordPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set appkey.
  ///
  /// @param [in] pcAppKey The appkey string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetAppKey(
    ffi.Pointer<ffi.Char> pcAppKey,
  ) {
    return _Mtc_UeDbSetAppKey(
      pcAppKey,
    );
  }

  late final _Mtc_UeDbSetAppKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetAppKey');
  late final _Mtc_UeDbSetAppKey =
      _Mtc_UeDbSetAppKeyPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get appkey.
  ///
  /// @retval NULL if no parameter which do not exist, or appkey string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetAppKey() {
    return _Mtc_UeDbGetAppKey();
  }

  late final _Mtc_UeDbGetAppKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetAppKey');
  late final _Mtc_UeDbGetAppKey =
      _Mtc_UeDbGetAppKeyPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set network.
  ///
  /// @param [in] pcNetwork The network string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetNetwork(
    ffi.Pointer<ffi.Char> pcNetwork,
  ) {
    return _Mtc_UeDbSetNetwork(
      pcNetwork,
    );
  }

  late final _Mtc_UeDbSetNetworkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetNetwork');
  late final _Mtc_UeDbSetNetwork =
      _Mtc_UeDbSetNetworkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get network.
  ///
  /// @retval NULL if no parameter which do not exist, or network string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetNetwork() {
    return _Mtc_UeDbGetNetwork();
  }

  late final _Mtc_UeDbGetNetworkPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetNetwork');
  late final _Mtc_UeDbGetNetwork =
      _Mtc_UeDbGetNetworkPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set accesskey id.
  ///
  /// @param [in] pcAccessKeyId The accesskey id string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetAccessKeyId(
    ffi.Pointer<ffi.Char> pcAccessKeyId,
  ) {
    return _Mtc_UeDbSetAccessKeyId(
      pcAccessKeyId,
    );
  }

  late final _Mtc_UeDbSetAccessKeyIdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetAccessKeyId');
  late final _Mtc_UeDbSetAccessKeyId = _Mtc_UeDbSetAccessKeyIdPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get accesskey id.
  ///
  /// @retval NULL if no parameter which do not exist, or accesskey id string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetAccessKeyId() {
    return _Mtc_UeDbGetAccessKeyId();
  }

  late final _Mtc_UeDbGetAccessKeyIdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetAccessKeyId');
  late final _Mtc_UeDbGetAccessKeyId =
      _Mtc_UeDbGetAccessKeyIdPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set accesskey secret.
  ///
  /// @param [in] pcAccessKeySecret The accesskey secret string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetAccessKeySecret(
    ffi.Pointer<ffi.Char> pcAccessKeySecret,
  ) {
    return _Mtc_UeDbSetAccessKeySecret(
      pcAccessKeySecret,
    );
  }

  late final _Mtc_UeDbSetAccessKeySecretPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetAccessKeySecret');
  late final _Mtc_UeDbSetAccessKeySecret = _Mtc_UeDbSetAccessKeySecretPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get accesskey secret.
  ///
  /// @retval NULL if no parameter which do not exist, or accesskey secret string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetAccessKeySecret() {
    return _Mtc_UeDbGetAccessKeySecret();
  }

  late final _Mtc_UeDbGetAccessKeySecretPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetAccessKeySecret');
  late final _Mtc_UeDbGetAccessKeySecret = _Mtc_UeDbGetAccessKeySecretPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set entry.
  ///
  /// @param [in] pcEntry The entry string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetEntry(
    ffi.Pointer<ffi.Char> pcEntry,
  ) {
    return _Mtc_UeDbSetEntry(
      pcEntry,
    );
  }

  late final _Mtc_UeDbSetEntryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetEntry');
  late final _Mtc_UeDbSetEntry =
      _Mtc_UeDbSetEntryPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get entry.
  ///
  /// @retval NULL if no parameter which do not exist, or entry string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetEntry() {
    return _Mtc_UeDbGetEntry();
  }

  late final _Mtc_UeDbGetEntryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetEntry');
  late final _Mtc_UeDbGetEntry =
      _Mtc_UeDbGetEntryPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC user entry set config.
  ///
  /// @param [in] pcConfig The config string.
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetConfig(
    ffi.Pointer<ffi.Char> pcConfig,
  ) {
    return _Mtc_UeDbSetConfig(
      pcConfig,
    );
  }

  late final _Mtc_UeDbSetConfigPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetConfig');
  late final _Mtc_UeDbSetConfig =
      _Mtc_UeDbSetConfigPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC user entry get config.
  ///
  /// @retval NULL if no parameter which do not exist, or config string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetConfig() {
    return _Mtc_UeDbGetConfig();
  }

  late final _Mtc_UeDbGetConfigPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetConfig');
  late final _Mtc_UeDbGetConfig =
      _Mtc_UeDbGetConfigPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC set message language.
  ///
  /// @param [in] pcLang The message language string.
  /// example: "en" or "zh"
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetAuthLanguage(
    ffi.Pointer<ffi.Char> pcLang,
  ) {
    return _Mtc_UeDbSetAuthLanguage(
      pcLang,
    );
  }

  late final _Mtc_UeDbSetAuthLanguagePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetAuthLanguage');
  late final _Mtc_UeDbSetAuthLanguage = _Mtc_UeDbSetAuthLanguagePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC get message language.
  ///
  /// @retval NULL if no parameter which do not exist, or message language string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetAuthLanguage() {
    return _Mtc_UeDbGetAuthLanguage();
  }

  late final _Mtc_UeDbGetAuthLanguagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetAuthLanguage');
  late final _Mtc_UeDbGetAuthLanguage = _Mtc_UeDbGetAuthLanguagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC set message country code.
  ///
  /// @param [in] pcCountryCode The message country code string.
  /// example: "86" or "355"
  ///
  /// @retval 0 ok
  /// @retval 1 failed
  int Mtc_UeDbSetAuthCountryCode(
    ffi.Pointer<ffi.Char> pcCountryCode,
  ) {
    return _Mtc_UeDbSetAuthCountryCode(
      pcCountryCode,
    );
  }

  late final _Mtc_UeDbSetAuthCountryCodePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UeDbSetAuthCountryCode');
  late final _Mtc_UeDbSetAuthCountryCode = _Mtc_UeDbSetAuthCountryCodePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief MTC get message country code.
  ///
  /// @retval NULL if no parameter which do not exist, or message country code string
  ffi.Pointer<ffi.Char> Mtc_UeDbGetAuthCountryCode() {
    return _Mtc_UeDbGetAuthCountryCode();
  }

  late final _Mtc_UeDbGetAuthCountryCodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetAuthCountryCode');
  late final _Mtc_UeDbGetAuthCountryCode = _Mtc_UeDbGetAuthCountryCodePtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC set RSA mode.
  ///
  /// @param [in] bEnable true to use RSA mode.
  ///
  /// @retval 0 Set successfully.
  /// @retval 1 Set Failed.
  int Mtc_UeDbSetRsaMode(
    bool bEnable,
  ) {
    return _Mtc_UeDbSetRsaMode(
      bEnable,
    );
  }

  late final _Mtc_UeDbSetRsaModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_UeDbSetRsaMode');
  late final _Mtc_UeDbSetRsaMode =
      _Mtc_UeDbSetRsaModePtr.asFunction<int Function(bool)>();

  /// @brief MTC get RSA mode.
  ///
  /// @retval true to use RSA mode, otherwise not use RSA mode
  bool Mtc_UeDbGetRsaMode() {
    return _Mtc_UeDbGetRsaMode();
  }

  late final _Mtc_UeDbGetRsaModePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('Mtc_UeDbGetRsaMode');
  late final _Mtc_UeDbGetRsaMode =
      _Mtc_UeDbGetRsaModePtr.asFunction<bool Function()>();

  /// @brief Get account ID.
  ///
  /// @return Account ID.
  ffi.Pointer<ffi.Char> Mtc_UeDbGetAccountId() {
    return _Mtc_UeDbGetAccountId();
  }

  late final _Mtc_UeDbGetAccountIdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_UeDbGetAccountId');
  late final _Mtc_UeDbGetAccountId =
      _Mtc_UeDbGetAccountIdPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief MTC set Stranger Forbid.
  ///
  /// @param [in] bEnable true to enable Stranger Forbid.
  ///
  /// @retval 0 Set successfully.
  /// @retval 1 Set Failed.
  int Mtc_UeDbSetStrangerForbid(
    bool bEnable,
  ) {
    return _Mtc_UeDbSetStrangerForbid(
      bEnable,
    );
  }

  late final _Mtc_UeDbSetStrangerForbidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_UeDbSetStrangerForbid');
  late final _Mtc_UeDbSetStrangerForbid =
      _Mtc_UeDbSetStrangerForbidPtr.asFunction<int Function(bool)>();

  /// @brief MTC get Stranger Forbid.
  ///
  /// @retval true to use Stranger Forbid, otherwise not use Stranger Forbid
  bool Mtc_UeDbGetStrangerForbid() {
    return _Mtc_UeDbGetStrangerForbid();
  }

  late final _Mtc_UeDbGetStrangerForbidPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Mtc_UeDbGetStrangerForbid');
  late final _Mtc_UeDbGetStrangerForbid =
      _Mtc_UeDbGetStrangerForbidPtr.asFunction<bool Function()>();

  /// @brief MTC set Agent Stable.
  ///
  /// @param [in] bEnable true to enable Agent Stable.
  ///
  /// @retval 0 Set successfully.
  /// @retval 1 Set Failed.
  int Mtc_UeDbSetAgentStable(
    bool bEnable,
  ) {
    return _Mtc_UeDbSetAgentStable(
      bEnable,
    );
  }

  late final _Mtc_UeDbSetAgentStablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_UeDbSetAgentStable');
  late final _Mtc_UeDbSetAgentStable =
      _Mtc_UeDbSetAgentStablePtr.asFunction<int Function(bool)>();

  /// @brief MTC get Agent Stable.
  ///
  /// @retval true to Agent Stable, otherwise not use Agent Stable
  bool Mtc_UeDbGetAgentStable() {
    return _Mtc_UeDbGetAgentStable();
  }

  late final _Mtc_UeDbGetAgentStablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Mtc_UeDbGetAgentStable');
  late final _Mtc_UeDbGetAgentStable =
      _Mtc_UeDbGetAgentStablePtr.asFunction<bool Function()>();

  /// @brief MTC set Channel Enable.
  ///
  /// @param [in] bEnable true to enable Create Channel.
  ///
  /// @retval 0 Set successfully.
  /// @retval 1 Set Failed.
  int Mtc_UeDbSetChannelEnable(
    bool bEnable,
  ) {
    return _Mtc_UeDbSetChannelEnable(
      bEnable,
    );
  }

  late final _Mtc_UeDbSetChannelEnablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_UeDbSetChannelEnable');
  late final _Mtc_UeDbSetChannelEnable =
      _Mtc_UeDbSetChannelEnablePtr.asFunction<int Function(bool)>();

  /// @brief MTC get Channel Enable.
  ///
  /// @retval true to Use Channel, otherwise not use Channel
  bool Mtc_UeDbGetChannelEnable() {
    return _Mtc_UeDbGetChannelEnable();
  }

  late final _Mtc_UeDbGetChannelEnablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Mtc_UeDbGetChannelEnable');
  late final _Mtc_UeDbGetChannelEnable =
      _Mtc_UeDbGetChannelEnablePtr.asFunction<bool Function()>();

  /// @brief MTC set Network Quality Enable.
  ///
  /// @param [in] bEnable ZTRUE to enable get network quality info.
  ///
  /// @retval 0 Set successfully.
  /// @retval 1 Set Failed.
  int Mtc_UeDbSetNetworkQualityEnable(
    bool bEnable,
  ) {
    return _Mtc_UeDbSetNetworkQualityEnable(
      bEnable,
    );
  }

  late final _Mtc_UeDbSetNetworkQualityEnablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_UeDbSetNetworkQualityEnable');
  late final _Mtc_UeDbSetNetworkQualityEnable =
      _Mtc_UeDbSetNetworkQualityEnablePtr.asFunction<int Function(bool)>();

  /// @brief MTC get Network Quality Enable.
  ///
  /// @retval true to get Network Quality info, otherwise Network Quality info is empty
  bool Mtc_UeDbGetNetworkQualityEnable() {
    return _Mtc_UeDbGetNetworkQualityEnable();
  }

  late final _Mtc_UeDbGetNetworkQualityEnablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Mtc_UeDbGetNetworkQualityEnable');
  late final _Mtc_UeDbGetNetworkQualityEnable =
      _Mtc_UeDbGetNetworkQualityEnablePtr.asFunction<bool Function()>();

  /// @brief MTC set Skip Client Load.
  ///
  /// @param [in] bEnable ZTRUE to skip client load.
  ///
  /// @retval 0 Set successfully.
  /// @retval 1 Set Failed.
  int Mtc_UeDbSetSkipClientLoad(
    bool bEnable,
  ) {
    return _Mtc_UeDbSetSkipClientLoad(
      bEnable,
    );
  }

  late final _Mtc_UeDbSetSkipClientLoadPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_UeDbSetSkipClientLoad');
  late final _Mtc_UeDbSetSkipClientLoad =
      _Mtc_UeDbSetSkipClientLoadPtr.asFunction<int Function(bool)>();

  /// @brief MTC get Skip Client Load.
  ///
  /// @retval true to skip client load
  bool Mtc_UeDbGetSkipClientLoad() {
    return _Mtc_UeDbGetSkipClientLoad();
  }

  late final _Mtc_UeDbGetSkipClientLoadPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Mtc_UeDbGetSkipClientLoad');
  late final _Mtc_UeDbGetSkipClientLoad =
      _Mtc_UeDbGetSkipClientLoadPtr.asFunction<bool Function()>();

  /// @brief MTC set Group Message Receive Enable.
  ///
  /// @param [in] bEnable true to enable group message receive, default is true.
  ///
  /// @retval 0 Set successfully.
  /// @retval 1 Set Failed.
  int Mtc_UeDbSetGroupMessageRecvEnable(
    bool bEnable,
  ) {
    return _Mtc_UeDbSetGroupMessageRecvEnable(
      bEnable,
    );
  }

  late final _Mtc_UeDbSetGroupMessageRecvEnablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Bool)>>(
          'Mtc_UeDbSetGroupMessageRecvEnable');
  late final _Mtc_UeDbSetGroupMessageRecvEnable =
      _Mtc_UeDbSetGroupMessageRecvEnablePtr.asFunction<int Function(bool)>();

  /// @brief MTC get Group Message Receive Enable.
  ///
  /// @retval true to enable Receiving Group Message, otherwise can not receive group message
  bool Mtc_UeDbGetGroupMessageRecvEnable() {
    return _Mtc_UeDbGetGroupMessageRecvEnable();
  }

  late final _Mtc_UeDbGetGroupMessageRecvEnablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'Mtc_UeDbGetGroupMessageRecvEnable');
  late final _Mtc_UeDbGetGroupMessageRecvEnable =
      _Mtc_UeDbGetGroupMessageRecvEnablePtr.asFunction<bool Function()>();

  /// @brief Form URI from user ID.
  ///
  /// @param [in] iIdType ID type @ref EN_MTC_USER_ID_TYPE.
  /// @param [in] pcId ID string.
  ///
  /// @return User URI string when succeed, otherwise ZNULL.
  ffi.Pointer<ffi.Char> Mtc_UserFormUri(
    int iIdType,
    ffi.Pointer<ffi.Char> pcId,
  ) {
    return _Mtc_UserFormUri(
      iIdType,
      pcId,
    );
  }

  late final _Mtc_UserFormUriPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>>('Mtc_UserFormUri');
  late final _Mtc_UserFormUri = _Mtc_UserFormUriPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>)>();

  /// @brief Form URI from user ID.
  ///
  /// @param [in] pcIdType the ID type string.
  /// @param [in] pcId ID string.
  ///
  /// @return User URI string when succeed, otherwise ZNULL.
  ffi.Pointer<ffi.Char> Mtc_UserFormUriX(
    ffi.Pointer<ffi.Char> pcIdType,
    ffi.Pointer<ffi.Char> pcId,
  ) {
    return _Mtc_UserFormUriX(
      pcIdType,
      pcId,
    );
  }

  late final _Mtc_UserFormUriXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_UserFormUriX');
  late final _Mtc_UserFormUriX = _Mtc_UserFormUriXPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief Check if the URI is valid.
  /// @param  pcUri The URI string.
  /// @retval true The URI is valid.
  /// @retval false The URI is invalid.
  bool Mtc_UserIsValidUri(
    ffi.Pointer<ffi.Char> pcUri,
  ) {
    return _Mtc_UserIsValidUri(
      pcUri,
    );
  }

  late final _Mtc_UserIsValidUriPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UserIsValidUri');
  late final _Mtc_UserIsValidUri =
      _Mtc_UserIsValidUriPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Check if the uid is valid.
  /// @param  pcUid The uid string.
  /// @retval true The uid is valid.
  /// @retval false The uid is invalid.
  bool Mtc_UserIsValidUid(
    ffi.Pointer<ffi.Char> pcUid,
  ) {
    return _Mtc_UserIsValidUid(
      pcUid,
    );
  }

  late final _Mtc_UserIsValidUidPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'Mtc_UserIsValidUid');
  late final _Mtc_UserIsValidUid =
      _Mtc_UserIsValidUidPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Get ID type from URI.
  /// @param  pcUri The URI string.
  /// @return       The ID type @ref EN_MTC_USER_ID_TYPE if URI is valid.
  /// Otherwise ZMAXUINT.
  int Mtc_UserGetIdType(
    ffi.Pointer<ffi.Char> pcUri,
  ) {
    return _Mtc_UserGetIdType(
      pcUri,
    );
  }

  late final _Mtc_UserGetIdTypePtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<ffi.Char>)>>(
      'Mtc_UserGetIdType');
  late final _Mtc_UserGetIdType =
      _Mtc_UserGetIdTypePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Get string of ID type from URI.
  /// @param  pcUri The URI string.
  /// @return       The string of ID type if URI is valid.
  /// Otherwise ZNULL.
  ffi.Pointer<ffi.Char> Mtc_UserGetIdTypeX(
    ffi.Pointer<ffi.Char> pcUri,
  ) {
    return _Mtc_UserGetIdTypeX(
      pcUri,
    );
  }

  late final _Mtc_UserGetIdTypeXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('Mtc_UserGetIdTypeX');
  late final _Mtc_UserGetIdTypeX = _Mtc_UserGetIdTypeXPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Get string of ID from URI.
  /// @param  pcUri The URI string.
  /// @return       The string of ID if URI is valid.
  /// Otherwise ZNULL.
  ffi.Pointer<ffi.Char> Mtc_UserGetId(
    ffi.Pointer<ffi.Char> pcUri,
  ) {
    return _Mtc_UserGetId(
      pcUri,
    );
  }

  late final _Mtc_UserGetIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('Mtc_UserGetId');
  late final _Mtc_UserGetId = _Mtc_UserGetIdPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Get string of realm from URI.
  /// @param  pcUri The URI string.
  /// @return       The string of realm if URI is valid.
  /// Otherwise ZNULL.
  ffi.Pointer<ffi.Char> Mtc_UserGetRealm(
    ffi.Pointer<ffi.Char> pcUri,
  ) {
    return _Mtc_UserGetRealm(
      pcUri,
    );
  }

  late final _Mtc_UserGetRealmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('Mtc_UserGetRealm');
  late final _Mtc_UserGetRealm = _Mtc_UserGetRealmPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Convert ID type from string to type value.
  /// @param pcType The ID type string.
  /// @return The ID type value @ref EN_MTC_USER_ID_TYPE.
  int Mtc_UserTypeS2t(
    ffi.Pointer<ffi.Char> pcType,
  ) {
    return _Mtc_UserTypeS2t(
      pcType,
    );
  }

  late final _Mtc_UserTypeS2tPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<ffi.Char>)>>(
      'Mtc_UserTypeS2t');
  late final _Mtc_UserTypeS2t =
      _Mtc_UserTypeS2tPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Convert ID type from type value to string.
  /// @param iIdType The ID type @ref EN_MTC_USER_ID_TYPE.
  /// @return The ID type string.
  ffi.Pointer<ffi.Char> Mtc_UserTypeT2s(
    int iIdType,
  ) {
    return _Mtc_UserTypeT2s(
      iIdType,
    );
  }

  late final _Mtc_UserTypeT2sPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'Mtc_UserTypeT2s');
  late final _Mtc_UserTypeT2s =
      _Mtc_UserTypeT2sPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// @brief Print ERROR log with format string information.
  /// User can specific log name as the log module prefix
  /// Log print level can be set by Mtc_CliDbSetLogLevel.
  ///
  /// @param [in] pcLogName The log name. Default name is "ZOS" if no log name.
  /// @param [in] pcFormat String format.
  /// @param [in] ... String vars.
  ///
  /// @see @ref Mtc_AnyLogInfoStr
  void Mtc_AnyLogErrStr(
    ffi.Pointer<ffi.Char> pcLogName,
    ffi.Pointer<ffi.Char> pcFormat,
  ) {
    return _Mtc_AnyLogErrStr(
      pcLogName,
      pcFormat,
    );
  }

  late final _Mtc_AnyLogErrStrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_AnyLogErrStr');
  late final _Mtc_AnyLogErrStr = _Mtc_AnyLogErrStrPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief Print INFO log with format string information.
  /// User can specific log name as the log module prefix
  /// Log print level can be set by Mtc_CliDbSetLogLevel.
  ///
  /// @param [in] pcLogName The log name. Default name is "ZOS" if no log name.
  /// @param [in] pcFormat String format.
  /// @param [in] ... String vars.
  ///
  /// @see @ref Mtc_AnyLogErrStr
  void Mtc_AnyLogInfoStr(
    ffi.Pointer<ffi.Char> pcLogName,
    ffi.Pointer<ffi.Char> pcFormat,
  ) {
    return _Mtc_AnyLogInfoStr(
      pcLogName,
      pcFormat,
    );
  }

  late final _Mtc_AnyLogInfoStrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_AnyLogInfoStr');
  late final _Mtc_AnyLogInfoStr = _Mtc_AnyLogInfoStrPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief Print DEBUG log with format string information.
  /// User can specific log name as the log module prefix
  /// Log print level can be set by Mtc_DbSetLogLevel.
  ///
  /// @param [in] pcLogName The log name. Default name is "ZOS" if no log name.
  /// @param [in] pcFormat String format.
  /// @param [in] ... String vars.
  ///
  /// @see @ref Mtc_AnyLogInfoStr
  void Mtc_AnyLogDbgStr(
    ffi.Pointer<ffi.Char> pcLogName,
    ffi.Pointer<ffi.Char> pcFormat,
  ) {
    return _Mtc_AnyLogDbgStr(
      pcLogName,
      pcFormat,
    );
  }

  late final _Mtc_AnyLogDbgStrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('Mtc_AnyLogDbgStr');
  late final _Mtc_AnyLogDbgStr = _Mtc_AnyLogDbgStrPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief This function flushs buffer into log file.
  ///
  /// @retval 0 Flush operation successfully.
  /// @retval 1 Flush operation failed.
  ///
  /// @see
  int Mtc_AnyLogFlush() {
    return _Mtc_AnyLogFlush();
  }

  late final _Mtc_AnyLogFlushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('Mtc_AnyLogFlush');
  late final _Mtc_AnyLogFlush =
      _Mtc_AnyLogFlushPtr.asFunction<int Function()>();

  /// @brief Get last error.
  ///
  /// @retval Last error string.
  ffi.Pointer<ffi.Char> Mtc_GetLastError() {
    return _Mtc_GetLastError();
  }

  late final _Mtc_GetLastErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'Mtc_GetLastError');
  late final _Mtc_GetLastError =
      _Mtc_GetLastErrorPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief Init shell.
  int Mtc_ShInit() {
    return _Mtc_ShInit();
  }

  late final _Mtc_ShInitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('Mtc_ShInit');
  late final _Mtc_ShInit = _Mtc_ShInitPtr.asFunction<int Function()>();

  /// @brief Destroy shell.
  void Mtc_ShDestory() {
    return _Mtc_ShDestory();
  }

  late final _Mtc_ShDestoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Mtc_ShDestory');
  late final _Mtc_ShDestory = _Mtc_ShDestoryPtr.asFunction<void Function()>();

  /// @brief Add shell command.
  ///
  /// @param pcCmd Command name.
  /// @param pcDesc Command description.
  /// @param pcSynop Synopsis.
  /// @param pfnCmd Command process entry.
  int Mtc_ShCmdAdd(
    ffi.Pointer<ffi.Char> pcCmd,
    ffi.Pointer<ffi.Char> pcDesc,
    ffi.Pointer<ffi.Char> pcSynop,
    PFN_MTCSHCMD pfnCmd,
  ) {
    return _Mtc_ShCmdAdd(
      pcCmd,
      pcDesc,
      pcSynop,
      pfnCmd,
    );
  }

  late final _Mtc_ShCmdAddPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, PFN_MTCSHCMD)>>('Mtc_ShCmdAdd');
  late final _Mtc_ShCmdAdd = _Mtc_ShCmdAddPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, PFN_MTCSHCMD)>();

  /// @brief Start run shell.
  int Mtc_ShRun() {
    return _Mtc_ShRun();
  }

  late final _Mtc_ShRunPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('Mtc_ShRun');
  late final _Mtc_ShRun = _Mtc_ShRunPtr.asFunction<int Function()>();

  /// @brief Get option from arguments.
  ///
  /// @param [in] iArgc Argument count.
  /// @param [in] apcArgv Argument string table.
  /// @param [in] pcOptStr Option string.
  /// @param [out] ppcArg Current argument string.
  ///
  /// @retval -1 Indicate the end of argument table.
  /// @retval '?' Indicate unknown argument.
  /// @retval Otherwise The option character
  ///
  /// The function is used to prase the argument string table.
  /// First, you should reset g_iZshOptInd to 0.
  /// Then repeat call this function until it returns -1,
  /// which indicate the end of argument string table.
  ///
  /// If prase successfully, it return the corresponding character in [pcOptStr].
  /// If the character in option string is followed by :, then the argument string
  /// will assgined to [ppcArg]. \n
  ///
  /// @section example Example:
  /// @code
  /// g_iZshOptInd = 0;
  /// while ((opt = Zsh_CmdGetOpt(argc, argv, "nt:", &argstr)) != -1)
  /// {
  /// switch (opt)
  /// {
  /// case 'n':
  /// flag = 1;
  /// break;
  /// case 't':
  /// val = atoi(argstr);
  /// break;
  /// default:
  /// fprintf(stderr, "Usage: %s [-t nsec] [-n] \r\n", argv[0]);
  /// exit(0);
  /// }
  /// }
  /// @endcode
  ///
  /// @note Learn more detail from getopt manpage in linux
  int Mtc_ShGetOpt(
    int iArgc,
    ffi.Pointer<ffi.Pointer<ffi.Char>> apcArgv,
    ffi.Pointer<ffi.Char> pcOptStr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> ppcArg,
  ) {
    return _Mtc_ShGetOpt(
      iArgc,
      apcArgv,
      pcOptStr,
      ppcArg,
    );
  }

  late final _Mtc_ShGetOptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('Mtc_ShGetOpt');
  late final _Mtc_ShGetOpt = _Mtc_ShGetOptPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();
}

/// @brief MTC client state.
abstract class EN_MTC_CLI_STATE_TYPE {
  /// < @brief Client is invalid.
  static const int EN_MTC_CLI_STATE_INVALID = -3;

  /// < @brief Client is initilized.
  static const int EN_MTC_CLI_STATE_INITED = -2;

  /// < @brief Open a profile.
  static const int EN_MTC_CLI_STATE_OPENED = -1;

  /// < @brief Client is after started before login.
  static const int EN_MTC_CLI_STATE_IDLE = 0;

  /// < @brief Client request authorization.
  static const int EN_MTC_CLI_STATE_AUTH = 1;

  /// < @brief Client is trying to login.
  static const int EN_MTC_CLI_STATE_LOGINING = 2;

  /// < @brief Client is logined successfully.
  static const int EN_MTC_CLI_STATE_LOGINED = 3;

  /// < @brief Client is trying to logout.
  static const int EN_MTC_CLI_STATE_LOGOUTING = 4;
}

/// @brief Type define of MTC client callback for post print message.
/// @param pcStr is the print string.
typedef PFN_MTCCLIPRINT = ffi
    .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char> pcStr)>>;

/// @brief Type define of MTC client callback for post print message.
/// @param pcLevel is the level info.
/// @param pcTime is the time info.
/// @param pcThreadInfo is the thread info.
/// @param pcStr is the print string.
typedef PFN_MTCCLIPRINTX = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Pointer<ffi.Char> pcLevel,
            ffi.Pointer<ffi.Char> pcTime,
            ffi.Pointer<ffi.Char> pcThreadInfo,
            ffi.Pointer<ffi.Char> pcStr)>>;

/// @brief Type define of MTC client callback for notify event to MTC user.
/// @param pcName Notification name string.
/// @param zCookie Cookie value.
/// @param pcInfo Information string in json format.
typedef PFN_MTCCLINOTIFY = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Char> pcName, ffi.Size zCookie,
            ffi.Pointer<ffi.Char> pcInfo)>>;

/// @brief Type define of MTC client callback.
typedef PFN_MTCUIEVNT = ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> zEvntId)>>;

/// @brief Type define of MTC GUI callback for abort.
typedef PFN_MTCCLIABORT = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(ffi.Size zCookie, ffi.Pointer<ffi.Char> pcDesc)>>;

/// @brief MTC log level.
abstract class EN_MTC_LOG_LEVEL_TYPE {
  static const int EN_MTC_LOG_LEVEL_DISABLE = 0;

  /// @brief Disable log output.
  static const int EN_MTC_LOG_LEVEL_ERROR = 1;

  /// @brief Only error message.
  static const int EN_MTC_LOG_LEVEL_INFO = 2;

  /// @brief Include error, info message.
  static const int EN_MTC_LOG_LEVEL_DEBUG = 3;

  /// @brief Inlcude error, info
  /// and debug message.
  static const int EN_MTC_LOG_LEVEL_FUNCTION = 4;
}

/// @brief Application context type definition
typedef ZAPPCONTEXT = ffi.Pointer<ffi.Void>;

/// @brief The router first conn protocol type.
abstract class EN_MTC_CLI_DB_ROUTER_FIRSTCONN_TYPE {
  /// <@brief udp.
  static const int EN_MTC_CLI_DB_ROUTER_FIRSTCONN_UDP = 0;

  /// <@brief tcp.
  static const int EN_MTC_CLI_DB_ROUTER_FIRSTCONN_TCP = 1;

  /// <@brief http.
  static const int EN_MTC_CLI_DB_ROUTER_FIRSTCONN_HTTP = 2;
}

/// @brief The router path select algo type.
abstract class EN_MTC_CLI_DB_ROUTER_PATHALGO_TYPE {
  /// <@brief interval best.
  static const int EN_MTC_CLI_DB_ROUTER_PATHALGO_INTERVALBEST = 0;

  /// <@brief all time best.
  static const int EN_MTC_CLI_DB_ROUTER_PATHALGO_ALLTIMEBEST = 1;
}

/// @brief MTC sts access type
abstract class EN_MTC_CLI_DB_ACCESS_TYPE {
  static const int EN_MTC_CLI_DB_STANDARD = 1;
  static const int EN_MTC_CLI_DB_REC_RTMP_CD = 11;
  static const int EN_MTC_CLI_DB_WEBRTC_BROWSER_CD = 12;
  static const int EN_MTC_CLI_DB_WEBRTC_TRTC_CD = 13;
  static const int EN_MTC_CLI_DB_RTMP_WECHAT_CD = 14;
  static const int EN_MTC_CLI_DB_SIP_CLIENT_CD = 15;
  static const int EN_MTC_CLI_DB_SIP_SERVER_CD = 16;
  static const int EN_MTC_CLI_DB_SIP_PSTN_CD = 17;
  static const int EN_MTC_CLI_DB_SIP_VOLTE_CD = 18;
  static const int EN_MTC_CLI_DB_IOT_CLIENT_CD = 19;
  static const int EN_MTC_CLI_DB_JSMS_SERVER = 60;
  static const int EN_MTC_CLI_DB_ACCOUNT_SERVER = 61;
  static const int EN_MTC_CLI_DB_IOTGATEWAY_SERVER = 62;
  static const int EN_MTC_CLI_DB_ROUTER_SERVER = 63;
  static const int EN_MTC_CLI_DB_JSME_SERVER = 64;
  static const int EN_MTC_CLI_DB_CALLSERVEREX_SERVER = 65;
  static const int EN_MTC_CLI_DB_GROUP_SERVER = 66;
  static const int EN_MTC_CLI_DB_OTHERS = 127;
}

/// @brief The profile media mode type.
abstract class EN_MTC_PROF_MEDIA_MODE {
  /// <@brief Profile media base.
  static const int EN_MTC_PROF_MEDIA_BASE = 0;

  /// <@brief Profile media enhance.
  static const int EN_MTC_PROF_MEDIA_ENHANCE = 1;
}

/// @brief MTC user entry reasen type.
abstract class EN_MTC_UE_REASON_TYPE {
  /// < @brief Account exist.
  static const int EN_MTC_UE_REASON_ACCOUNT_EXIST = 0;

  /// < @brief Account not exist.
  static const int EN_MTC_UE_REASON_ACCOUNT_NOT_EXIST = 1;

  /// < @brief Auth code is error.
  static const int EN_MTC_UE_REASON_AUTH_CODE_ERROR = 2;

  /// < @brief Auth code is expired.
  static const int EN_MTC_UE_REASON_AUTH_CODE_EXPIRED = 3;

  /// < @brief Try to auth too many times.
  static const int EN_MTC_UE_REASON_AUTH_TOO_MANY_TIMES = 4;

  /// < @brief Auth is blocked.
  static const int EN_MTC_UE_REASON_AUTH_BLOCKED = 5;

  /// < @brief Unknown reason.
  static const int EN_MTC_UE_REASON_UNKNOWN = 6;

  /// < @brief No User Entry.
  static const int EN_MTC_UE_REASON_NO_USER_ENTRY = 7;
  static const int EN_MTC_UE_REASON_NOT_FOUND = 8;

  /// < @brief Password Error.
  static const int EN_MTC_UE_REASON_PWD_ERROR = 9;

  /// < @brief Account is banned.
  static const int EN_MTC_UE_REASON_ACCOUNT_BANNED = 10;
}

/// @brief MTC user entry requse type.
abstract class EN_MTC_UE_REQUEST_TYPE {
  /// < @brief Fetch password.
  static const int EN_MTC_UE_REQUEST_FETCH_PASSWORD = 0;

  /// < @brief Reset password.
  static const int EN_MTC_UE_REQUEST_RESET_PASSWORD = 1;

  /// < @brief Create account.
  static const int EN_MTC_UE_REQUEST_CREATE_ACCOUNT = 2;

  /// < @brief Add relationship.
  static const int EN_MTC_UE_REQUEST_ADD_RELATIONSHIP = 3;
}

/// @brief MTC user ID type.
abstract class EN_MTC_USER_ID_TYPE {
  /// < @brief Invalid ID type.
  static const int EN_MTC_USER_ID_INVALID = 0;

  /// < @brief The ID of phone.
  static const int EN_MTC_USER_ID_PHONE = 1;

  /// < @brief The ID of email.
  static const int EN_MTC_USER_ID_EMAIL = 2;

  /// < @brief The ID of username.
  static const int EN_MTC_USER_ID_USERNAME = 3;

  /// < @brief The ID of unique.
  static const int EN_MTC_USER_ID_UID = 4;

  /// < @brief The ID of facebook.
  static const int EN_MTC_USER_ID_FACEBOOK = 5;

  /// < @brief The ID of twitter.
  static const int EN_MTC_USER_ID_TWITTER = 6;

  /// < @brief The ID of snapchat.
  static const int EN_MTC_USER_ID_SNAPCHAT = 7;

  /// < @brief The ID of instagram.
  static const int EN_MTC_USER_ID_INSTAGRAM = 8;

  /// < @brief The ID of weibo.
  static const int EN_MTC_USER_ID_WEIBO = 9;

  /// < @brief The ID of wechat.
  static const int EN_MTC_USER_ID_WECHAT = 10;

  /// < @brief The ID of qq.
  static const int EN_MTC_USER_ID_QQ = 11;

  /// < @brief The ID of app.
  static const int EN_MTC_USER_ID_APP = 12;

  /// < @brief The ID of google.
  static const int EN_MTC_USER_ID_GOOGLE = 13;

  /// < @brief The ID of huawei.
  static const int EN_MTC_USER_ID_HUAWEI = 14;

  /// < @brief The ID of alipay .
  static const int EN_MTC_USER_ID_ALIPAY = 15;

  /// < @brief The ID of encrypted phone.
  static const int EN_MTC_USER_ID_EPHONE = 16;

  /// < @brief The ID of user defined.
  static const int EN_MTC_USER_ID_UDID = 17;
}

typedef PFN_MTCSHCMD = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Int iArgc, ffi.Pointer<ffi.Pointer<ffi.Char>> apcArgv)>>;

const String MtcAcvCommitOkNotification = 'MtcAcvCommitOkNotification';

const String MtcAcvCommitDidFailNotification =
    'MtcAcvCommitDidFailNotification';

const String MtcParmAcvCommitMemo = 'Memo';

const String MtcParmAcvCommitDeviceId = 'DeviceId';

const String MtcParmAcvCommitArchiveName = 'ArchiveName';

const String MtcParmAcvCommitPaths = 'Paths';

const String MtcParmAcvAppInfo = 'AppInfo';

const String MtcParmAcvAppKey = 'AppKey';

const int MTC_REG_STATE_IDLE = 0;

const int MTC_REG_STATE_REGING = 1;

const int MTC_REG_STATE_REGED = 2;

const int MTC_REG_STATE_REREGING = 3;

const int MTC_REG_STATE_UNREGING = 4;

const int MTC_EBASE_CP = 57344;

const int MTC_EBASE_REG = 57600;

const int MTC_EBASE_CALL = 57856;

const int MTC_EBASE_VSHARE = 58112;

const int MTC_EBASE_CAP = 58368;

const int MTC_EBASE_BUDDY = 58624;

const int MTC_EBASE_GRP = 58880;

const int MTC_EBASE_CONF = 59136;

const int MTC_EBASE_GS = 59392;

const int MTC_EBASE_PRES = 59648;

const int MTC_EBASE_IM = 59904;

const int MTC_EBASE_CONTACT = 60160;

const int MTC_EBASE_LOG = 60416;

const int MTC_CLI_ERR_NO = 57600;

const int MTC_CLI_ERR_LCL_FAILED = 57601;

const int MTC_CLI_REG_ERR_SEND_MSG = 57602;

const int MTC_CLI_REG_ERR_AUTH_FAILED = 57603;

const int MTC_CLI_REG_ERR_INVALID_USER = 57604;

const int MTC_CLI_REG_ERR_TIMEOUT = 57605;

const int MTC_CLI_REG_ERR_SERV_BUSY = 57606;

const int MTC_CLI_REG_ERR_SERV_NOT_REACH = 57607;

const int MTC_CLI_REG_ERR_SRV_FORBIDDEN = 57608;

const int MTC_CLI_REG_ERR_SRV_UNAVAIL = 57609;

const int MTC_CLI_REG_ERR_DNS_QRY = 57610;

const int MTC_CLI_REG_ERR_NETWORK = 57611;

const int MTC_CLI_REG_ERR_DEACTED = 57612;

const int MTC_CLI_REG_ERR_PROBATION = 57613;

const int MTC_CLI_REG_ERR_INTERNAL = 57614;

const int MTC_CLI_REG_ERR_NO_RESOURCE = 57615;

const int MTC_CLI_REG_ERR_OTHER = 57616;

const int MTC_CLI_REG_ERR_NO_NONCE = 57617;

const int MTC_CLI_REG_ERR_INV_AUTH_CODE = 57618;

const int MTC_CLI_REG_ERR_APP_KEY = 57619;

const int MTC_CLI_REG_ERR_DOMAIN = 57620;

const int MTC_CLI_REG_ERR_TOKEN_MISMATCH = 57621;

const int MTC_CLI_REG_ERR_BANNED = 57622;

const int MTC_CLI_REG_ERR_DELETED = 57623;

const int MTC_CLI_REG_ERR_TOKEN_SIZE_INVALID = 57624;

const int MTC_CLI_REG_ERR_SECRET_NOT_FOUND = 57625;

const int MTC_CLI_REG_ERR_HMAC_ERROR = 57626;

const int MTC_CLI_REG_ERR_BASE64_PAYLOAD_ERROR = 57627;

const int MTC_CLI_REG_ERR_PAYLOAD_INVALID = 57628;

const int MTC_CLI_REG_ERR_VERSIGN_APPKEY_ERROR = 57629;

const int MTC_CLI_REG_ERR_ACCOUNTID_MISMATCH = 57630;

const int MTC_CLI_REG_ERR_TOKEN_EXPIRED = 57631;

const int MTC_ANET_UNAVAILABLE = -2;

const int MTC_ANET_UNKNOWN = -1;

const int MTC_ANET_MOBILE = 0;

const int MTC_ANET_MOBILE_GPRS = 1;

const int MTC_ANET_MOBILE_EDGE = 2;

const int MTC_ANET_MOBILE_UMTS = 3;

const int MTC_ANET_MOBILE_CDMA = 4;

const int MTC_ANET_MOBILE_EVDO_0 = 5;

const int MTC_ANET_MOBILE_EVDO_A = 6;

const int MTC_ANET_MOBILE_1XRTT = 7;

const int MTC_ANET_MOBILE_HSDPA = 8;

const int MTC_ANET_MOBILE_HSUPA = 9;

const int MTC_ANET_MOBILE_HSPA = 10;

const int MTC_ANET_MOBILE_IDEN = 11;

const int MTC_ANET_MOBILE_EVDO_B = 12;

const int MTC_ANET_MOBILE_LTE = 13;

const int MTC_ANET_MOBILE_EHRPD = 14;

const int MTC_ANET_MOBILE_HSPAP = 15;

const int MTC_ANET_WIFI = 256;

const int MTC_ANET_WIMAX = 1536;

const int MTC_ANET_BLUETOOTH = 1792;

const int MTC_ANET_ETHERNET = 2304;

const int MTC_ANET_MASK_CATEGORY = 65280;

const int MTC_ACCOUNT_STATUS_ERR = -1;

const int MTC_ACCOUNT_STATUS_NOT_FOUND = 0;

const int MTC_ACCOUNT_STATUS_OFFLINE = 1;

const int MTC_ACCOUNT_STATUS_PUSH = 2;

const int MTC_ACCOUNT_STATUS_ONLINE = 3;

const String MTC_INFO_TERMINAL_VERSION_KEY = 'DeviceInfo.TERMINAL_SW_VERSION';

const String MTC_INFO_TERMINAL_MODEL_KEY = 'DeviceInfo.TERMINAL_MODEL';

const String MTC_INFO_TERMINAL_VENDOR_KEY = 'DeviceInfo.TERMINAL_VENDOR';

const String MTC_INFO_TERMINAL_LANGUAGE_KEY = 'DeviceInfo.LANG';

const String MTC_INFO_SOFTWARE_VERSION_KEY = 'DeviceInfo.CLIENT_VERSION';

const String MTC_INFO_SOFTWARE_VENDOR_KEY = 'DeviceInfo.CLIENT_VENDOR';

const String MTC_PUBLIC_PARAM_NOTIFY_KEY = 'Notify.IntegratedPush';

const int MTC_LOGIN_OPTION_NONE = 0;

const int MTC_LOGIN_OPTION_PREEMPTIVE = 1;

const String MtcCliStatusCodeKey = 'MtcCliStatusCodeKey';

const String MtcCliReasonKey = 'MtcCliReasonKey';

const String MtcCliExpiresKey = 'MtcCliExpiresKey';

const String MtcCliChangedKey = 'MtcCliChangedKey';

const String MtcCliCookieKey = 'MtcCliCookieKey';

const String MtcCliRandKey = 'MtcCliRandKey';

const String MtcCliAutnKey = 'MtcCliAutnKey';

const String MtcCliUserNameKey = 'MtcCliUserNameKey';

const String MtcCliStatusKey = 'MtcCliStatusKey';

const String MtcCliActiveEventKey = 'MtcCliActiveEventKey';

const String MtcCliActiveIdKey = 'MtcCliActiveIdKey';

const String MtcCliBusinessIdKey = 'MtcCliBusinessIdKey';

const String MtcCliBuinessTargetKey = 'MtcCliBuinessTargetKey';

const String MtcCliTypeKey = 'MtcCliTypeKey';

const String MtcCliParamesKey = 'MtcCliParamesKey';

const String MtcCliMessageKey = 'MtcCliMessageKey';

const String MtcCliProvisionOkNotification = 'MtcCliProvisionOkNotification';

const String MtcCliProvisionDidFailNotification =
    'MtcCliProvisionDidFailNotification';

const String MtcCliLocalLoginOkNotification = 'MtcCliLocalLoginOkNotification';

const String MtcCliLocalDidLogoutNotification =
    'MtcCliLocalDidLogoutNotification';

const String MtcCliServerLoginOkNotification =
    'MtcCliServerLoginOkNotification';

const String MtcCliServerLoginDidFailNotification =
    'MtcCliServerLoginDidFailNotification';

const String MtcCliServerDidLogoutNotification =
    'MtcCliServerDidLogoutNotification';

const String MtcCliServerLogoutedNotification =
    'MtcCliServerLogoutedNotification';

const String MtcCliReconnectingNotification = 'MtcCliReconnectingNotification';

const String MtcCliReconnectOkNotification = 'MtcCliReconnectOkNotification';

const String MtcCliRefreshOkNotification = 'MtcCliRefreshOkNotification';

const String MtcCliRefreshedNotification = 'MtcCliRefreshedNotification';

const String MtcCliRefreshDidFailNotification =
    'MtcCliRefreshDidFailNotification';

const String MtcCliRefreshFailedNotification =
    'MtcCliRefreshFailedNotification';

const String MtcCliRegisterOkNotification = 'MtcCliRegisterOkNotification';

const String MtcCliRegisterDidFailNotification =
    'MtcCliRegisterDidFailNotification';

const String MtcCliUnRegisterOkNotification = 'MtcCliUnRegisterOkNotification';

const String MtcCliDigestChallengeNotification =
    'MtcCliDigestChallengeNotification';

const String MtcCliAkaChallengeNotification = 'MtcCliAkaChallengeNotification';

const String MtcCliInfoSendOkNotification = 'MtcCliInfoSendOkNotification';

const String MtcCliInfoSendDidFailNotification =
    'MtcCliInfoSendDidFailNotification';

const String MtcCliAccountQueryOkNotification =
    'MtcCliAccountQueryOkNotification';

const String MtcCliAccountQueryDidFailNotification =
    'MtcCliAccountQueryDidFailNotification';

const String MtcCliAbortNotification = 'MtcCliAbortNotification';

const String MtcCliActiveNotification = 'MtcCliActiveNotification';

const String MtcCliServerMessageReceivedNotification =
    'MtcCliServerMessageReceivedNotification';

const int MTC_PROV_MEDIA_MASK = 255;

const String MtcUeReasonKey = 'MtcUeReasonKey';

const String MtcUeReasonDetailKey = 'MtcUeReasonDetailKey';

const String MtcUeMsgFailReasonKey = 'MtcImReasonKey';

const String MtcUePasswordKey = 'MtcUePasswordKey';

const String MtcUeAuthCodeKey = 'MtcUeAuthCodeKey';

const String MtcUeAuthNonceKey = 'MtcUeAuthNonceKey';

const String MtcUeUriKey = 'MtcUeUriKey';

const String MtcUeRelationTypeKey = 'MtcUeRelationTypeKey';

const String MtcUeRelationIdKey = 'MtcUeRelationIdKey';

const String MtcUeInitialPropertyNameKey = 'MtcUeInitialPropertyNameKey';

const String MtcUeInitialPropertyValueKey = 'MtcUeInitialPropertyValueKey';

const String MtcUePropertyNameKey = 'MtcUePropertyNameKey';

const String MtcUePropertyValueKey = 'MtcUePropertyValueKey';

const String MtcUeCountKey = 'MtcUeCountKey';

const String MtcUeIdTypeKey = 'MtcUeIdTypeKey';

const String MtcUeIdKey = 'MtcUeIdKey';

const String MtcUeStatusNameKey = 'MtcUeStatusNameKey';

const String MtcUeStatusValueKey = 'MtcUeStatusValueKey';

const String MtcUeSenderUriKey = 'MtcImSenderUriKey';

const String MtcUeTextKey = 'MtcImTextKey';

const String MtcUeTypeKey = 'MtcImTypeKey';

const String MtcUeCreateOkNotification = 'MtcUeCreateOkNotification';

const String MtcUeCreateDidFailNotification = 'MtcUeCreateDidFailNotification';

const String MtcUeRequestAuthCodeOkNotification =
    'MtcUeRequestAuthCodeOkNotification';

const String MtcUeRequestAuthCodeDidFailNotification =
    'MtcUeRequestAuthCodeDidFailNotification';

const String MtcUeRequestClientAuthCodeOkNotification =
    'MtcUeRequestClientAuthCodeOkNotification';

const String MtcUeRequestClientAuthCodeDidFailNotification =
    'MtcUeRequestClientAuthCodeDidFailNotification';

const String MtcUeFetchPasswordOkNotification =
    'MtcUeFetchPasswordOkNotification';

const String MtcUeFetchPasswordDidFailNotification =
    'MtcUeFetchPasswordDidFailNotification';

const String MtcUeResetPasswordOkNotification =
    'MtcUeResetPasswordOkNotification';

const String MtcUeResetPasswordDidFailNotification =
    'MtcUeResetPasswordDidFailNotification';

const String MtcUeChangePasswordOkNotification =
    'MtcUeChangePasswordOkNotification';

const String MtcUeChangePasswordDidFailNotification =
    'MtcUeChangePasswordDidFailNotification';

const String MtcUeBindRelationshipOkNotification =
    'MtcUeBindRelationshipOkNotification';

const String MtcUeBindRelationshipDidFailNotification =
    'MtcUeBindRelationshipDidFailNotification';

const String MtcUeUnbindRelationshipOkNotification =
    'MtcUeUnbindRelationshipOkNotification';

const String MtcUeUnbindRelationshipDidFailNotification =
    'MtcUeUnbindRelationshipDidFailNotification';

const String MtcUeRelationshipReleasedNotification =
    'MtcUeRelationshipReleasedNotification';

const String MtcUeQueryAccountOkNotification =
    'MtcUeQueryAccountOkNotification';

const String MtcUeQueryAccountDidFailNotification =
    'MtcUeQueryAccountDidFailNotification';

const String MtcUeGetAllRelationsOkNotifcation =
    'MtcUeGetAllRelationsOkNotifcation';

const String MtcUeGetAllRelationsDidFailNotification =
    'MtcUeGetAllRelationsDidFailNotification';

const String MtcUeDeleteUserOkNotifcation = 'MtcUeDeleteUserOkNotifcation';

const String MtcUeDeleteUserDidFailNotification =
    'MtcUeDeleteUserDidFailNotification';

const String MtcUeAuthorizationRequireNotification =
    'MtcUeAuthorizationRequireNotification';

const String MtcUeAuthorizationExpiredNotification =
    'MtcUeAuthorizationExpiredNotification';

const String MtcUeAuthorizationRefreshOkNotification =
    'MtcUeAuthorizationRefreshOkNotification';

const String MtcUeAuthorizationRefreshDidFailNotification =
    'MtcUeAuthorizationRefreshDidFailNotification';

const String MtcUeSetPropertyOkNotification = 'MtcUeSetPropertyOkNotification';

const String MtcUeSetPropertyDidFailNotification =
    'MtcUeSetPropertyDidFailNotification';

const String MtcUeGetPropertyOkNotification = 'MtcUeGetPropertyOkNotification';

const String MtcUeGetPropertyDidFailNotification =
    'MtcUeGetPropertyDidFailNotification';

const String MtcUeSetPropertiesOkNotification =
    'MtcUeSetPropertiesOkNotification';

const String MtcUeSetPropertiesDidFailNotification =
    'MtcUeSetPropertiesDidFailNotification';

const String MtcUeGetPropertiesOkNotification =
    'MtcUeGetPropertiesOkNotification';

const String MtcUeGetPropertiesDidFailNotification =
    'MtcUeGetPropertiesDidFailNotification';

const String MtcUeSetStatusOkNotification = 'MtcUeSetStatusOkNotification';

const String MtcUeSetStatusDidFailNotification =
    'MtcUeSetStatusDidFailNotification';

const String MtcUeResetUsernameOkNotification =
    'MtcUeResetUsernameOkNotification';

const String MtcUeResetUsernameDidFailNotification =
    'MtcUeResetUsernameDidFailNotification';

const String MtcUeSendOnlineMessageOkNotification =
    'MtcUeSendOnlineMessageOkNotification';

const String MtcUeSendOnlineMessageDidFailNotification =
    'MtcUeSendOnlineMessageDidFailNotification';

const String MtcUeOnlineMessageDidReceiveNotification =
    'MtcUeOnlineMessageDidReceiveNotification';

const String MtcUe3rdOnlineMessageDidReceiveNotification =
    'MtcUe3rdOnlineMessageDidReceiveNotification';

const String MtcUeQueryUserIdOkNotification = 'MtcUeQueryUserIdOkNotification';

const String MtcUeQueryUserIdDidFailNotification =
    'MtcUeQueryUserIdDidFailNotification';

const String MTC_UE_AUTHCODE_BYSMS = 'sms';

const String MTC_UE_AUTHCODE_BYCALL = 'call';

const String MTC_UE_AUTHCODE_IN_ENG = 'en';

const String MTC_UE_AUTHCODE_IN_CHN = 'zh';

const String MTC_UE_PROPERTY_PUBLIC_PREFIX = 'Public.';

const String MTC_UE_PROPERTY_STATUS_PREFIX = 'SC.';

const String MTC_USER_ID_PHONE = 'phone';

const String MTC_USER_ID_EMAIL = 'email';

const String MTC_USER_ID_USERNAME = 'username';

const String MTC_USER_ID_UID = 'uid';

const String MTC_USER_ID_FACEBOOK = 'facebook';

const String MTC_USER_ID_TWITTER = 'twitter';

const String MTC_USER_ID_SNAPCHAT = 'snapchat';

const String MTC_USER_ID_INSTAGRAM = 'instagram';

const String MTC_USER_ID_WEIBO = 'weibo';

const String MTC_USER_ID_WECHAT = 'wechat';

const String MTC_USER_ID_QQ = 'qq';

const String MTC_USER_ID_APP = 'app';

const String MTC_USER_ID_GOOGLE = 'google';

const String MTC_USER_ID_HUAWEI = 'huawei';

const String MTC_USER_ID_ALIPAY = 'alipay';

const String MTC_USER_ID_EPHONE = 'ephone';

const String MtcCallParamsTraceIdKey = 'MtcCallParamsTraceIdKey';

const String MtcCallParamsParentSpanIdKey = 'MtcCallParamsParentSpanIdKey';

const String MTC_ERROR_NO_ENV = 'Mtc.NoEnv';

const String MTC_ERROR_INV_STATE = 'Mtc.InvState';

const String MTC_ERROR_IN_AUTH = 'Mtc.InAuth';

const String MTC_ERROR_INV_PARM = 'Mtc.InvParm';

const String MTC_ERROR_ALLOC_MEM = 'Mtc.AllocMem';

const String MTC_ERROR_NEW_OBJ = 'Mtc.NewObj';

const String MTC_ERROR_NO_AGENT = 'Mtc.NoAgent';

const String MTC_ERROR_INV_ID = 'Mtc.InvId';

const String MTC_ERROR_INV_URI = 'Mtc.InvUri';

const String MTC_ERROR_NO_PWD = 'Mtc.NoPwd';

const String MTC_ERROR_INV_PWD = 'Mtc.InvPwd';

const String MTC_ERROR_SUB_EVNT = 'Mtc.SubEvnt';

const String MTC_ERROR_PROVISION = 'Mtc.Provision';

const String MTC_ERROR_AUTH_FAIL = 'Mtc.AuthFail';

const String MTC_ERROR_NO_ACCOUNT = 'Mtc.NoAccount';

const String MTC_ERROR_EXPIRED = 'Mtc.Expired';

const String MTC_ERROR_NO_AUTH = 'Mtc.NoAuth';

const String MTC_ERROR_INTERNAL = 'Mtc.Internal';

const String MTC_ERROR_CALL_INIT_CONN = 'MtcCall.InitConn';

const String MTC_ERROR_CALL_INIT_SESS = 'MtcCall.InitSess';

const String MTC_ERROR_CALL_ADD_AUDIO_STRM = 'MtcCall.AddAudioStrm';

const String MTC_ERROR_CALL_ADD_VIDEO_STRM = 'MtcCall.AddVideoStrm';

const String MTC_ERROR_CALL_NO_SIP_REG = 'MtcCall.NoSipReg';

const String MTC_ERROR_CALL_EXIST = 'MtcCall.Exist';

const String MTC_ERROR_CALL_READ_SDP = 'MtcCall.ReadSdp';

const String MTC_ERROR_CALL_FILL_SDP = 'MtcCall.FillSdp';

const String MTC_ERROR_CALL_ACTION = 'MtcCall.Action';

const String MTC_ERROR_CALL_NEGOTIATION = 'MtcCall.Nego';

const String MTC_ERROR_CALL_TIMEOUT = 'MtcCall.Timeout';

const String MTC_ERROR_NO_CALLBACK = 'MtcCall.NoCallBack';
