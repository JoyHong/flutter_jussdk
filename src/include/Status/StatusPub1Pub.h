//
// *****************************************************************************
// Copyright(c) 2017-2022 Juphoon System Software Co., LTD. All rights reserved.
// *****************************************************************************
//
// Auto generated from: StatusPub1.def
// Warning: do not edit this file.
//

#ifndef __Status_StatusPub1Pub_h
#define __Status_StatusPub1Pub_h

#include "Common/Common.h"
#include "Common/TypesPub.h"

namespace Status
{

/* status type -> value */
typedef map<Common::String,Common::String> Statuses;
void __write_Statuses(const Common::OputStreamPtr&,const Status::Statuses&);
void __read_Statuses(const Common::IputStreamPtr&,Status::Statuses&);
void __textWrite_Statuses(const Common::OputStreamPtr&,const Common::String&,const Status::Statuses&);
bool __textRead_Statuses(const Common::IputStreamPtr&,const Common::String&,Status::Statuses&,int = 0);

/* groupId -> Statuses */
typedef map<Common::String,Status::Statuses> StatusesMap;
void __write_StatusesMap(const Common::OputStreamPtr&,const Status::StatusesMap&);
void __read_StatusesMap(const Common::IputStreamPtr&,Status::StatusesMap&);
void __textWrite_StatusesMap(const Common::OputStreamPtr&,const Common::String&,const Status::StatusesMap&);
bool __textRead_StatusesMap(const Common::IputStreamPtr&,const Common::String&,Status::StatusesMap&,int = 0);

/* report时,_time是timeStamp,仅用来表征状态先后;
   StatusNode::getStatuses时,_time是状态更新时间,用来基于refresh的baseTime做过滤.
*/
class StatusTime
{
public:
    StatusTime();
    StatusTime(const Common::String&,Common::Long);

    bool operator<(const StatusTime&) const;
    bool operator==(const StatusTime&) const;
    bool operator!=(const StatusTime&__obj) const { return !operator==(__obj);}
    void __write(const Common::OputStreamPtr&) const;
    void __read(const Common::IputStreamPtr&);
    void __textWrite(const Common::OputStreamPtr&,const Common::String&) const;
    bool __textRead(const Common::IputStreamPtr&,const Common::String&,int = 0);
public:
    Common::String _value;
    Common::Long _time;
};
void __write_StatusTime(const Common::OputStreamPtr&,const Status::StatusTime&);
void __read_StatusTime(const Common::IputStreamPtr&,Status::StatusTime&);
void __textWrite_StatusTime(const Common::OputStreamPtr&,const Common::String&,const Status::StatusTime&);
bool __textRead_StatusTime(const Common::IputStreamPtr&,const Common::String&,Status::StatusTime&,int = 0);

/* type -> StatusTime */
typedef map<Common::String,Status::StatusTime> StatusTimes;
void __write_StatusTimes(const Common::OputStreamPtr&,const Status::StatusTimes&);
void __read_StatusTimes(const Common::IputStreamPtr&,Status::StatusTimes&);
void __textWrite_StatusTimes(const Common::OputStreamPtr&,const Common::String&,const Status::StatusTimes&);
bool __textRead_StatusTimes(const Common::IputStreamPtr&,const Common::String&,Status::StatusTimes&,int = 0);

/* groupId -> StatusTimes */
typedef map<Common::String,Status::StatusTimes> StatusVersMap;
void __write_StatusVersMap(const Common::OputStreamPtr&,const Status::StatusVersMap&);
void __read_StatusVersMap(const Common::IputStreamPtr&,Status::StatusVersMap&);
void __textWrite_StatusVersMap(const Common::OputStreamPtr&,const Common::String&,const Status::StatusVersMap&);
bool __textRead_StatusVersMap(const Common::IputStreamPtr&,const Common::String&,Status::StatusVersMap&,int = 0);

};//namespace: Status

#endif //__Status_StatusPub1Pub_h
