//
// *****************************************************************************
// Copyright(c) 2017-2024 Juphoon System Software Co., LTD. All rights reserved.
// *****************************************************************************
//
// Auto generated from: RouterTypes.def
// Warning: do not edit this file.
//

#ifndef __Common_RouterTypesPub_h
#define __Common_RouterTypesPub_h

#include "Common/CommonBase.h"

namespace Common
{

class CommonAPI PathQuality
{
public:
    PathQuality();
    PathQuality(const Common::String&,int,short,short);

    bool operator<(const PathQuality&) const;
    bool operator==(const PathQuality&) const;
    bool operator!=(const PathQuality&__obj) const { return !operator==(__obj);}
    void __write(const Common::OputStreamPtr&) const;
    void __read(const Common::IputStreamPtr&);
    void __textWrite(const Common::OputStreamPtr&,const Common::String&) const;
    bool __textRead(const Common::IputStreamPtr&,const Common::String&,int = 0);
public:
    Common::String _pathName;
    int _rttDelay;
    short _sendLoss;
    short _recvLoss;
};
CommonAPI void __write_PathQuality(const Common::OputStreamPtr&,const Common::PathQuality&);
CommonAPI void __read_PathQuality(const Common::IputStreamPtr&,Common::PathQuality&);
CommonAPI void __textWrite_PathQuality(const Common::OputStreamPtr&,const Common::String&,const Common::PathQuality&);
CommonAPI bool __textRead_PathQuality(const Common::IputStreamPtr&,const Common::String&,Common::PathQuality&,int = 0);

typedef vector<Common::PathQuality> PathQualityVec;
CommonAPI void __write_PathQualityVec(const Common::OputStreamPtr&,const Common::PathQualityVec&);
CommonAPI void __read_PathQualityVec(const Common::IputStreamPtr&,Common::PathQualityVec&);
CommonAPI void __textWrite_PathQualityVec(const Common::OputStreamPtr&,const Common::String&,const Common::PathQualityVec&);
CommonAPI bool __textRead_PathQualityVec(const Common::IputStreamPtr&,const Common::String&,Common::PathQualityVec&);

class CommonAPI RouterQuality
{
public:
    RouterQuality();
    RouterQuality(int,int,short,short,int,int,int);

    bool operator<(const RouterQuality&) const;
    bool operator==(const RouterQuality&) const;
    bool operator!=(const RouterQuality&__obj) const { return !operator==(__obj);}
    void __write(const Common::OputStreamPtr&) const;
    void __read(const Common::IputStreamPtr&);
    void __textWrite(const Common::OputStreamPtr&,const Common::String&) const;
    bool __textRead(const Common::IputStreamPtr&,const Common::String&,int = 0);
public:
    int _directSendKbps;
    /* _directSendKbps + indirectSendKbps = _fromClientKbps + _fromRouterKbps + _fromLocalKbps */
    int _transferSendKbps;
    short _sendLoss;
    short _sendDelay;
    int _fromClientKbps;
    int _fromRouterKbps;
    int _fromLocalKbps;
};
CommonAPI void __write_RouterQuality(const Common::OputStreamPtr&,const Common::RouterQuality&);
CommonAPI void __read_RouterQuality(const Common::IputStreamPtr&,Common::RouterQuality&);
CommonAPI void __textWrite_RouterQuality(const Common::OputStreamPtr&,const Common::String&,const Common::RouterQuality&);
CommonAPI bool __textRead_RouterQuality(const Common::IputStreamPtr&,const Common::String&,Common::RouterQuality&,int = 0);

typedef map<int,Common::RouterQuality> RouterQualityMap;
CommonAPI void __write_RouterQualityMap(const Common::OputStreamPtr&,const Common::RouterQualityMap&);
CommonAPI void __read_RouterQualityMap(const Common::IputStreamPtr&,Common::RouterQualityMap&);
CommonAPI void __textWrite_RouterQualityMap(const Common::OputStreamPtr&,const Common::String&,const Common::RouterQualityMap&);
CommonAPI bool __textRead_RouterQualityMap(const Common::IputStreamPtr&,const Common::String&,Common::RouterQualityMap&,int = 0);

class CommonAPI ClientQuality
{
public:
    ClientQuality();
    ClientQuality(int,Common::Long);

    bool operator<(const ClientQuality&) const;
    bool operator==(const ClientQuality&) const;
    bool operator!=(const ClientQuality&__obj) const { return !operator==(__obj);}
    void __write(const Common::OputStreamPtr&) const;
    void __read(const Common::IputStreamPtr&);
    void __textWrite(const Common::OputStreamPtr&,const Common::String&) const;
    bool __textRead(const Common::IputStreamPtr&,const Common::String&,int = 0);
public:
    int _totalPkts;
    Common::Long _totalCosts;
};
CommonAPI void __write_ClientQuality(const Common::OputStreamPtr&,const Common::ClientQuality&);
CommonAPI void __read_ClientQuality(const Common::IputStreamPtr&,Common::ClientQuality&);
CommonAPI void __textWrite_ClientQuality(const Common::OputStreamPtr&,const Common::String&,const Common::ClientQuality&);
CommonAPI bool __textRead_ClientQuality(const Common::IputStreamPtr&,const Common::String&,Common::ClientQuality&,int = 0);

};//namespace: Common

#endif //__Common_RouterTypesPub_h
