//
// *****************************************************************************
// Copyright(c) 2017-2022 Juphoon System Software Co., LTD. All rights reserved.
// *****************************************************************************
//
// Auto generated from: Common.def
// Warning: do not edit this file.
//

#ifndef __Common_CommonPub_h
#define __Common_CommonPub_h

#include "Common/Common.h"
#include "Common/TypesPub.h"

namespace Common
{

class CommonAPI Resource
{
public:
    Resource();
    Resource(const Common::String&,const Common::EndpointVec&,int);

    bool operator<(const Resource&) const;
    bool operator==(const Resource&) const;
    bool operator!=(const Resource&__obj) const { return !operator==(__obj);}
    void __write(const Common::OputStreamPtr&) const;
    void __read(const Common::IputStreamPtr&);
    void __textWrite(const Common::OputStreamPtr&,const Common::String&) const;
    bool __textRead(const Common::IputStreamPtr&,const Common::String&,int = 0);
public:
    Common::String _identity;
    Common::EndpointVec _endpoints;
    int _freePercent;
};
CommonAPI void __write_Resource(const Common::OputStreamPtr&,const Common::Resource&);
CommonAPI void __read_Resource(const Common::IputStreamPtr&,Common::Resource&);
CommonAPI void __textWrite_Resource(const Common::OputStreamPtr&,const Common::String&,const Common::Resource&);
CommonAPI bool __textRead_Resource(const Common::IputStreamPtr&,const Common::String&,Common::Resource&,int = 0);

typedef vector<Common::Resource> ResourceVec;
CommonAPI void __write_ResourceVec(const Common::OputStreamPtr&,const Common::ResourceVec&);
CommonAPI void __read_ResourceVec(const Common::IputStreamPtr&,Common::ResourceVec&);
CommonAPI void __textWrite_ResourceVec(const Common::OputStreamPtr&,const Common::String&,const Common::ResourceVec&);
CommonAPI bool __textRead_ResourceVec(const Common::IputStreamPtr&,const Common::String&,Common::ResourceVec&);

typedef map<Common::String,Common::Resource> ResourceMap;
CommonAPI void __write_ResourceMap(const Common::OputStreamPtr&,const Common::ResourceMap&);
CommonAPI void __read_ResourceMap(const Common::IputStreamPtr&,Common::ResourceMap&);
CommonAPI void __textWrite_ResourceMap(const Common::OputStreamPtr&,const Common::String&,const Common::ResourceMap&);
CommonAPI bool __textRead_ResourceMap(const Common::IputStreamPtr&,const Common::String&,Common::ResourceMap&,int = 0);

typedef map<Common::String,Common::ResourceVec> TypeResources;
CommonAPI void __write_TypeResources(const Common::OputStreamPtr&,const Common::TypeResources&);
CommonAPI void __read_TypeResources(const Common::IputStreamPtr&,Common::TypeResources&);
CommonAPI void __textWrite_TypeResources(const Common::OputStreamPtr&,const Common::String&,const Common::TypeResources&);
CommonAPI bool __textRead_TypeResources(const Common::IputStreamPtr&,const Common::String&,Common::TypeResources&,int = 0);

class CommonAPI Resource2
{
public:
    Resource2();
    Resource2(const Common::String&,int,const Common::StrStrMap&);

    bool operator<(const Resource2&) const;
    bool operator==(const Resource2&) const;
    bool operator!=(const Resource2&__obj) const { return !operator==(__obj);}
    void __write(const Common::OputStreamPtr&) const;
    void __read(const Common::IputStreamPtr&);
    void __textWrite(const Common::OputStreamPtr&,const Common::String&) const;
    bool __textRead(const Common::IputStreamPtr&,const Common::String&,int = 0);
public:
    Common::String _identity;
    int _freePercent;
    Common::StrStrMap _params;
};
CommonAPI void __write_Resource2(const Common::OputStreamPtr&,const Common::Resource2&);
CommonAPI void __read_Resource2(const Common::IputStreamPtr&,Common::Resource2&);
CommonAPI void __textWrite_Resource2(const Common::OputStreamPtr&,const Common::String&,const Common::Resource2&);
CommonAPI bool __textRead_Resource2(const Common::IputStreamPtr&,const Common::String&,Common::Resource2&,int = 0);

typedef vector<Common::Resource2> ResourceVec2;
CommonAPI void __write_ResourceVec2(const Common::OputStreamPtr&,const Common::ResourceVec2&);
CommonAPI void __read_ResourceVec2(const Common::IputStreamPtr&,Common::ResourceVec2&);
CommonAPI void __textWrite_ResourceVec2(const Common::OputStreamPtr&,const Common::String&,const Common::ResourceVec2&);
CommonAPI bool __textRead_ResourceVec2(const Common::IputStreamPtr&,const Common::String&,Common::ResourceVec2&);

typedef map<Common::String,Common::Resource2> ResourceMap2;
CommonAPI void __write_ResourceMap2(const Common::OputStreamPtr&,const Common::ResourceMap2&);
CommonAPI void __read_ResourceMap2(const Common::IputStreamPtr&,Common::ResourceMap2&);
CommonAPI void __textWrite_ResourceMap2(const Common::OputStreamPtr&,const Common::String&,const Common::ResourceMap2&);
CommonAPI bool __textRead_ResourceMap2(const Common::IputStreamPtr&,const Common::String&,Common::ResourceMap2&,int = 0);

typedef map<Common::String,Common::ResourceVec2> TypeResources2;
CommonAPI void __write_TypeResources2(const Common::OputStreamPtr&,const Common::TypeResources2&);
CommonAPI void __read_TypeResources2(const Common::IputStreamPtr&,Common::TypeResources2&);
CommonAPI void __textWrite_TypeResources2(const Common::OputStreamPtr&,const Common::String&,const Common::TypeResources2&);
CommonAPI bool __textRead_TypeResources2(const Common::IputStreamPtr&,const Common::String&,Common::TypeResources2&,int = 0);

class CommonAPI LogMessage
{
public:
    LogMessage();
    LogMessage(int,const Common::String&,const Common::String&);

    bool operator<(const LogMessage&) const;
    bool operator==(const LogMessage&) const;
    bool operator!=(const LogMessage&__obj) const { return !operator==(__obj);}
    void __write(const Common::OputStreamPtr&) const;
    void __read(const Common::IputStreamPtr&);
    void __textWrite(const Common::OputStreamPtr&,const Common::String&) const;
    bool __textRead(const Common::IputStreamPtr&,const Common::String&,int = 0);
public:
    int _level;
    Common::String _mod;
    Common::String _info;
};
CommonAPI void __write_LogMessage(const Common::OputStreamPtr&,const Common::LogMessage&);
CommonAPI void __read_LogMessage(const Common::IputStreamPtr&,Common::LogMessage&);
CommonAPI void __textWrite_LogMessage(const Common::OputStreamPtr&,const Common::String&,const Common::LogMessage&);
CommonAPI bool __textRead_LogMessage(const Common::IputStreamPtr&,const Common::String&,Common::LogMessage&,int = 0);

typedef map<Common::Long,Common::LogMessage> LogMessages;
CommonAPI void __write_LogMessages(const Common::OputStreamPtr&,const Common::LogMessages&);
CommonAPI void __read_LogMessages(const Common::IputStreamPtr&,Common::LogMessages&);
CommonAPI void __textWrite_LogMessages(const Common::OputStreamPtr&,const Common::String&,const Common::LogMessages&);
CommonAPI bool __textRead_LogMessages(const Common::IputStreamPtr&,const Common::String&,Common::LogMessages&,int = 0);

class CommonAPI LogKeyMsg
{
public:
    LogKeyMsg();
    LogKeyMsg(int,const Common::String&,const Common::String&,const Common::StrStrMap&);

    bool operator<(const LogKeyMsg&) const;
    bool operator==(const LogKeyMsg&) const;
    bool operator!=(const LogKeyMsg&__obj) const { return !operator==(__obj);}
    void __write(const Common::OputStreamPtr&) const;
    void __read(const Common::IputStreamPtr&);
    void __textWrite(const Common::OputStreamPtr&,const Common::String&) const;
    bool __textRead(const Common::IputStreamPtr&,const Common::String&,int = 0);
public:
    int _level;
    Common::String _mod;
    Common::String _info;
    Common::StrStrMap _keys;
};
CommonAPI void __write_LogKeyMsg(const Common::OputStreamPtr&,const Common::LogKeyMsg&);
CommonAPI void __read_LogKeyMsg(const Common::IputStreamPtr&,Common::LogKeyMsg&);
CommonAPI void __textWrite_LogKeyMsg(const Common::OputStreamPtr&,const Common::String&,const Common::LogKeyMsg&);
CommonAPI bool __textRead_LogKeyMsg(const Common::IputStreamPtr&,const Common::String&,Common::LogKeyMsg&,int = 0);

typedef map<Common::Long,Common::LogKeyMsg> LogKeyMsgs;
CommonAPI void __write_LogKeyMsgs(const Common::OputStreamPtr&,const Common::LogKeyMsgs&);
CommonAPI void __read_LogKeyMsgs(const Common::IputStreamPtr&,Common::LogKeyMsgs&);
CommonAPI void __textWrite_LogKeyMsgs(const Common::OputStreamPtr&,const Common::String&,const Common::LogKeyMsgs&);
CommonAPI bool __textRead_LogKeyMsgs(const Common::IputStreamPtr&,const Common::String&,Common::LogKeyMsgs&,int = 0);

class CommonAPI LogServiceRecord
{
public:
    LogServiceRecord();
    LogServiceRecord(const Common::String&,const Common::StrStrMap&);

    bool operator<(const LogServiceRecord&) const;
    bool operator==(const LogServiceRecord&) const;
    bool operator!=(const LogServiceRecord&__obj) const { return !operator==(__obj);}
    void __write(const Common::OputStreamPtr&) const;
    void __read(const Common::IputStreamPtr&);
    void __textWrite(const Common::OputStreamPtr&,const Common::String&) const;
    bool __textRead(const Common::IputStreamPtr&,const Common::String&,int = 0);
public:
    Common::String _mod;
    Common::StrStrMap _info;
};
CommonAPI void __write_LogServiceRecord(const Common::OputStreamPtr&,const Common::LogServiceRecord&);
CommonAPI void __read_LogServiceRecord(const Common::IputStreamPtr&,Common::LogServiceRecord&);
CommonAPI void __textWrite_LogServiceRecord(const Common::OputStreamPtr&,const Common::String&,const Common::LogServiceRecord&);
CommonAPI bool __textRead_LogServiceRecord(const Common::IputStreamPtr&,const Common::String&,Common::LogServiceRecord&,int = 0);

typedef map<Common::Long,Common::LogServiceRecord> LogServiceRecords;
CommonAPI void __write_LogServiceRecords(const Common::OputStreamPtr&,const Common::LogServiceRecords&);
CommonAPI void __read_LogServiceRecords(const Common::IputStreamPtr&,Common::LogServiceRecords&);
CommonAPI void __textWrite_LogServiceRecords(const Common::OputStreamPtr&,const Common::String&,const Common::LogServiceRecords&);
CommonAPI bool __textRead_LogServiceRecords(const Common::IputStreamPtr&,const Common::String&,Common::LogServiceRecords&,int = 0);

};//namespace: Common

#endif //__Common_CommonPub_h
