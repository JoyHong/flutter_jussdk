//
// *****************************************************************************
// Copyright(c) 2017-2022 Juphoon System Software Co., LTD. All rights reserved.
// *****************************************************************************
//
// Auto generated from: Types.def
// Warning: do not edit this file.
//

#ifndef __Common_TypesPub_h
#define __Common_TypesPub_h

#include "Common/Common.h"

namespace Common
{

/** int 数组 */
typedef vector<int> IntVec;
CommonAPI void __write_IntVec(const Common::OputStreamPtr&,const Common::IntVec&);
CommonAPI void __read_IntVec(const Common::IputStreamPtr&,Common::IntVec&);
CommonAPI void __textWrite_IntVec(const Common::OputStreamPtr&,const Common::String&,const Common::IntVec&);
CommonAPI bool __textRead_IntVec(const Common::IputStreamPtr&,const Common::String&,Common::IntVec&);

/** Common.Long 数组 */
typedef vector<Common::Long> LongVec;
CommonAPI void __write_LongVec(const Common::OputStreamPtr&,const Common::LongVec&);
CommonAPI void __read_LongVec(const Common::IputStreamPtr&,Common::LongVec&);
CommonAPI void __textWrite_LongVec(const Common::OputStreamPtr&,const Common::String&,const Common::LongVec&);
CommonAPI bool __textRead_LongVec(const Common::IputStreamPtr&,const Common::String&,Common::LongVec&);

/** Common.String 数组 */
typedef vector<Common::String> StrVec;
CommonAPI void __write_StrVec(const Common::OputStreamPtr&,const Common::StrVec&);
CommonAPI void __read_StrVec(const Common::IputStreamPtr&,Common::StrVec&);
CommonAPI void __textWrite_StrVec(const Common::OputStreamPtr&,const Common::String&,const Common::StrVec&);
CommonAPI bool __textRead_StrVec(const Common::IputStreamPtr&,const Common::String&,Common::StrVec&);

/** Common.Stream 数组 */
typedef vector<Common::Stream> StreamVec;
CommonAPI void __write_StreamVec(const Common::OputStreamPtr&,const Common::StreamVec&);
CommonAPI void __read_StreamVec(const Common::IputStreamPtr&,Common::StreamVec&);
CommonAPI void __textWrite_StreamVec(const Common::OputStreamPtr&,const Common::String&,const Common::StreamVec&);
CommonAPI bool __textRead_StreamVec(const Common::IputStreamPtr&,const Common::String&,Common::StreamVec&);

/** short 集合 */
typedef set<short> ShortSet;
CommonAPI void __write_ShortSet(const Common::OputStreamPtr&,const Common::ShortSet&);
CommonAPI void __read_ShortSet(const Common::IputStreamPtr&,Common::ShortSet&);
CommonAPI void __textWrite_ShortSet(const Common::OputStreamPtr&,const Common::String&,const Common::ShortSet&);
CommonAPI bool __textRead_ShortSet(const Common::IputStreamPtr&,const Common::String&,Common::ShortSet&);

/** int 集合 */
typedef set<int> IntSet;
CommonAPI void __write_IntSet(const Common::OputStreamPtr&,const Common::IntSet&);
CommonAPI void __read_IntSet(const Common::IputStreamPtr&,Common::IntSet&);
CommonAPI void __textWrite_IntSet(const Common::OputStreamPtr&,const Common::String&,const Common::IntSet&);
CommonAPI bool __textRead_IntSet(const Common::IputStreamPtr&,const Common::String&,Common::IntSet&);

/** Common.Long 集合 */
typedef set<Common::Long> LongSet;
CommonAPI void __write_LongSet(const Common::OputStreamPtr&,const Common::LongSet&);
CommonAPI void __read_LongSet(const Common::IputStreamPtr&,Common::LongSet&);
CommonAPI void __textWrite_LongSet(const Common::OputStreamPtr&,const Common::String&,const Common::LongSet&);
CommonAPI bool __textRead_LongSet(const Common::IputStreamPtr&,const Common::String&,Common::LongSet&);

/** Common.String 集合 */
typedef set<Common::String> StrSet;
CommonAPI void __write_StrSet(const Common::OputStreamPtr&,const Common::StrSet&);
CommonAPI void __read_StrSet(const Common::IputStreamPtr&,Common::StrSet&);
CommonAPI void __textWrite_StrSet(const Common::OputStreamPtr&,const Common::String&,const Common::StrSet&);
CommonAPI bool __textRead_StrSet(const Common::IputStreamPtr&,const Common::String&,Common::StrSet&);

/** Common.Stream 集合 */
typedef set<Common::Stream> StreamSet;
CommonAPI void __write_StreamSet(const Common::OputStreamPtr&,const Common::StreamSet&);
CommonAPI void __read_StreamSet(const Common::IputStreamPtr&,Common::StreamSet&);
CommonAPI void __textWrite_StreamSet(const Common::OputStreamPtr&,const Common::String&,const Common::StreamSet&);
CommonAPI bool __textRead_StreamSet(const Common::IputStreamPtr&,const Common::String&,Common::StreamSet&);

/** int -> bool 映射 */
typedef map<int,bool> IntBoolMap;
CommonAPI void __write_IntBoolMap(const Common::OputStreamPtr&,const Common::IntBoolMap&);
CommonAPI void __read_IntBoolMap(const Common::IputStreamPtr&,Common::IntBoolMap&);
CommonAPI void __textWrite_IntBoolMap(const Common::OputStreamPtr&,const Common::String&,const Common::IntBoolMap&);
CommonAPI bool __textRead_IntBoolMap(const Common::IputStreamPtr&,const Common::String&,Common::IntBoolMap&,int = 0);

/** int -> unsigned char 映射 */
typedef map<int,unsigned char> IntByteMap;
CommonAPI void __write_IntByteMap(const Common::OputStreamPtr&,const Common::IntByteMap&);
CommonAPI void __read_IntByteMap(const Common::IputStreamPtr&,Common::IntByteMap&);
CommonAPI void __textWrite_IntByteMap(const Common::OputStreamPtr&,const Common::String&,const Common::IntByteMap&);
CommonAPI bool __textRead_IntByteMap(const Common::IputStreamPtr&,const Common::String&,Common::IntByteMap&,int = 0);

/** int -> int 映射 */
typedef map<int,int> IntIntMap;
CommonAPI void __write_IntIntMap(const Common::OputStreamPtr&,const Common::IntIntMap&);
CommonAPI void __read_IntIntMap(const Common::IputStreamPtr&,Common::IntIntMap&);
CommonAPI void __textWrite_IntIntMap(const Common::OputStreamPtr&,const Common::String&,const Common::IntIntMap&);
CommonAPI bool __textRead_IntIntMap(const Common::IputStreamPtr&,const Common::String&,Common::IntIntMap&,int = 0);

/** int -> Common.Long 映射 */
typedef map<int,Common::Long> IntLongMap;
CommonAPI void __write_IntLongMap(const Common::OputStreamPtr&,const Common::IntLongMap&);
CommonAPI void __read_IntLongMap(const Common::IputStreamPtr&,Common::IntLongMap&);
CommonAPI void __textWrite_IntLongMap(const Common::OputStreamPtr&,const Common::String&,const Common::IntLongMap&);
CommonAPI bool __textRead_IntLongMap(const Common::IputStreamPtr&,const Common::String&,Common::IntLongMap&,int = 0);

/** int -> Common.String 映射 */
typedef map<int,Common::String> IntStrMap;
CommonAPI void __write_IntStrMap(const Common::OputStreamPtr&,const Common::IntStrMap&);
CommonAPI void __read_IntStrMap(const Common::IputStreamPtr&,Common::IntStrMap&);
CommonAPI void __textWrite_IntStrMap(const Common::OputStreamPtr&,const Common::String&,const Common::IntStrMap&);
CommonAPI bool __textRead_IntStrMap(const Common::IputStreamPtr&,const Common::String&,Common::IntStrMap&,int = 0);

/** int -> Common.Stream 映射 */
typedef map<int,Common::Stream> IntStreamMap;
CommonAPI void __write_IntStreamMap(const Common::OputStreamPtr&,const Common::IntStreamMap&);
CommonAPI void __read_IntStreamMap(const Common::IputStreamPtr&,Common::IntStreamMap&);
CommonAPI void __textWrite_IntStreamMap(const Common::OputStreamPtr&,const Common::String&,const Common::IntStreamMap&);
CommonAPI bool __textRead_IntStreamMap(const Common::IputStreamPtr&,const Common::String&,Common::IntStreamMap&,int = 0);

/** Common.Long -> bool 映射 */
typedef map<Common::Long,bool> LongBoolMap;
CommonAPI void __write_LongBoolMap(const Common::OputStreamPtr&,const Common::LongBoolMap&);
CommonAPI void __read_LongBoolMap(const Common::IputStreamPtr&,Common::LongBoolMap&);
CommonAPI void __textWrite_LongBoolMap(const Common::OputStreamPtr&,const Common::String&,const Common::LongBoolMap&);
CommonAPI bool __textRead_LongBoolMap(const Common::IputStreamPtr&,const Common::String&,Common::LongBoolMap&,int = 0);

/** Common.Long -> unsigned char 映射 */
typedef map<Common::Long,unsigned char> LongByteMap;
CommonAPI void __write_LongByteMap(const Common::OputStreamPtr&,const Common::LongByteMap&);
CommonAPI void __read_LongByteMap(const Common::IputStreamPtr&,Common::LongByteMap&);
CommonAPI void __textWrite_LongByteMap(const Common::OputStreamPtr&,const Common::String&,const Common::LongByteMap&);
CommonAPI bool __textRead_LongByteMap(const Common::IputStreamPtr&,const Common::String&,Common::LongByteMap&,int = 0);

/** Common.Long -> int 映射 */
typedef map<Common::Long,int> LongIntMap;
CommonAPI void __write_LongIntMap(const Common::OputStreamPtr&,const Common::LongIntMap&);
CommonAPI void __read_LongIntMap(const Common::IputStreamPtr&,Common::LongIntMap&);
CommonAPI void __textWrite_LongIntMap(const Common::OputStreamPtr&,const Common::String&,const Common::LongIntMap&);
CommonAPI bool __textRead_LongIntMap(const Common::IputStreamPtr&,const Common::String&,Common::LongIntMap&,int = 0);

/** Common.Long -> Common.Long 映射 */
typedef map<Common::Long,Common::Long> LongLongMap;
CommonAPI void __write_LongLongMap(const Common::OputStreamPtr&,const Common::LongLongMap&);
CommonAPI void __read_LongLongMap(const Common::IputStreamPtr&,Common::LongLongMap&);
CommonAPI void __textWrite_LongLongMap(const Common::OputStreamPtr&,const Common::String&,const Common::LongLongMap&);
CommonAPI bool __textRead_LongLongMap(const Common::IputStreamPtr&,const Common::String&,Common::LongLongMap&,int = 0);

/** Common.Long -> Common.String 映射 */
typedef map<Common::Long,Common::String> LongStrMap;
CommonAPI void __write_LongStrMap(const Common::OputStreamPtr&,const Common::LongStrMap&);
CommonAPI void __read_LongStrMap(const Common::IputStreamPtr&,Common::LongStrMap&);
CommonAPI void __textWrite_LongStrMap(const Common::OputStreamPtr&,const Common::String&,const Common::LongStrMap&);
CommonAPI bool __textRead_LongStrMap(const Common::IputStreamPtr&,const Common::String&,Common::LongStrMap&,int = 0);

/** Common.Long -> Common.Stream 映射 */
typedef map<Common::Long,Common::Stream> LongStreamMap;
CommonAPI void __write_LongStreamMap(const Common::OputStreamPtr&,const Common::LongStreamMap&);
CommonAPI void __read_LongStreamMap(const Common::IputStreamPtr&,Common::LongStreamMap&);
CommonAPI void __textWrite_LongStreamMap(const Common::OputStreamPtr&,const Common::String&,const Common::LongStreamMap&);
CommonAPI bool __textRead_LongStreamMap(const Common::IputStreamPtr&,const Common::String&,Common::LongStreamMap&,int = 0);

/** Common.String -> bool 映射 */
typedef map<Common::String,bool> StrBoolMap;
CommonAPI void __write_StrBoolMap(const Common::OputStreamPtr&,const Common::StrBoolMap&);
CommonAPI void __read_StrBoolMap(const Common::IputStreamPtr&,Common::StrBoolMap&);
CommonAPI void __textWrite_StrBoolMap(const Common::OputStreamPtr&,const Common::String&,const Common::StrBoolMap&);
CommonAPI bool __textRead_StrBoolMap(const Common::IputStreamPtr&,const Common::String&,Common::StrBoolMap&,int = 0);

/** Common.String -> unsigned char 映射 */
typedef map<Common::String,unsigned char> StrByteMap;
CommonAPI void __write_StrByteMap(const Common::OputStreamPtr&,const Common::StrByteMap&);
CommonAPI void __read_StrByteMap(const Common::IputStreamPtr&,Common::StrByteMap&);
CommonAPI void __textWrite_StrByteMap(const Common::OputStreamPtr&,const Common::String&,const Common::StrByteMap&);
CommonAPI bool __textRead_StrByteMap(const Common::IputStreamPtr&,const Common::String&,Common::StrByteMap&,int = 0);

/** Common.String -> int 映射 */
typedef map<Common::String,int> StrIntMap;
CommonAPI void __write_StrIntMap(const Common::OputStreamPtr&,const Common::StrIntMap&);
CommonAPI void __read_StrIntMap(const Common::IputStreamPtr&,Common::StrIntMap&);
CommonAPI void __textWrite_StrIntMap(const Common::OputStreamPtr&,const Common::String&,const Common::StrIntMap&);
CommonAPI bool __textRead_StrIntMap(const Common::IputStreamPtr&,const Common::String&,Common::StrIntMap&,int = 0);

/** Common.String -> Common.Long 映射 */
typedef map<Common::String,Common::Long> StrLongMap;
CommonAPI void __write_StrLongMap(const Common::OputStreamPtr&,const Common::StrLongMap&);
CommonAPI void __read_StrLongMap(const Common::IputStreamPtr&,Common::StrLongMap&);
CommonAPI void __textWrite_StrLongMap(const Common::OputStreamPtr&,const Common::String&,const Common::StrLongMap&);
CommonAPI bool __textRead_StrLongMap(const Common::IputStreamPtr&,const Common::String&,Common::StrLongMap&,int = 0);

/** Common.String -> Common.String 映射 */
typedef map<Common::String,Common::String> StrStrMap;
CommonAPI void __write_StrStrMap(const Common::OputStreamPtr&,const Common::StrStrMap&);
CommonAPI void __read_StrStrMap(const Common::IputStreamPtr&,Common::StrStrMap&);
CommonAPI void __textWrite_StrStrMap(const Common::OputStreamPtr&,const Common::String&,const Common::StrStrMap&);
CommonAPI bool __textRead_StrStrMap(const Common::IputStreamPtr&,const Common::String&,Common::StrStrMap&,int = 0);

/** Common.String -> Common.Stream 映射 */
typedef map<Common::String,Common::Stream> StrStreamMap;
CommonAPI void __write_StrStreamMap(const Common::OputStreamPtr&,const Common::StrStreamMap&);
CommonAPI void __read_StrStreamMap(const Common::IputStreamPtr&,Common::StrStreamMap&);
CommonAPI void __textWrite_StrStreamMap(const Common::OputStreamPtr&,const Common::String&,const Common::StrStreamMap&);
CommonAPI bool __textRead_StrStreamMap(const Common::IputStreamPtr&,const Common::String&,Common::StrStreamMap&,int = 0);

/** Common.String -> Common.StrStrMap 映射 */
typedef map<Common::String,Common::StrStrMap> StrStrStrMap;
CommonAPI void __write_StrStrStrMap(const Common::OputStreamPtr&,const Common::StrStrStrMap&);
CommonAPI void __read_StrStrStrMap(const Common::IputStreamPtr&,Common::StrStrStrMap&);
CommonAPI void __textWrite_StrStrStrMap(const Common::OputStreamPtr&,const Common::String&,const Common::StrStrStrMap&);
CommonAPI bool __textRead_StrStrStrMap(const Common::IputStreamPtr&,const Common::String&,Common::StrStrStrMap&,int = 0);

/** 服务 ID @ingroup objectid */
class CommonAPI ServerId
{
public:
    ServerId();
    ServerId(const Common::String&,const Common::StrVec&);

    bool operator<(const ServerId&) const;
    bool operator==(const ServerId&) const;
    bool operator!=(const ServerId&__obj) const { return !operator==(__obj);}
    void __write(const Common::OputStreamPtr&) const;
    void __read(const Common::IputStreamPtr&);
    void __textWrite(const Common::OputStreamPtr&,const Common::String&) const;
    bool __textRead(const Common::IputStreamPtr&,const Common::String&,int = 0);
public:
    /** 服务 ID */
    Common::String _identity;
    /** 服务类别 */
    Common::StrVec _categorys;
};
CommonAPI void __write_ServerId(const Common::OputStreamPtr&,const Common::ServerId&);
CommonAPI void __read_ServerId(const Common::IputStreamPtr&,Common::ServerId&);
CommonAPI void __textWrite_ServerId(const Common::OputStreamPtr&,const Common::String&,const Common::ServerId&);
CommonAPI bool __textRead_ServerId(const Common::IputStreamPtr&,const Common::String&,Common::ServerId&,int = 0);

/** Endpoint 地址 @ingroup endpoint */
class CommonAPI Endpoint
{
public:
    Endpoint();
    Endpoint(const Common::String&,const Common::String&,int,int,const Common::StrStrMap&);

    bool operator<(const Endpoint&) const;
    bool operator==(const Endpoint&) const;
    bool operator!=(const Endpoint&__obj) const { return !operator==(__obj);}
    void __write(const Common::OputStreamPtr&) const;
    void __read(const Common::IputStreamPtr&);
    void __textWrite(const Common::OputStreamPtr&,const Common::String&) const;
    bool __textRead(const Common::IputStreamPtr&,const Common::String&,int = 0);
public:
    /** 协议 */
    Common::String _protocol;
    /** 地址 */
    Common::String _host;
    /** 端口 */
    int _port;
    /** 启用压缩的数据大小 */
    int _zipSize;
    /** 额外参数 */
    Common::StrStrMap _params;
};
CommonAPI void __write_Endpoint(const Common::OputStreamPtr&,const Common::Endpoint&);
CommonAPI void __read_Endpoint(const Common::IputStreamPtr&,Common::Endpoint&);
CommonAPI void __textWrite_Endpoint(const Common::OputStreamPtr&,const Common::String&,const Common::Endpoint&);
CommonAPI bool __textRead_Endpoint(const Common::IputStreamPtr&,const Common::String&,Common::Endpoint&,int = 0);

/** Endpoint 数组 @ingroup endpoint */
typedef vector<Common::Endpoint> EndpointVec;
CommonAPI void __write_EndpointVec(const Common::OputStreamPtr&,const Common::EndpointVec&);
CommonAPI void __read_EndpointVec(const Common::IputStreamPtr&,Common::EndpointVec&);
CommonAPI void __textWrite_EndpointVec(const Common::OputStreamPtr&,const Common::String&,const Common::EndpointVec&);
CommonAPI bool __textRead_EndpointVec(const Common::IputStreamPtr&,const Common::String&,Common::EndpointVec&);

/** 服务对象 ID @ingroup objectid */
class CommonAPI ObjectId
{
public:
    ObjectId();
    ObjectId(const Common::ServerId&,const Common::String&,const Common::String&,const Common::EndpointVec&);

    bool operator<(const ObjectId&) const;
    bool operator==(const ObjectId&) const;
    bool operator!=(const ObjectId&__obj) const { return !operator==(__obj);}
    void __write(const Common::OputStreamPtr&) const;
    void __read(const Common::IputStreamPtr&);
    void __textWrite(const Common::OputStreamPtr&,const Common::String&) const;
    bool __textRead(const Common::IputStreamPtr&,const Common::String&,int = 0);
public:
    /** 服务 ID */
    Common::ServerId _serverId;
    /** Adapter ID */
    Common::String _adapterId;
    /** Cloud ID */
    Common::String _cloudId;
    /** 服务地址信息 */
    Common::EndpointVec _endpoints;
};
CommonAPI void __write_ObjectId(const Common::OputStreamPtr&,const Common::ObjectId&);
CommonAPI void __read_ObjectId(const Common::IputStreamPtr&,Common::ObjectId&);
CommonAPI void __textWrite_ObjectId(const Common::OputStreamPtr&,const Common::String&,const Common::ObjectId&);
CommonAPI bool __textRead_ObjectId(const Common::IputStreamPtr&,const Common::String&,Common::ObjectId&,int = 0);

class CommonAPI SpanContext
{
public:
    SpanContext();
    SpanContext(const Common::String&,const Common::String&,const Common::String&);

    bool operator<(const SpanContext&) const;
    bool operator==(const SpanContext&) const;
    bool operator!=(const SpanContext&__obj) const { return !operator==(__obj);}
    void __write(const Common::OputStreamPtr&) const;
    void __read(const Common::IputStreamPtr&);
    void __textWrite(const Common::OputStreamPtr&,const Common::String&) const;
    bool __textRead(const Common::IputStreamPtr&,const Common::String&,int = 0);
public:
    Common::String traceId;
    Common::String id;
    Common::String parentId;
};
CommonAPI void __write_SpanContext(const Common::OputStreamPtr&,const Common::SpanContext&);
CommonAPI void __read_SpanContext(const Common::IputStreamPtr&,Common::SpanContext&);
CommonAPI void __textWrite_SpanContext(const Common::OputStreamPtr&,const Common::String&,const Common::SpanContext&);
CommonAPI bool __textRead_SpanContext(const Common::IputStreamPtr&,const Common::String&,Common::SpanContext&,int = 0);

};//namespace: Common

#endif //__Common_TypesPub_h
