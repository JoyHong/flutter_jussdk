//
// *****************************************************************************
// Copyright(c) 2017-2024 Juphoon System Software Co., LTD. All rights reserved.
// *****************************************************************************
//
// Auto generated from: Common.def
// Warning: do not edit this file.
//

#ifndef __Common_CommonServer_h
#define __Common_CommonServer_h

#include "Common/CommonPub.h"

namespace Common
{

class CommonAPI LocatorServer : virtual public Common::ObjectServer
{
public:
    virtual bool __ex(const Common::ServerCallPtr& __call,const Common::String& __cmd,const Common::IputStreamPtr& __iput);

    virtual bool updateAdapter(const Common::ServerCallPtr& __call,const Common::String& aid,const Common::EndpointVec& eps,const Common::StrSet& cats,const Common::StrSet& oids) = 0;
    virtual bool updateDelegate(const Common::ServerCallPtr& __call,const Common::String& aid,const Common::StrSet& cloudIds) = 0;
    virtual bool locateAdapter(const Common::ServerCallPtr& __call,const Common::String& aid,Common::StrVec& eps,int& mainCount) = 0;
    virtual bool locateCategory(const Common::ServerCallPtr& __call,const Common::String& cat,Common::StrVec& eps,Common::StrVec& aids,int& mainCount) = 0;
    virtual bool locateObject(const Common::ServerCallPtr& __call,const Common::String& oid,Common::StrVec& eps,Common::StrVec& aids,int& mainCount) = 0;
    virtual bool broadcastChange(const Common::ServerCallPtr& __call,const Common::StrVec& prefixs,const Common::String& change) = 0;
    virtual bool updateChanges(const Common::ServerCallPtr& __call,const Common::String& name,Common::Long ver,Common::StrSet& changes,Common::Long& updateVer) = 0;

    static void updateAdapter_end(const Common::ServerCallPtr& __call,bool __ret);
    static void updateDelegate_end(const Common::ServerCallPtr& __call,bool __ret);
    static void locateAdapter_end(const Common::ServerCallPtr& __call,bool __ret,const Common::StrVec& eps,int mainCount);
    static void locateCategory_end(const Common::ServerCallPtr& __call,bool __ret,const Common::StrVec& eps,const Common::StrVec& aids,int mainCount);
    static void locateObject_end(const Common::ServerCallPtr& __call,bool __ret,const Common::StrVec& eps,const Common::StrVec& aids,int mainCount);
    static void broadcastChange_end(const Common::ServerCallPtr& __call,bool __ret);
    static void updateChanges_end(const Common::ServerCallPtr& __call,bool __ret,const Common::StrSet& changes,Common::Long updateVer);

    static inline void updateAdapter_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        updateAdapter_end(__call,false);
    }
    static inline void updateDelegate_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        updateDelegate_end(__call,false);
    }
    static inline void locateAdapter_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        locateAdapter_end(__call,false,Common::StrVec(),0);
    }
    static inline void locateCategory_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        locateCategory_end(__call,false,Common::StrVec(),Common::StrVec(),0);
    }
    static inline void locateObject_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        locateObject_end(__call,false,Common::StrVec(),Common::StrVec(),0);
    }
    static inline void broadcastChange_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        broadcastChange_end(__call,false);
    }
    static inline void updateChanges_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        updateChanges_end(__call,false,Common::StrSet(),0);
    }

private:
    void __cmd_updateAdapter(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_updateDelegate(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_locateAdapter(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_locateCategory(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_locateObject(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_broadcastChange(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_updateChanges(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
};

class CommonAPI ConfigServerServer : virtual public Common::ObjectServer
{
public:
    virtual bool __ex(const Common::ServerCallPtr& __call,const Common::String& __cmd,const Common::IputStreamPtr& __iput);

    virtual bool getConfigs(const Common::ServerCallPtr& __call,const Common::String& name,Common::StrStrMap& configs) = 0;

    static void getConfigs_end(const Common::ServerCallPtr& __call,bool __ret,const Common::StrStrMap& configs);

    static inline void getConfigs_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        getConfigs_end(__call,false,Common::StrStrMap());
    }

private:
    void __cmd_getConfigs(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
};

class CommonAPI ResourceServerServer : virtual public Common::ObjectServer
{
public:
    virtual bool __ex(const Common::ServerCallPtr& __call,const Common::String& __cmd,const Common::IputStreamPtr& __iput);

    virtual bool updateResource(const Common::ServerCallPtr& __call,const Common::String& type,const Common::Resource& resource) = 0;
    virtual bool updateResources(const Common::ServerCallPtr& __call,const Common::ResourceMap& resources) = 0;
    virtual bool loadResource(const Common::ServerCallPtr& __call,const Common::String& type,Common::ResourceVec& resources) = 0;
    virtual bool loadResources(const Common::ServerCallPtr& __call,const Common::StrVec& types,Common::TypeResources& typeResources) = 0;
    virtual bool loadResourcesPrefix(const Common::ServerCallPtr& __call,const Common::String& typePrefix,Common::TypeResources& typeResources) = 0;
    virtual bool updateLoadResource(const Common::ServerCallPtr& __call,const Common::String& type,const Common::Resource& resource,Common::ResourceVec& resources) = 0;
    virtual bool updateLoadResourcePrefix(const Common::ServerCallPtr& __call,const Common::String& type,const Common::Resource& resource,const Common::String& typePrefix,Common::TypeResources& typeResources) = 0;
    virtual bool updateResource2(const Common::ServerCallPtr& __call,const Common::String& type,const Common::Resource2& resource) = 0;
    virtual bool updateResources2(const Common::ServerCallPtr& __call,const Common::ResourceMap2& resources) = 0;
    virtual bool loadResource2(const Common::ServerCallPtr& __call,const Common::String& type,Common::ResourceVec2& resources) = 0;
    virtual bool loadResources2(const Common::ServerCallPtr& __call,const Common::StrVec& types,Common::TypeResources2& typeResources) = 0;
    virtual bool loadResourcesPrefix2(const Common::ServerCallPtr& __call,const Common::String& typePrefix,Common::TypeResources2& typeResources) = 0;
    virtual bool updateLoadResource2(const Common::ServerCallPtr& __call,const Common::String& type,const Common::Resource2& resource,Common::ResourceVec2& resources) = 0;
    virtual bool updateLoadResourcePrefix2(const Common::ServerCallPtr& __call,const Common::String& type,const Common::Resource2& resource,const Common::String& typePrefix,Common::TypeResources2& typeResources) = 0;

    static void updateResource_end(const Common::ServerCallPtr& __call,bool __ret);
    static void updateResources_end(const Common::ServerCallPtr& __call,bool __ret);
    static void loadResource_end(const Common::ServerCallPtr& __call,bool __ret,const Common::ResourceVec& resources);
    static void loadResources_end(const Common::ServerCallPtr& __call,bool __ret,const Common::TypeResources& typeResources);
    static void loadResourcesPrefix_end(const Common::ServerCallPtr& __call,bool __ret,const Common::TypeResources& typeResources);
    static void updateLoadResource_end(const Common::ServerCallPtr& __call,bool __ret,const Common::ResourceVec& resources);
    static void updateLoadResourcePrefix_end(const Common::ServerCallPtr& __call,bool __ret,const Common::TypeResources& typeResources);
    static void updateResource2_end(const Common::ServerCallPtr& __call,bool __ret);
    static void updateResources2_end(const Common::ServerCallPtr& __call,bool __ret);
    static void loadResource2_end(const Common::ServerCallPtr& __call,bool __ret,const Common::ResourceVec2& resources);
    static void loadResources2_end(const Common::ServerCallPtr& __call,bool __ret,const Common::TypeResources2& typeResources);
    static void loadResourcesPrefix2_end(const Common::ServerCallPtr& __call,bool __ret,const Common::TypeResources2& typeResources);
    static void updateLoadResource2_end(const Common::ServerCallPtr& __call,bool __ret,const Common::ResourceVec2& resources);
    static void updateLoadResourcePrefix2_end(const Common::ServerCallPtr& __call,bool __ret,const Common::TypeResources2& typeResources);

    static inline void updateResource_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        updateResource_end(__call,false);
    }
    static inline void updateResources_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        updateResources_end(__call,false);
    }
    static inline void loadResource_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        loadResource_end(__call,false,Common::ResourceVec());
    }
    static inline void loadResources_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        loadResources_end(__call,false,Common::TypeResources());
    }
    static inline void loadResourcesPrefix_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        loadResourcesPrefix_end(__call,false,Common::TypeResources());
    }
    static inline void updateLoadResource_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        updateLoadResource_end(__call,false,Common::ResourceVec());
    }
    static inline void updateLoadResourcePrefix_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        updateLoadResourcePrefix_end(__call,false,Common::TypeResources());
    }
    static inline void updateResource2_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        updateResource2_end(__call,false);
    }
    static inline void updateResources2_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        updateResources2_end(__call,false);
    }
    static inline void loadResource2_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        loadResource2_end(__call,false,Common::ResourceVec2());
    }
    static inline void loadResources2_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        loadResources2_end(__call,false,Common::TypeResources2());
    }
    static inline void loadResourcesPrefix2_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        loadResourcesPrefix2_end(__call,false,Common::TypeResources2());
    }
    static inline void updateLoadResource2_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        updateLoadResource2_end(__call,false,Common::ResourceVec2());
    }
    static inline void updateLoadResourcePrefix2_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        updateLoadResourcePrefix2_end(__call,false,Common::TypeResources2());
    }

private:
    void __cmd_updateResource(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_updateResources(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_loadResource(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_loadResources(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_loadResourcesPrefix(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_updateLoadResource(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_updateLoadResourcePrefix(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_updateResource2(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_updateResources2(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_loadResource2(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_loadResources2(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_loadResourcesPrefix2(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_updateLoadResource2(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_updateLoadResourcePrefix2(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
};

class CommonAPI DistanceServerServer : virtual public Common::ObjectServer
{
public:
    virtual bool __ex(const Common::ServerCallPtr& __call,const Common::String& __cmd,const Common::IputStreamPtr& __iput);

    virtual bool sortDists(const Common::ServerCallPtr& __call,const Common::String& srcHost,double srcLongitude,double srcLatitude,const Common::StrVec& dstHosts,Common::IntVec& dstDists,Common::IntVec& sortIdxs) = 0;

    static void sortDists_end(const Common::ServerCallPtr& __call,bool __ret,const Common::IntVec& dstDists,const Common::IntVec& sortIdxs);

    static inline void sortDists_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        sortDists_end(__call,false,Common::IntVec(),Common::IntVec());
    }

private:
    void __cmd_sortDists(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
};

class CommonAPI LogServerServer : virtual public Common::ObjectServer
{
public:
    virtual bool __ex(const Common::ServerCallPtr& __call,const Common::String& __cmd,const Common::IputStreamPtr& __iput);

    virtual void logs_begin(const Common::ServerCallPtr& __call,const Common::String& app,const Common::LogMessages& msgs) = 0;
    virtual void logsWithKeys_begin(const Common::ServerCallPtr& __call,const Common::String& app,const Common::LogKeyMsgs& keyMsgs) = 0;
    virtual void logRecord_begin(const Common::ServerCallPtr& __call,const Common::String& app,const Common::LogServiceRecords& records) = 0;

    static void logs_end(const Common::ServerCallPtr& __call,bool __ret);
    static void logsWithKeys_end(const Common::ServerCallPtr& __call,bool __ret);
    static void logRecord_end(const Common::ServerCallPtr& __call,bool __ret);

    static inline void logs_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        logs_end(__call,false);
    }
    static inline void logsWithKeys_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        logsWithKeys_end(__call,false);
    }
    static inline void logRecord_end(const Common::ServerCallPtr &__call,const Common::CallError &error)
    {
        __call->setError(error);
        logRecord_end(__call,false);
    }

private:
    void __cmd_logs(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_logsWithKeys(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
    void __cmd_logRecord(const Common::ServerCallPtr& __call,const Common::IputStreamPtr& __iput);
};

};//namespace: Common

#endif //__Common_CommonServer_h
