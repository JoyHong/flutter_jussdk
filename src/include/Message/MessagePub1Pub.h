//
// *****************************************************************************
// Copyright(c) 2017-2022 Juphoon System Software Co., LTD. All rights reserved.
// *****************************************************************************
//
// Auto generated from: MessagePub1.def
// Warning: do not edit this file.
//

#ifndef __Message_MessagePub1Pub_h
#define __Message_MessagePub1Pub_h

#include "Common/Common.h"
#include "Common/TypesPub.h"
#include "Status/StatusPub1Pub.h"

namespace Message
{

class MsgContent
{
public:
    MsgContent();
    MsgContent(const Common::String&,const Common::String&,const Common::StrStreamMap&,const Common::StrStrMap&);

    bool operator<(const MsgContent&) const;
    bool operator==(const MsgContent&) const;
    bool operator!=(const MsgContent&__obj) const { return !operator==(__obj);}
    void __write(const Common::OputStreamPtr&) const;
    void __read(const Common::IputStreamPtr&);
    void __textWrite(const Common::OputStreamPtr&,const Common::String&) const;
    bool __textRead(const Common::IputStreamPtr&,const Common::String&,int = 0);
public:
    Common::String _type;
    /* 消息类型 (sdk约定 'Text' 或者 'Info.xxx',有哪些xxx由集成sdk的上层决定) */
    Common::String _body;
    /* 消息体 (sdk约定 一条json, json内容由上层决定) */
    Common::StrStreamMap _ress;
    /* 小的附件的内容,如缩略图 */
    Common::StrStrMap _params;
};
void __write_MsgContent(const Common::OputStreamPtr&,const Message::MsgContent&);
void __read_MsgContent(const Common::IputStreamPtr&,Message::MsgContent&);
void __textWrite_MsgContent(const Common::OputStreamPtr&,const Common::String&,const Message::MsgContent&);
bool __textRead_MsgContent(const Common::IputStreamPtr&,const Common::String&,Message::MsgContent&,int = 0);

class Msg
{
public:
    Msg();
    Msg(Common::Long,Common::Long,const Common::String&,const Message::MsgContent&);

    bool operator<(const Msg&) const;
    bool operator==(const Msg&) const;
    bool operator!=(const Msg&__obj) const { return !operator==(__obj);}
    void __write(const Common::OputStreamPtr&) const;
    void __read(const Common::IputStreamPtr&);
    void __textWrite(const Common::OputStreamPtr&,const Common::String&) const;
    bool __textRead(const Common::IputStreamPtr&,const Common::String&,int = 0);
public:
    Common::Long _msgIdx;
    /* -1==INVALID_MSG_IDX, ref to MessagePublic.h */
    Common::Long _time;
    /* generated by db, ms */
    Common::String _sender;
    Message::MsgContent _content;
};
void __write_Msg(const Common::OputStreamPtr&,const Message::Msg&);
void __read_Msg(const Common::IputStreamPtr&,Message::Msg&);
void __textWrite_Msg(const Common::OputStreamPtr&,const Common::String&,const Message::Msg&);
bool __textRead_Msg(const Common::IputStreamPtr&,const Common::String&,Message::Msg&,int = 0);

typedef vector<Message::Msg> SortedMsgs;
void __write_SortedMsgs(const Common::OputStreamPtr&,const Message::SortedMsgs&);
void __read_SortedMsgs(const Common::IputStreamPtr&,Message::SortedMsgs&);
void __textWrite_SortedMsgs(const Common::OputStreamPtr&,const Common::String&,const Message::SortedMsgs&);
bool __textRead_SortedMsgs(const Common::IputStreamPtr&,const Common::String&,Message::SortedMsgs&);

typedef map<Common::String,Message::SortedMsgs> SortedMsgss;
void __write_SortedMsgss(const Common::OputStreamPtr&,const Message::SortedMsgss&);
void __read_SortedMsgss(const Common::IputStreamPtr&,Message::SortedMsgss&);
void __textWrite_SortedMsgss(const Common::OputStreamPtr&,const Common::String&,const Message::SortedMsgss&);
bool __textRead_SortedMsgss(const Common::IputStreamPtr&,const Common::String&,Message::SortedMsgss&,int = 0);

};//namespace: Message

#endif //__Message_MessagePub1Pub_h
