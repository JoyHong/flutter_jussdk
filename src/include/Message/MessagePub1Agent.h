//
// *****************************************************************************
// Copyright(c) 2017-2022 Juphoon System Software Co., LTD. All rights reserved.
// *****************************************************************************
//
// Auto generated from: MessagePub1.def
// Warning: do not edit this file.
//

#ifndef __Message_MessagePub1Agent_h
#define __Message_MessagePub1Agent_h

#include "Message/MessagePub1Pub.h"

namespace Message
{

class MessageAgent : public Common::Agent
{
public:
    MessageAgent(int zero = 0) : Common::Agent(zero) {}
    MessageAgent(const Common::Agent& agent) : Common::Agent(agent) {}
    MessageAgent(const Common::ObjectAgentPtr& agent) : Common::Agent(agent) {}

    /* box:  boxType/identity, 
       identity: userId/orgId/... 
    */
    bool send(const Common::String& box,const Message::MsgContent& content,const Common::StrStrMap& sendParams,Common::Long& msgIdx,const Common::CallParamsPtr& __params = 0) const throw();
    void send_begin(const Common::AgentAsyncPtr& __async,const Common::String& box,const Message::MsgContent& content,const Common::StrStrMap& sendParams,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool send_end(int __rslt,const Common::IputStreamPtr& __iput,Common::Long& msgIdx) throw();

    // obsolete
    /** 用户发送消息, obsolete
     *
     * @param[in]   box             会话id, 暂时只支持 'P2P/recver_uid' 或者 'Org/orgId'
     * @param[in]   content         消息内容
     * @param[in]   notifyParams    额外push参数,参见终端注册push参数
     * @param[out]  msgIdx          消息在会话内的idx,从0开始,递增
     * @param[out]  time            消息发送的服务器时间
     * @retval      true            成功
     * @retval      false           失败
    */
    bool userSend(const Common::String& box,const Message::MsgContent& content,const Common::StrStrMap& notifyParams,Common::Long& msgIdx,Common::Long& time,const Common::CallParamsPtr& __params = 0) const throw();
    void userSend_begin(const Common::AgentAsyncPtr& __async,const Common::String& box,const Message::MsgContent& content,const Common::StrStrMap& notifyParams,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool userSend_end(int __rslt,const Common::IputStreamPtr& __iput,Common::Long& msgIdx,Common::Long& time) throw();

    bool clientSend(const Common::String& box,const Message::MsgContent& content,const Common::StrStrMap& notifyParams,Common::Long& msgIdx,Common::Long& time,Common::StrStrMap& outParams,const Common::CallParamsPtr& __params = 0) const throw();
    void clientSend_begin(const Common::AgentAsyncPtr& __async,const Common::String& box,const Message::MsgContent& content,const Common::StrStrMap& notifyParams,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool clientSend_end(int __rslt,const Common::IputStreamPtr& __iput,Common::Long& msgIdx,Common::Long& time,Common::StrStrMap& outParams) throw();

    /* startMsgIdx: -1, from first unread */
    bool recv(const Common::String& box,Common::Long startMsgIdx,int count,Message::SortedMsgs& msgs,const Common::CallParamsPtr& __params = 0) const throw();
    void recv_begin(const Common::AgentAsyncPtr& __async,const Common::String& box,Common::Long startMsgIdx,int count,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool recv_end(int __rslt,const Common::IputStreamPtr& __iput,Message::SortedMsgs& msgs) throw();

    bool setRead(const Common::String& box,Common::Long msgIdx,const Common::CallParamsPtr& __params = 0) const throw();
    void setRead_begin(const Common::AgentAsyncPtr& __async,const Common::String& box,Common::Long msgIdx,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool setRead_end(int __rslt,const Common::IputStreamPtr& __iput) throw();

    // 1_to_1 im
    bool fetchPeerPubKeys(const Common::String& peerUid,Status::StatusTimes& pubKeys,const Common::CallParamsPtr& __params = 0) const throw();
    void fetchPeerPubKeys_begin(const Common::AgentAsyncPtr& __async,const Common::String& peerUid,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool fetchPeerPubKeys_end(int __rslt,const Common::IputStreamPtr& __iput,Status::StatusTimes& pubKeys) throw();
};

/* groupId -> SortedMsgs */
/* #MessageDb[.region] */
class MessageDbAgent : public Common::Agent
{
public:
    MessageDbAgent(int zero = 0) : Common::Agent(zero) {}
    MessageDbAgent(const Common::Agent& agent) : Common::Agent(agent) {}
    MessageDbAgent(const Common::ObjectAgentPtr& agent) : Common::Agent(agent) {}

    bool batchRecv(const Common::StrLongMap& groupIds,Message::SortedMsgss& msgss,const Common::CallParamsPtr& __params = 0) const throw();
    void batchRecv_begin(const Common::AgentAsyncPtr& __async,const Common::StrLongMap& groupIds,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool batchRecv_end(int __rslt,const Common::IputStreamPtr& __iput,Message::SortedMsgss& msgss) throw();
};

};//namespace: Message

#endif //__Message_MessagePub1Agent_h
