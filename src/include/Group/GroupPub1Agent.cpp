//
// *****************************************************************************
// Copyright(c) 2017-2022 Juphoon System Software Co., LTD. All rights reserved.
// *****************************************************************************
//
// Auto generated from: GroupPub1.def
// Warning: do not edit this file.
//

#include "Group/GroupPub1Agent.h"

namespace Group
{

bool GroupServerAgent::createOrganize(const Group::RelationsMap& relations,const Common::StrStrMap& orgProps,Common::String& orgId,Group::Relation& orgRelation,Common::Long& lastUpdateTime,Common::Long& updateTime,const Common::CallParamsPtr& __params) const throw()
{
    try
    {
        int __loop = 0;
        while (1)
        {
            Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
            Common::VerListPtr __vers = __agent->verList("createOrganize.GroupServer.Group");
            short __ver = 0;
            if (__vers)
            {
                __ver = __vers->ver(true);
                if (__ver > 0) __ver = 0;
            }
            switch (__ver)
            {
            case 0:
                __oput->write((short)1);
                __oput->write((short)__ver);
                Group::__write_RelationsMap(__oput,relations);
                Common::__write_StrStrMap(__oput,orgProps);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("createOrganize.GroupServer.Group"));
            }
            Common::IputStreamPtr __iput;
            Common::CallError __error;
            int __rslt = __agent->ex_sync("createOrganize.GroupServer.Group",__oput,__iput,__params,__error);
            if (__rslt == -1)
                throw Common::CallException(__error);
            if (__rslt>>16)
            {
                Assert((__rslt>>16) == VersionException);
                __loop ++;
                if (__loop >= 3)
                    throw Common::CallException(Common::ObjectAgent::versionError("createOrganize.GroupServer.Group"));
                continue;
            }
            bool __ret;
            switch (__rslt)
            {
            case 0:
                __iput->read(__ret);
                __iput->read(orgId);
                Group::__read_Relation(__iput,orgRelation);
                __iput->read(lastUpdateTime);
                __iput->read(updateTime);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("createOrganize.GroupServer.Group"));
            }
            Common::ObjectAgent::processFinal(__iput);
            return __ret;
        }
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

void GroupServerAgent::createOrganize_begin(const Common::AgentAsyncPtr& __async,const Group::RelationsMap& relations,const Common::StrStrMap& orgProps,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata) const throw()
{
    class __AgentAsync : public Common::AgentAsync
    {
    public:
        __AgentAsync(const Common::ObjectAgentPtr& __agent,const Common::AgentAsyncPtr& __async,const Group::RelationsMap& relations,const Common::StrStrMap& orgProps,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata)
            : x__agent(__agent),x__async(__async),x_relations(relations),x_orgProps(orgProps),x__params(__params),x__userdata(__userdata),x__loop(0) {}

        void start()
        {
            Common::AgentAsyncPtr pthis = this;
            try
            {
                Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
                Common::VerListPtr __vers = x__agent->verList("createOrganize.GroupServer.Group");
                short __ver = 0;
                if (__vers)
                {
                    __ver = __vers->ver(true);
                    if (__ver > 0) __ver = 0;
                }
                switch (__ver)
                {
                case 0:
                    __oput->write((short)1);
                    __oput->write((short)__ver);
                    Group::__write_RelationsMap(__oput,x_relations);
                    Common::__write_StrStrMap(__oput,x_orgProps);
                    break;
                default:
                    throw Common::CallException(Common::ObjectAgent::versionError("createOrganize.GroupServer.Group"));
                }
                x__agent->ex_async(this,"createOrganize.GroupServer.Group",__oput,x__params,0);
            }
            catch (const Common::CallException& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
            catch (const Common::Exception& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
        }
        void cmdResult(int __rslt,const Common::IputStreamPtr& __iput,const Common::ObjectPtr& __userdata)
        {
            if ((__rslt>>16)!=VersionException)
            {
                if (x__async) x__async->cmdResult(__rslt,__iput,x__userdata);
                return;
            }
            x__loop ++;
            if (x__loop >= 3)
            {
                if (x__async)
                    Common::ObjectAgent::throwException(x__async, Common::CallException(Common::ObjectAgent::versionError("createOrganize.GroupServer.Group")), x__userdata);
                return;
            }
            start();
        }
    private:
        Common::ObjectAgentPtr x__agent;
        Common::AgentAsyncPtr x__async;
        Group::RelationsMap x_relations;
        Common::StrStrMap x_orgProps;
        Common::CallParamsPtr x__params;
        Common::ObjectPtr x__userdata;
        int x__loop;
    };
    (new __AgentAsync(__agent,__async,relations,orgProps,__params,__userdata))->start();
}

bool GroupServerAgent::createOrganize_end(int __rslt,const Common::IputStreamPtr& __iput,Common::String& orgId,Group::Relation& orgRelation,Common::Long& lastUpdateTime,Common::Long& updateTime) throw()
{
    try
    {
        Common::CallError __error;
        if (Common::ObjectAgent::processException(__rslt,__iput,__error))
            throw Common::CallException(__error);
        Assert((__rslt>>16) == 0);
        bool __ret;
        switch (__rslt)
        {
        case 0:
            __iput->read(__ret);
            __iput->read(orgId);
            Group::__read_Relation(__iput,orgRelation);
            __iput->read(lastUpdateTime);
            __iput->read(updateTime);
            break;
        default:
            throw Common::CallException(Common::ObjectAgent::versionError("createOrganize.GroupServer.Group"));
        }
        Common::ObjectAgent::processFinal(__iput);
        return __ret;
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

bool GroupServerAgent::createOrg(const Group::RelationsMap& relations,const Common::StrStrMap& orgProps,Common::String& orgId,Common::Long& lastUpdateTime,Common::Long& updateTime,const Common::CallParamsPtr& __params) const throw()
{
    try
    {
        int __loop = 0;
        while (1)
        {
            Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
            Common::VerListPtr __vers = __agent->verList("createOrg.GroupServer.Group");
            short __ver = 0;
            if (__vers)
            {
                __ver = __vers->ver(true);
                if (__ver > 0) __ver = 0;
            }
            switch (__ver)
            {
            case 0:
                __oput->write((short)1);
                __oput->write((short)__ver);
                Group::__write_RelationsMap(__oput,relations);
                Common::__write_StrStrMap(__oput,orgProps);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("createOrg.GroupServer.Group"));
            }
            Common::IputStreamPtr __iput;
            Common::CallError __error;
            int __rslt = __agent->ex_sync("createOrg.GroupServer.Group",__oput,__iput,__params,__error);
            if (__rslt == -1)
                throw Common::CallException(__error);
            if (__rslt>>16)
            {
                Assert((__rslt>>16) == VersionException);
                __loop ++;
                if (__loop >= 3)
                    throw Common::CallException(Common::ObjectAgent::versionError("createOrg.GroupServer.Group"));
                continue;
            }
            bool __ret;
            switch (__rslt)
            {
            case 0:
                __iput->read(__ret);
                __iput->read(orgId);
                __iput->read(lastUpdateTime);
                __iput->read(updateTime);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("createOrg.GroupServer.Group"));
            }
            Common::ObjectAgent::processFinal(__iput);
            return __ret;
        }
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

void GroupServerAgent::createOrg_begin(const Common::AgentAsyncPtr& __async,const Group::RelationsMap& relations,const Common::StrStrMap& orgProps,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata) const throw()
{
    class __AgentAsync : public Common::AgentAsync
    {
    public:
        __AgentAsync(const Common::ObjectAgentPtr& __agent,const Common::AgentAsyncPtr& __async,const Group::RelationsMap& relations,const Common::StrStrMap& orgProps,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata)
            : x__agent(__agent),x__async(__async),x_relations(relations),x_orgProps(orgProps),x__params(__params),x__userdata(__userdata),x__loop(0) {}

        void start()
        {
            Common::AgentAsyncPtr pthis = this;
            try
            {
                Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
                Common::VerListPtr __vers = x__agent->verList("createOrg.GroupServer.Group");
                short __ver = 0;
                if (__vers)
                {
                    __ver = __vers->ver(true);
                    if (__ver > 0) __ver = 0;
                }
                switch (__ver)
                {
                case 0:
                    __oput->write((short)1);
                    __oput->write((short)__ver);
                    Group::__write_RelationsMap(__oput,x_relations);
                    Common::__write_StrStrMap(__oput,x_orgProps);
                    break;
                default:
                    throw Common::CallException(Common::ObjectAgent::versionError("createOrg.GroupServer.Group"));
                }
                x__agent->ex_async(this,"createOrg.GroupServer.Group",__oput,x__params,0);
            }
            catch (const Common::CallException& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
            catch (const Common::Exception& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
        }
        void cmdResult(int __rslt,const Common::IputStreamPtr& __iput,const Common::ObjectPtr& __userdata)
        {
            if ((__rslt>>16)!=VersionException)
            {
                if (x__async) x__async->cmdResult(__rslt,__iput,x__userdata);
                return;
            }
            x__loop ++;
            if (x__loop >= 3)
            {
                if (x__async)
                    Common::ObjectAgent::throwException(x__async, Common::CallException(Common::ObjectAgent::versionError("createOrg.GroupServer.Group")), x__userdata);
                return;
            }
            start();
        }
    private:
        Common::ObjectAgentPtr x__agent;
        Common::AgentAsyncPtr x__async;
        Group::RelationsMap x_relations;
        Common::StrStrMap x_orgProps;
        Common::CallParamsPtr x__params;
        Common::ObjectPtr x__userdata;
        int x__loop;
    };
    (new __AgentAsync(__agent,__async,relations,orgProps,__params,__userdata))->start();
}

bool GroupServerAgent::createOrg_end(int __rslt,const Common::IputStreamPtr& __iput,Common::String& orgId,Common::Long& lastUpdateTime,Common::Long& updateTime) throw()
{
    try
    {
        Common::CallError __error;
        if (Common::ObjectAgent::processException(__rslt,__iput,__error))
            throw Common::CallException(__error);
        Assert((__rslt>>16) == 0);
        bool __ret;
        switch (__rslt)
        {
        case 0:
            __iput->read(__ret);
            __iput->read(orgId);
            __iput->read(lastUpdateTime);
            __iput->read(updateTime);
            break;
        default:
            throw Common::CallException(Common::ObjectAgent::versionError("createOrg.GroupServer.Group"));
        }
        Common::ObjectAgent::processFinal(__iput);
        return __ret;
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

bool GroupServerAgent::disbandOrganize(const Common::String& orgId,Common::Long& lastUpdateTime,Common::Long& updateTime,const Common::CallParamsPtr& __params) const throw()
{
    try
    {
        int __loop = 0;
        while (1)
        {
            Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
            Common::VerListPtr __vers = __agent->verList("disbandOrganize.GroupServer.Group");
            short __ver = 0;
            if (__vers)
            {
                __ver = __vers->ver(true);
                if (__ver > 0) __ver = 0;
            }
            switch (__ver)
            {
            case 0:
                __oput->write((short)1);
                __oput->write((short)__ver);
                __oput->write(orgId);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("disbandOrganize.GroupServer.Group"));
            }
            Common::IputStreamPtr __iput;
            Common::CallError __error;
            int __rslt = __agent->ex_sync("disbandOrganize.GroupServer.Group",__oput,__iput,__params,__error);
            if (__rslt == -1)
                throw Common::CallException(__error);
            if (__rslt>>16)
            {
                Assert((__rslt>>16) == VersionException);
                __loop ++;
                if (__loop >= 3)
                    throw Common::CallException(Common::ObjectAgent::versionError("disbandOrganize.GroupServer.Group"));
                continue;
            }
            bool __ret;
            switch (__rslt)
            {
            case 0:
                __iput->read(__ret);
                __iput->read(lastUpdateTime);
                __iput->read(updateTime);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("disbandOrganize.GroupServer.Group"));
            }
            Common::ObjectAgent::processFinal(__iput);
            return __ret;
        }
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

void GroupServerAgent::disbandOrganize_begin(const Common::AgentAsyncPtr& __async,const Common::String& orgId,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata) const throw()
{
    class __AgentAsync : public Common::AgentAsync
    {
    public:
        __AgentAsync(const Common::ObjectAgentPtr& __agent,const Common::AgentAsyncPtr& __async,const Common::String& orgId,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata)
            : x__agent(__agent),x__async(__async),x_orgId(orgId),x__params(__params),x__userdata(__userdata),x__loop(0) {}

        void start()
        {
            Common::AgentAsyncPtr pthis = this;
            try
            {
                Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
                Common::VerListPtr __vers = x__agent->verList("disbandOrganize.GroupServer.Group");
                short __ver = 0;
                if (__vers)
                {
                    __ver = __vers->ver(true);
                    if (__ver > 0) __ver = 0;
                }
                switch (__ver)
                {
                case 0:
                    __oput->write((short)1);
                    __oput->write((short)__ver);
                    __oput->write(x_orgId);
                    break;
                default:
                    throw Common::CallException(Common::ObjectAgent::versionError("disbandOrganize.GroupServer.Group"));
                }
                x__agent->ex_async(this,"disbandOrganize.GroupServer.Group",__oput,x__params,0);
            }
            catch (const Common::CallException& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
            catch (const Common::Exception& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
        }
        void cmdResult(int __rslt,const Common::IputStreamPtr& __iput,const Common::ObjectPtr& __userdata)
        {
            if ((__rslt>>16)!=VersionException)
            {
                if (x__async) x__async->cmdResult(__rslt,__iput,x__userdata);
                return;
            }
            x__loop ++;
            if (x__loop >= 3)
            {
                if (x__async)
                    Common::ObjectAgent::throwException(x__async, Common::CallException(Common::ObjectAgent::versionError("disbandOrganize.GroupServer.Group")), x__userdata);
                return;
            }
            start();
        }
    private:
        Common::ObjectAgentPtr x__agent;
        Common::AgentAsyncPtr x__async;
        Common::String x_orgId;
        Common::CallParamsPtr x__params;
        Common::ObjectPtr x__userdata;
        int x__loop;
    };
    (new __AgentAsync(__agent,__async,orgId,__params,__userdata))->start();
}

bool GroupServerAgent::disbandOrganize_end(int __rslt,const Common::IputStreamPtr& __iput,Common::Long& lastUpdateTime,Common::Long& updateTime) throw()
{
    try
    {
        Common::CallError __error;
        if (Common::ObjectAgent::processException(__rslt,__iput,__error))
            throw Common::CallException(__error);
        Assert((__rslt>>16) == 0);
        bool __ret;
        switch (__rslt)
        {
        case 0:
            __iput->read(__ret);
            __iput->read(lastUpdateTime);
            __iput->read(updateTime);
            break;
        default:
            throw Common::CallException(Common::ObjectAgent::versionError("disbandOrganize.GroupServer.Group"));
        }
        Common::ObjectAgent::processFinal(__iput);
        return __ret;
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

bool GroupServerAgent::getRelations2(const Common::String& groupId,Common::Long baseUpdateTime,bool& diffFromBase,Group::RelationsMap& totalOrAdded,Group::RelationsMap& changed,Common::StrSet& removed,Common::Long& updateTime,const Common::CallParamsPtr& __params) const throw()
{
    try
    {
        int __loop = 0;
        while (1)
        {
            Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
            Common::VerListPtr __vers = __agent->verList("getRelations2.GroupServer.Group");
            short __ver = 0;
            if (__vers)
            {
                __ver = __vers->ver(true);
                if (__ver > 0) __ver = 0;
            }
            switch (__ver)
            {
            case 0:
                __oput->write((short)1);
                __oput->write((short)__ver);
                __oput->write(groupId);
                __oput->write(baseUpdateTime);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("getRelations2.GroupServer.Group"));
            }
            Common::IputStreamPtr __iput;
            Common::CallError __error;
            int __rslt = __agent->ex_sync("getRelations2.GroupServer.Group",__oput,__iput,__params,__error);
            if (__rslt == -1)
                throw Common::CallException(__error);
            if (__rslt>>16)
            {
                Assert((__rslt>>16) == VersionException);
                __loop ++;
                if (__loop >= 3)
                    throw Common::CallException(Common::ObjectAgent::versionError("getRelations2.GroupServer.Group"));
                continue;
            }
            bool __ret;
            switch (__rslt)
            {
            case 0:
                __iput->read(__ret);
                __iput->read(diffFromBase);
                Group::__read_RelationsMap(__iput,totalOrAdded);
                Group::__read_RelationsMap(__iput,changed);
                Common::__read_StrSet(__iput,removed);
                __iput->read(updateTime);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("getRelations2.GroupServer.Group"));
            }
            Common::ObjectAgent::processFinal(__iput);
            return __ret;
        }
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

void GroupServerAgent::getRelations2_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,Common::Long baseUpdateTime,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata) const throw()
{
    class __AgentAsync : public Common::AgentAsync
    {
    public:
        __AgentAsync(const Common::ObjectAgentPtr& __agent,const Common::AgentAsyncPtr& __async,const Common::String& groupId,Common::Long baseUpdateTime,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata)
            : x__agent(__agent),x__async(__async),x_groupId(groupId),x_baseUpdateTime(baseUpdateTime),x__params(__params),x__userdata(__userdata),x__loop(0) {}

        void start()
        {
            Common::AgentAsyncPtr pthis = this;
            try
            {
                Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
                Common::VerListPtr __vers = x__agent->verList("getRelations2.GroupServer.Group");
                short __ver = 0;
                if (__vers)
                {
                    __ver = __vers->ver(true);
                    if (__ver > 0) __ver = 0;
                }
                switch (__ver)
                {
                case 0:
                    __oput->write((short)1);
                    __oput->write((short)__ver);
                    __oput->write(x_groupId);
                    __oput->write(x_baseUpdateTime);
                    break;
                default:
                    throw Common::CallException(Common::ObjectAgent::versionError("getRelations2.GroupServer.Group"));
                }
                x__agent->ex_async(this,"getRelations2.GroupServer.Group",__oput,x__params,0);
            }
            catch (const Common::CallException& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
            catch (const Common::Exception& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
        }
        void cmdResult(int __rslt,const Common::IputStreamPtr& __iput,const Common::ObjectPtr& __userdata)
        {
            if ((__rslt>>16)!=VersionException)
            {
                if (x__async) x__async->cmdResult(__rslt,__iput,x__userdata);
                return;
            }
            x__loop ++;
            if (x__loop >= 3)
            {
                if (x__async)
                    Common::ObjectAgent::throwException(x__async, Common::CallException(Common::ObjectAgent::versionError("getRelations2.GroupServer.Group")), x__userdata);
                return;
            }
            start();
        }
    private:
        Common::ObjectAgentPtr x__agent;
        Common::AgentAsyncPtr x__async;
        Common::String x_groupId;
        Common::Long x_baseUpdateTime;
        Common::CallParamsPtr x__params;
        Common::ObjectPtr x__userdata;
        int x__loop;
    };
    (new __AgentAsync(__agent,__async,groupId,baseUpdateTime,__params,__userdata))->start();
}

bool GroupServerAgent::getRelations2_end(int __rslt,const Common::IputStreamPtr& __iput,bool& diffFromBase,Group::RelationsMap& totalOrAdded,Group::RelationsMap& changed,Common::StrSet& removed,Common::Long& updateTime) throw()
{
    try
    {
        Common::CallError __error;
        if (Common::ObjectAgent::processException(__rslt,__iput,__error))
            throw Common::CallException(__error);
        Assert((__rslt>>16) == 0);
        bool __ret;
        switch (__rslt)
        {
        case 0:
            __iput->read(__ret);
            __iput->read(diffFromBase);
            Group::__read_RelationsMap(__iput,totalOrAdded);
            Group::__read_RelationsMap(__iput,changed);
            Common::__read_StrSet(__iput,removed);
            __iput->read(updateTime);
            break;
        default:
            throw Common::CallException(Common::ObjectAgent::versionError("getRelations2.GroupServer.Group"));
        }
        Common::ObjectAgent::processFinal(__iput);
        return __ret;
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

bool GroupServerAgent::setRelations(const Common::String& groupId,const Group::RelationsMap& added,const Group::RelationsMap& changed,const Common::StrBoolMap& removed,Common::Long& lastUpdateTime,Common::Long& updateTime,const Common::CallParamsPtr& __params) const throw()
{
    try
    {
        int __loop = 0;
        while (1)
        {
            Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
            Common::VerListPtr __vers = __agent->verList("setRelations.GroupServer.Group");
            short __ver = 0;
            if (__vers)
            {
                __ver = __vers->ver(true);
                if (__ver > 0) __ver = 0;
            }
            switch (__ver)
            {
            case 0:
                __oput->write((short)1);
                __oput->write((short)__ver);
                __oput->write(groupId);
                Group::__write_RelationsMap(__oput,added);
                Group::__write_RelationsMap(__oput,changed);
                Common::__write_StrBoolMap(__oput,removed);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("setRelations.GroupServer.Group"));
            }
            Common::IputStreamPtr __iput;
            Common::CallError __error;
            int __rslt = __agent->ex_sync("setRelations.GroupServer.Group",__oput,__iput,__params,__error);
            if (__rslt == -1)
                throw Common::CallException(__error);
            if (__rslt>>16)
            {
                Assert((__rslt>>16) == VersionException);
                __loop ++;
                if (__loop >= 3)
                    throw Common::CallException(Common::ObjectAgent::versionError("setRelations.GroupServer.Group"));
                continue;
            }
            bool __ret;
            switch (__rslt)
            {
            case 0:
                __iput->read(__ret);
                __iput->read(lastUpdateTime);
                __iput->read(updateTime);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("setRelations.GroupServer.Group"));
            }
            Common::ObjectAgent::processFinal(__iput);
            return __ret;
        }
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

void GroupServerAgent::setRelations_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Group::RelationsMap& added,const Group::RelationsMap& changed,const Common::StrBoolMap& removed,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata) const throw()
{
    class __AgentAsync : public Common::AgentAsync
    {
    public:
        __AgentAsync(const Common::ObjectAgentPtr& __agent,const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Group::RelationsMap& added,const Group::RelationsMap& changed,const Common::StrBoolMap& removed,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata)
            : x__agent(__agent),x__async(__async),x_groupId(groupId),x_added(added),x_changed(changed),x_removed(removed),x__params(__params),x__userdata(__userdata),x__loop(0) {}

        void start()
        {
            Common::AgentAsyncPtr pthis = this;
            try
            {
                Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
                Common::VerListPtr __vers = x__agent->verList("setRelations.GroupServer.Group");
                short __ver = 0;
                if (__vers)
                {
                    __ver = __vers->ver(true);
                    if (__ver > 0) __ver = 0;
                }
                switch (__ver)
                {
                case 0:
                    __oput->write((short)1);
                    __oput->write((short)__ver);
                    __oput->write(x_groupId);
                    Group::__write_RelationsMap(__oput,x_added);
                    Group::__write_RelationsMap(__oput,x_changed);
                    Common::__write_StrBoolMap(__oput,x_removed);
                    break;
                default:
                    throw Common::CallException(Common::ObjectAgent::versionError("setRelations.GroupServer.Group"));
                }
                x__agent->ex_async(this,"setRelations.GroupServer.Group",__oput,x__params,0);
            }
            catch (const Common::CallException& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
            catch (const Common::Exception& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
        }
        void cmdResult(int __rslt,const Common::IputStreamPtr& __iput,const Common::ObjectPtr& __userdata)
        {
            if ((__rslt>>16)!=VersionException)
            {
                if (x__async) x__async->cmdResult(__rslt,__iput,x__userdata);
                return;
            }
            x__loop ++;
            if (x__loop >= 3)
            {
                if (x__async)
                    Common::ObjectAgent::throwException(x__async, Common::CallException(Common::ObjectAgent::versionError("setRelations.GroupServer.Group")), x__userdata);
                return;
            }
            start();
        }
    private:
        Common::ObjectAgentPtr x__agent;
        Common::AgentAsyncPtr x__async;
        Common::String x_groupId;
        Group::RelationsMap x_added;
        Group::RelationsMap x_changed;
        Common::StrBoolMap x_removed;
        Common::CallParamsPtr x__params;
        Common::ObjectPtr x__userdata;
        int x__loop;
    };
    (new __AgentAsync(__agent,__async,groupId,added,changed,removed,__params,__userdata))->start();
}

bool GroupServerAgent::setRelations_end(int __rslt,const Common::IputStreamPtr& __iput,Common::Long& lastUpdateTime,Common::Long& updateTime) throw()
{
    try
    {
        Common::CallError __error;
        if (Common::ObjectAgent::processException(__rslt,__iput,__error))
            throw Common::CallException(__error);
        Assert((__rslt>>16) == 0);
        bool __ret;
        switch (__rslt)
        {
        case 0:
            __iput->read(__ret);
            __iput->read(lastUpdateTime);
            __iput->read(updateTime);
            break;
        default:
            throw Common::CallException(Common::ObjectAgent::versionError("setRelations.GroupServer.Group"));
        }
        Common::ObjectAgent::processFinal(__iput);
        return __ret;
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

bool GroupServerAgent::setSelfCfg(const Common::String& targetId,const Common::String& key,const Common::String& value,Common::Long& lastUpdateTime,Common::Long& updateTime,const Common::CallParamsPtr& __params) const throw()
{
    try
    {
        int __loop = 0;
        while (1)
        {
            Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
            Common::VerListPtr __vers = __agent->verList("setSelfCfg.GroupServer.Group");
            short __ver = 0;
            if (__vers)
            {
                __ver = __vers->ver(true);
                if (__ver > 0) __ver = 0;
            }
            switch (__ver)
            {
            case 0:
                __oput->write((short)1);
                __oput->write((short)__ver);
                __oput->write(targetId);
                __oput->write(key);
                __oput->write(value);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("setSelfCfg.GroupServer.Group"));
            }
            Common::IputStreamPtr __iput;
            Common::CallError __error;
            int __rslt = __agent->ex_sync("setSelfCfg.GroupServer.Group",__oput,__iput,__params,__error);
            if (__rslt == -1)
                throw Common::CallException(__error);
            if (__rslt>>16)
            {
                Assert((__rslt>>16) == VersionException);
                __loop ++;
                if (__loop >= 3)
                    throw Common::CallException(Common::ObjectAgent::versionError("setSelfCfg.GroupServer.Group"));
                continue;
            }
            bool __ret;
            switch (__rslt)
            {
            case 0:
                __iput->read(__ret);
                __iput->read(lastUpdateTime);
                __iput->read(updateTime);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("setSelfCfg.GroupServer.Group"));
            }
            Common::ObjectAgent::processFinal(__iput);
            return __ret;
        }
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

void GroupServerAgent::setSelfCfg_begin(const Common::AgentAsyncPtr& __async,const Common::String& targetId,const Common::String& key,const Common::String& value,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata) const throw()
{
    class __AgentAsync : public Common::AgentAsync
    {
    public:
        __AgentAsync(const Common::ObjectAgentPtr& __agent,const Common::AgentAsyncPtr& __async,const Common::String& targetId,const Common::String& key,const Common::String& value,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata)
            : x__agent(__agent),x__async(__async),x_targetId(targetId),x_key(key),x_value(value),x__params(__params),x__userdata(__userdata),x__loop(0) {}

        void start()
        {
            Common::AgentAsyncPtr pthis = this;
            try
            {
                Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
                Common::VerListPtr __vers = x__agent->verList("setSelfCfg.GroupServer.Group");
                short __ver = 0;
                if (__vers)
                {
                    __ver = __vers->ver(true);
                    if (__ver > 0) __ver = 0;
                }
                switch (__ver)
                {
                case 0:
                    __oput->write((short)1);
                    __oput->write((short)__ver);
                    __oput->write(x_targetId);
                    __oput->write(x_key);
                    __oput->write(x_value);
                    break;
                default:
                    throw Common::CallException(Common::ObjectAgent::versionError("setSelfCfg.GroupServer.Group"));
                }
                x__agent->ex_async(this,"setSelfCfg.GroupServer.Group",__oput,x__params,0);
            }
            catch (const Common::CallException& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
            catch (const Common::Exception& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
        }
        void cmdResult(int __rslt,const Common::IputStreamPtr& __iput,const Common::ObjectPtr& __userdata)
        {
            if ((__rslt>>16)!=VersionException)
            {
                if (x__async) x__async->cmdResult(__rslt,__iput,x__userdata);
                return;
            }
            x__loop ++;
            if (x__loop >= 3)
            {
                if (x__async)
                    Common::ObjectAgent::throwException(x__async, Common::CallException(Common::ObjectAgent::versionError("setSelfCfg.GroupServer.Group")), x__userdata);
                return;
            }
            start();
        }
    private:
        Common::ObjectAgentPtr x__agent;
        Common::AgentAsyncPtr x__async;
        Common::String x_targetId;
        Common::String x_key;
        Common::String x_value;
        Common::CallParamsPtr x__params;
        Common::ObjectPtr x__userdata;
        int x__loop;
    };
    (new __AgentAsync(__agent,__async,targetId,key,value,__params,__userdata))->start();
}

bool GroupServerAgent::setSelfCfg_end(int __rslt,const Common::IputStreamPtr& __iput,Common::Long& lastUpdateTime,Common::Long& updateTime) throw()
{
    try
    {
        Common::CallError __error;
        if (Common::ObjectAgent::processException(__rslt,__iput,__error))
            throw Common::CallException(__error);
        Assert((__rslt>>16) == 0);
        bool __ret;
        switch (__rslt)
        {
        case 0:
            __iput->read(__ret);
            __iput->read(lastUpdateTime);
            __iput->read(updateTime);
            break;
        default:
            throw Common::CallException(Common::ObjectAgent::versionError("setSelfCfg.GroupServer.Group"));
        }
        Common::ObjectAgent::processFinal(__iput);
        return __ret;
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

bool GroupServerAgent::setRels(const Common::String& groupId,const Group::RelationsMap& added,const Group::RelationsMap& changed,const Common::StrLongMap& removed,Common::Long& lastUpdateTime,Common::Long& updateTime,Status::StatusVersMap& addedStatuses,const Common::CallParamsPtr& __params) const throw()
{
    try
    {
        int __loop = 0;
        while (1)
        {
            Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
            Common::VerListPtr __vers = __agent->verList("setRels.GroupServer.Group");
            short __ver = 0;
            if (__vers)
            {
                __ver = __vers->ver(true);
                if (__ver > 0) __ver = 0;
            }
            switch (__ver)
            {
            case 0:
                __oput->write((short)1);
                __oput->write((short)__ver);
                __oput->write(groupId);
                Group::__write_RelationsMap(__oput,added);
                Group::__write_RelationsMap(__oput,changed);
                Common::__write_StrLongMap(__oput,removed);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("setRels.GroupServer.Group"));
            }
            Common::IputStreamPtr __iput;
            Common::CallError __error;
            int __rslt = __agent->ex_sync("setRels.GroupServer.Group",__oput,__iput,__params,__error);
            if (__rslt == -1)
                throw Common::CallException(__error);
            if (__rslt>>16)
            {
                Assert((__rslt>>16) == VersionException);
                __loop ++;
                if (__loop >= 3)
                    throw Common::CallException(Common::ObjectAgent::versionError("setRels.GroupServer.Group"));
                continue;
            }
            bool __ret;
            switch (__rslt)
            {
            case 0:
                __iput->read(__ret);
                __iput->read(lastUpdateTime);
                __iput->read(updateTime);
                Status::__read_StatusVersMap(__iput,addedStatuses);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("setRels.GroupServer.Group"));
            }
            Common::ObjectAgent::processFinal(__iput);
            return __ret;
        }
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

void GroupServerAgent::setRels_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Group::RelationsMap& added,const Group::RelationsMap& changed,const Common::StrLongMap& removed,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata) const throw()
{
    class __AgentAsync : public Common::AgentAsync
    {
    public:
        __AgentAsync(const Common::ObjectAgentPtr& __agent,const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Group::RelationsMap& added,const Group::RelationsMap& changed,const Common::StrLongMap& removed,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata)
            : x__agent(__agent),x__async(__async),x_groupId(groupId),x_added(added),x_changed(changed),x_removed(removed),x__params(__params),x__userdata(__userdata),x__loop(0) {}

        void start()
        {
            Common::AgentAsyncPtr pthis = this;
            try
            {
                Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
                Common::VerListPtr __vers = x__agent->verList("setRels.GroupServer.Group");
                short __ver = 0;
                if (__vers)
                {
                    __ver = __vers->ver(true);
                    if (__ver > 0) __ver = 0;
                }
                switch (__ver)
                {
                case 0:
                    __oput->write((short)1);
                    __oput->write((short)__ver);
                    __oput->write(x_groupId);
                    Group::__write_RelationsMap(__oput,x_added);
                    Group::__write_RelationsMap(__oput,x_changed);
                    Common::__write_StrLongMap(__oput,x_removed);
                    break;
                default:
                    throw Common::CallException(Common::ObjectAgent::versionError("setRels.GroupServer.Group"));
                }
                x__agent->ex_async(this,"setRels.GroupServer.Group",__oput,x__params,0);
            }
            catch (const Common::CallException& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
            catch (const Common::Exception& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
        }
        void cmdResult(int __rslt,const Common::IputStreamPtr& __iput,const Common::ObjectPtr& __userdata)
        {
            if ((__rslt>>16)!=VersionException)
            {
                if (x__async) x__async->cmdResult(__rslt,__iput,x__userdata);
                return;
            }
            x__loop ++;
            if (x__loop >= 3)
            {
                if (x__async)
                    Common::ObjectAgent::throwException(x__async, Common::CallException(Common::ObjectAgent::versionError("setRels.GroupServer.Group")), x__userdata);
                return;
            }
            start();
        }
    private:
        Common::ObjectAgentPtr x__agent;
        Common::AgentAsyncPtr x__async;
        Common::String x_groupId;
        Group::RelationsMap x_added;
        Group::RelationsMap x_changed;
        Common::StrLongMap x_removed;
        Common::CallParamsPtr x__params;
        Common::ObjectPtr x__userdata;
        int x__loop;
    };
    (new __AgentAsync(__agent,__async,groupId,added,changed,removed,__params,__userdata))->start();
}

bool GroupServerAgent::setRels_end(int __rslt,const Common::IputStreamPtr& __iput,Common::Long& lastUpdateTime,Common::Long& updateTime,Status::StatusVersMap& addedStatuses) throw()
{
    try
    {
        Common::CallError __error;
        if (Common::ObjectAgent::processException(__rslt,__iput,__error))
            throw Common::CallException(__error);
        Assert((__rslt>>16) == 0);
        bool __ret;
        switch (__rslt)
        {
        case 0:
            __iput->read(__ret);
            __iput->read(lastUpdateTime);
            __iput->read(updateTime);
            Status::__read_StatusVersMap(__iput,addedStatuses);
            break;
        default:
            throw Common::CallException(Common::ObjectAgent::versionError("setRels.GroupServer.Group"));
        }
        Common::ObjectAgent::processFinal(__iput);
        return __ret;
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

bool GroupServerAgent::checkRelation(const Common::String& userId,Group::RelationType& relationType,const Common::CallParamsPtr& __params) const throw()
{
    try
    {
        int __loop = 0;
        while (1)
        {
            Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
            Common::VerListPtr __vers = __agent->verList("checkRelation.GroupServer.Group");
            short __ver = 0;
            if (__vers)
            {
                __ver = __vers->ver(true);
                if (__ver > 0) __ver = 0;
            }
            switch (__ver)
            {
            case 0:
                __oput->write((short)1);
                __oput->write((short)__ver);
                __oput->write(userId);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("checkRelation.GroupServer.Group"));
            }
            Common::IputStreamPtr __iput;
            Common::CallError __error;
            int __rslt = __agent->ex_sync("checkRelation.GroupServer.Group",__oput,__iput,__params,__error);
            if (__rslt == -1)
                throw Common::CallException(__error);
            if (__rslt>>16)
            {
                Assert((__rslt>>16) == VersionException);
                __loop ++;
                if (__loop >= 3)
                    throw Common::CallException(Common::ObjectAgent::versionError("checkRelation.GroupServer.Group"));
                continue;
            }
            bool __ret;
            switch (__rslt)
            {
            case 0:
                __iput->read(__ret);
                __iput->read((int&)relationType);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("checkRelation.GroupServer.Group"));
            }
            Common::ObjectAgent::processFinal(__iput);
            return __ret;
        }
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

void GroupServerAgent::checkRelation_begin(const Common::AgentAsyncPtr& __async,const Common::String& userId,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata) const throw()
{
    class __AgentAsync : public Common::AgentAsync
    {
    public:
        __AgentAsync(const Common::ObjectAgentPtr& __agent,const Common::AgentAsyncPtr& __async,const Common::String& userId,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata)
            : x__agent(__agent),x__async(__async),x_userId(userId),x__params(__params),x__userdata(__userdata),x__loop(0) {}

        void start()
        {
            Common::AgentAsyncPtr pthis = this;
            try
            {
                Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
                Common::VerListPtr __vers = x__agent->verList("checkRelation.GroupServer.Group");
                short __ver = 0;
                if (__vers)
                {
                    __ver = __vers->ver(true);
                    if (__ver > 0) __ver = 0;
                }
                switch (__ver)
                {
                case 0:
                    __oput->write((short)1);
                    __oput->write((short)__ver);
                    __oput->write(x_userId);
                    break;
                default:
                    throw Common::CallException(Common::ObjectAgent::versionError("checkRelation.GroupServer.Group"));
                }
                x__agent->ex_async(this,"checkRelation.GroupServer.Group",__oput,x__params,0);
            }
            catch (const Common::CallException& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
            catch (const Common::Exception& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
        }
        void cmdResult(int __rslt,const Common::IputStreamPtr& __iput,const Common::ObjectPtr& __userdata)
        {
            if ((__rslt>>16)!=VersionException)
            {
                if (x__async) x__async->cmdResult(__rslt,__iput,x__userdata);
                return;
            }
            x__loop ++;
            if (x__loop >= 3)
            {
                if (x__async)
                    Common::ObjectAgent::throwException(x__async, Common::CallException(Common::ObjectAgent::versionError("checkRelation.GroupServer.Group")), x__userdata);
                return;
            }
            start();
        }
    private:
        Common::ObjectAgentPtr x__agent;
        Common::AgentAsyncPtr x__async;
        Common::String x_userId;
        Common::CallParamsPtr x__params;
        Common::ObjectPtr x__userdata;
        int x__loop;
    };
    (new __AgentAsync(__agent,__async,userId,__params,__userdata))->start();
}

bool GroupServerAgent::checkRelation_end(int __rslt,const Common::IputStreamPtr& __iput,Group::RelationType& relationType) throw()
{
    try
    {
        Common::CallError __error;
        if (Common::ObjectAgent::processException(__rslt,__iput,__error))
            throw Common::CallException(__error);
        Assert((__rslt>>16) == 0);
        bool __ret;
        switch (__rslt)
        {
        case 0:
            __iput->read(__ret);
            __iput->read((int&)relationType);
            break;
        default:
            throw Common::CallException(Common::ObjectAgent::versionError("checkRelation.GroupServer.Group"));
        }
        Common::ObjectAgent::processFinal(__iput);
        return __ret;
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

bool GroupServerAgent::applyRelation(const Common::String& groupId,const Common::String& targetId,Group::RelationType targetType,const Common::String& desc,const Group::Relation& syncRelation,const Common::StrStrMap& inParams,const Common::CallParamsPtr& __params) const throw()
{
    try
    {
        int __loop = 0;
        while (1)
        {
            Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
            Common::VerListPtr __vers = __agent->verList("applyRelation.GroupServer.Group");
            short __ver = 0;
            if (__vers)
            {
                __ver = __vers->ver(true);
                if (__ver > 0) __ver = 0;
            }
            switch (__ver)
            {
            case 0:
                __oput->write((short)1);
                __oput->write((short)__ver);
                __oput->write(groupId);
                __oput->write(targetId);
                __oput->write((int)targetType);
                __oput->write(desc);
                Group::__write_Relation(__oput,syncRelation);
                Common::__write_StrStrMap(__oput,inParams);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("applyRelation.GroupServer.Group"));
            }
            Common::IputStreamPtr __iput;
            Common::CallError __error;
            int __rslt = __agent->ex_sync("applyRelation.GroupServer.Group",__oput,__iput,__params,__error);
            if (__rslt == -1)
                throw Common::CallException(__error);
            if (__rslt>>16)
            {
                Assert((__rslt>>16) == VersionException);
                __loop ++;
                if (__loop >= 3)
                    throw Common::CallException(Common::ObjectAgent::versionError("applyRelation.GroupServer.Group"));
                continue;
            }
            bool __ret;
            switch (__rslt)
            {
            case 0:
                __iput->read(__ret);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("applyRelation.GroupServer.Group"));
            }
            Common::ObjectAgent::processFinal(__iput);
            return __ret;
        }
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

void GroupServerAgent::applyRelation_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Common::String& targetId,Group::RelationType targetType,const Common::String& desc,const Group::Relation& syncRelation,const Common::StrStrMap& inParams,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata) const throw()
{
    class __AgentAsync : public Common::AgentAsync
    {
    public:
        __AgentAsync(const Common::ObjectAgentPtr& __agent,const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Common::String& targetId,Group::RelationType targetType,const Common::String& desc,const Group::Relation& syncRelation,const Common::StrStrMap& inParams,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata)
            : x__agent(__agent),x__async(__async),x_groupId(groupId),x_targetId(targetId),x_targetType(targetType),x_desc(desc),x_syncRelation(syncRelation),x_inParams(inParams),x__params(__params),x__userdata(__userdata),x__loop(0) {}

        void start()
        {
            Common::AgentAsyncPtr pthis = this;
            try
            {
                Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
                Common::VerListPtr __vers = x__agent->verList("applyRelation.GroupServer.Group");
                short __ver = 0;
                if (__vers)
                {
                    __ver = __vers->ver(true);
                    if (__ver > 0) __ver = 0;
                }
                switch (__ver)
                {
                case 0:
                    __oput->write((short)1);
                    __oput->write((short)__ver);
                    __oput->write(x_groupId);
                    __oput->write(x_targetId);
                    __oput->write((int)x_targetType);
                    __oput->write(x_desc);
                    Group::__write_Relation(__oput,x_syncRelation);
                    Common::__write_StrStrMap(__oput,x_inParams);
                    break;
                default:
                    throw Common::CallException(Common::ObjectAgent::versionError("applyRelation.GroupServer.Group"));
                }
                x__agent->ex_async(this,"applyRelation.GroupServer.Group",__oput,x__params,0);
            }
            catch (const Common::CallException& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
            catch (const Common::Exception& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
        }
        void cmdResult(int __rslt,const Common::IputStreamPtr& __iput,const Common::ObjectPtr& __userdata)
        {
            if ((__rslt>>16)!=VersionException)
            {
                if (x__async) x__async->cmdResult(__rslt,__iput,x__userdata);
                return;
            }
            x__loop ++;
            if (x__loop >= 3)
            {
                if (x__async)
                    Common::ObjectAgent::throwException(x__async, Common::CallException(Common::ObjectAgent::versionError("applyRelation.GroupServer.Group")), x__userdata);
                return;
            }
            start();
        }
    private:
        Common::ObjectAgentPtr x__agent;
        Common::AgentAsyncPtr x__async;
        Common::String x_groupId;
        Common::String x_targetId;
        Group::RelationType x_targetType;
        Common::String x_desc;
        Group::Relation x_syncRelation;
        Common::StrStrMap x_inParams;
        Common::CallParamsPtr x__params;
        Common::ObjectPtr x__userdata;
        int x__loop;
    };
    (new __AgentAsync(__agent,__async,groupId,targetId,targetType,desc,syncRelation,inParams,__params,__userdata))->start();
}

bool GroupServerAgent::applyRelation_end(int __rslt,const Common::IputStreamPtr& __iput) throw()
{
    try
    {
        Common::CallError __error;
        if (Common::ObjectAgent::processException(__rslt,__iput,__error))
            throw Common::CallException(__error);
        Assert((__rslt>>16) == 0);
        bool __ret;
        switch (__rslt)
        {
        case 0:
            __iput->read(__ret);
            break;
        default:
            throw Common::CallException(Common::ObjectAgent::versionError("applyRelation.GroupServer.Group"));
        }
        Common::ObjectAgent::processFinal(__iput);
        return __ret;
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

bool GroupServerAgent::acceptRelation(Common::Long msgIdx,const Common::String& targetTagName,const Common::String& targetTag,const Common::StrStrMap& targetCfgs,const Common::StrStrMap& inParams,const Common::CallParamsPtr& __params) const throw()
{
    try
    {
        int __loop = 0;
        while (1)
        {
            Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
            Common::VerListPtr __vers = __agent->verList("acceptRelation.GroupServer.Group");
            short __ver = 0;
            if (__vers)
            {
                __ver = __vers->ver(true);
                if (__ver > 0) __ver = 0;
            }
            switch (__ver)
            {
            case 0:
                __oput->write((short)1);
                __oput->write((short)__ver);
                __oput->write(msgIdx);
                __oput->write(targetTagName);
                __oput->write(targetTag);
                Common::__write_StrStrMap(__oput,targetCfgs);
                Common::__write_StrStrMap(__oput,inParams);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("acceptRelation.GroupServer.Group"));
            }
            Common::IputStreamPtr __iput;
            Common::CallError __error;
            int __rslt = __agent->ex_sync("acceptRelation.GroupServer.Group",__oput,__iput,__params,__error);
            if (__rslt == -1)
                throw Common::CallException(__error);
            if (__rslt>>16)
            {
                Assert((__rslt>>16) == VersionException);
                __loop ++;
                if (__loop >= 3)
                    throw Common::CallException(Common::ObjectAgent::versionError("acceptRelation.GroupServer.Group"));
                continue;
            }
            bool __ret;
            switch (__rslt)
            {
            case 0:
                __iput->read(__ret);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("acceptRelation.GroupServer.Group"));
            }
            Common::ObjectAgent::processFinal(__iput);
            return __ret;
        }
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

void GroupServerAgent::acceptRelation_begin(const Common::AgentAsyncPtr& __async,Common::Long msgIdx,const Common::String& targetTagName,const Common::String& targetTag,const Common::StrStrMap& targetCfgs,const Common::StrStrMap& inParams,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata) const throw()
{
    class __AgentAsync : public Common::AgentAsync
    {
    public:
        __AgentAsync(const Common::ObjectAgentPtr& __agent,const Common::AgentAsyncPtr& __async,Common::Long msgIdx,const Common::String& targetTagName,const Common::String& targetTag,const Common::StrStrMap& targetCfgs,const Common::StrStrMap& inParams,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata)
            : x__agent(__agent),x__async(__async),x_msgIdx(msgIdx),x_targetTagName(targetTagName),x_targetTag(targetTag),x_targetCfgs(targetCfgs),x_inParams(inParams),x__params(__params),x__userdata(__userdata),x__loop(0) {}

        void start()
        {
            Common::AgentAsyncPtr pthis = this;
            try
            {
                Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
                Common::VerListPtr __vers = x__agent->verList("acceptRelation.GroupServer.Group");
                short __ver = 0;
                if (__vers)
                {
                    __ver = __vers->ver(true);
                    if (__ver > 0) __ver = 0;
                }
                switch (__ver)
                {
                case 0:
                    __oput->write((short)1);
                    __oput->write((short)__ver);
                    __oput->write(x_msgIdx);
                    __oput->write(x_targetTagName);
                    __oput->write(x_targetTag);
                    Common::__write_StrStrMap(__oput,x_targetCfgs);
                    Common::__write_StrStrMap(__oput,x_inParams);
                    break;
                default:
                    throw Common::CallException(Common::ObjectAgent::versionError("acceptRelation.GroupServer.Group"));
                }
                x__agent->ex_async(this,"acceptRelation.GroupServer.Group",__oput,x__params,0);
            }
            catch (const Common::CallException& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
            catch (const Common::Exception& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
        }
        void cmdResult(int __rslt,const Common::IputStreamPtr& __iput,const Common::ObjectPtr& __userdata)
        {
            if ((__rslt>>16)!=VersionException)
            {
                if (x__async) x__async->cmdResult(__rslt,__iput,x__userdata);
                return;
            }
            x__loop ++;
            if (x__loop >= 3)
            {
                if (x__async)
                    Common::ObjectAgent::throwException(x__async, Common::CallException(Common::ObjectAgent::versionError("acceptRelation.GroupServer.Group")), x__userdata);
                return;
            }
            start();
        }
    private:
        Common::ObjectAgentPtr x__agent;
        Common::AgentAsyncPtr x__async;
        Common::Long x_msgIdx;
        Common::String x_targetTagName;
        Common::String x_targetTag;
        Common::StrStrMap x_targetCfgs;
        Common::StrStrMap x_inParams;
        Common::CallParamsPtr x__params;
        Common::ObjectPtr x__userdata;
        int x__loop;
    };
    (new __AgentAsync(__agent,__async,msgIdx,targetTagName,targetTag,targetCfgs,inParams,__params,__userdata))->start();
}

bool GroupServerAgent::acceptRelation_end(int __rslt,const Common::IputStreamPtr& __iput) throw()
{
    try
    {
        Common::CallError __error;
        if (Common::ObjectAgent::processException(__rslt,__iput,__error))
            throw Common::CallException(__error);
        Assert((__rslt>>16) == 0);
        bool __ret;
        switch (__rslt)
        {
        case 0:
            __iput->read(__ret);
            break;
        default:
            throw Common::CallException(Common::ObjectAgent::versionError("acceptRelation.GroupServer.Group"));
        }
        Common::ObjectAgent::processFinal(__iput);
        return __ret;
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

bool GroupServerAgent::setProps(const Common::String& groupId,const Common::StrStrMap& props,const Common::CallParamsPtr& __params) const throw()
{
    try
    {
        int __loop = 0;
        while (1)
        {
            Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
            Common::VerListPtr __vers = __agent->verList("setProps.GroupServer.Group");
            short __ver = 0;
            if (__vers)
            {
                __ver = __vers->ver(true);
                if (__ver > 0) __ver = 0;
            }
            switch (__ver)
            {
            case 0:
                __oput->write((short)1);
                __oput->write((short)__ver);
                __oput->write(groupId);
                Common::__write_StrStrMap(__oput,props);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("setProps.GroupServer.Group"));
            }
            Common::IputStreamPtr __iput;
            Common::CallError __error;
            int __rslt = __agent->ex_sync("setProps.GroupServer.Group",__oput,__iput,__params,__error);
            if (__rslt == -1)
                throw Common::CallException(__error);
            if (__rslt>>16)
            {
                Assert((__rslt>>16) == VersionException);
                __loop ++;
                if (__loop >= 3)
                    throw Common::CallException(Common::ObjectAgent::versionError("setProps.GroupServer.Group"));
                continue;
            }
            bool __ret;
            switch (__rslt)
            {
            case 0:
                __iput->read(__ret);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("setProps.GroupServer.Group"));
            }
            Common::ObjectAgent::processFinal(__iput);
            return __ret;
        }
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

void GroupServerAgent::setProps_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Common::StrStrMap& props,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata) const throw()
{
    class __AgentAsync : public Common::AgentAsync
    {
    public:
        __AgentAsync(const Common::ObjectAgentPtr& __agent,const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Common::StrStrMap& props,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata)
            : x__agent(__agent),x__async(__async),x_groupId(groupId),x_props(props),x__params(__params),x__userdata(__userdata),x__loop(0) {}

        void start()
        {
            Common::AgentAsyncPtr pthis = this;
            try
            {
                Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
                Common::VerListPtr __vers = x__agent->verList("setProps.GroupServer.Group");
                short __ver = 0;
                if (__vers)
                {
                    __ver = __vers->ver(true);
                    if (__ver > 0) __ver = 0;
                }
                switch (__ver)
                {
                case 0:
                    __oput->write((short)1);
                    __oput->write((short)__ver);
                    __oput->write(x_groupId);
                    Common::__write_StrStrMap(__oput,x_props);
                    break;
                default:
                    throw Common::CallException(Common::ObjectAgent::versionError("setProps.GroupServer.Group"));
                }
                x__agent->ex_async(this,"setProps.GroupServer.Group",__oput,x__params,0);
            }
            catch (const Common::CallException& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
            catch (const Common::Exception& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
        }
        void cmdResult(int __rslt,const Common::IputStreamPtr& __iput,const Common::ObjectPtr& __userdata)
        {
            if ((__rslt>>16)!=VersionException)
            {
                if (x__async) x__async->cmdResult(__rslt,__iput,x__userdata);
                return;
            }
            x__loop ++;
            if (x__loop >= 3)
            {
                if (x__async)
                    Common::ObjectAgent::throwException(x__async, Common::CallException(Common::ObjectAgent::versionError("setProps.GroupServer.Group")), x__userdata);
                return;
            }
            start();
        }
    private:
        Common::ObjectAgentPtr x__agent;
        Common::AgentAsyncPtr x__async;
        Common::String x_groupId;
        Common::StrStrMap x_props;
        Common::CallParamsPtr x__params;
        Common::ObjectPtr x__userdata;
        int x__loop;
    };
    (new __AgentAsync(__agent,__async,groupId,props,__params,__userdata))->start();
}

bool GroupServerAgent::setProps_end(int __rslt,const Common::IputStreamPtr& __iput) throw()
{
    try
    {
        Common::CallError __error;
        if (Common::ObjectAgent::processException(__rslt,__iput,__error))
            throw Common::CallException(__error);
        Assert((__rslt>>16) == 0);
        bool __ret;
        switch (__rslt)
        {
        case 0:
            __iput->read(__ret);
            break;
        default:
            throw Common::CallException(Common::ObjectAgent::versionError("setProps.GroupServer.Group"));
        }
        Common::ObjectAgent::processFinal(__iput);
        return __ret;
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

bool GroupServerAgent::getPropsPrefixs(const Common::String& groupId,const Common::StrSet& prefixs,Common::StrStrMap& props,const Common::CallParamsPtr& __params) const throw()
{
    try
    {
        int __loop = 0;
        while (1)
        {
            Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
            Common::VerListPtr __vers = __agent->verList("getPropsPrefixs.GroupServer.Group");
            short __ver = 0;
            if (__vers)
            {
                __ver = __vers->ver(true);
                if (__ver > 0) __ver = 0;
            }
            switch (__ver)
            {
            case 0:
                __oput->write((short)1);
                __oput->write((short)__ver);
                __oput->write(groupId);
                Common::__write_StrSet(__oput,prefixs);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("getPropsPrefixs.GroupServer.Group"));
            }
            Common::IputStreamPtr __iput;
            Common::CallError __error;
            int __rslt = __agent->ex_sync("getPropsPrefixs.GroupServer.Group",__oput,__iput,__params,__error);
            if (__rslt == -1)
                throw Common::CallException(__error);
            if (__rslt>>16)
            {
                Assert((__rslt>>16) == VersionException);
                __loop ++;
                if (__loop >= 3)
                    throw Common::CallException(Common::ObjectAgent::versionError("getPropsPrefixs.GroupServer.Group"));
                continue;
            }
            bool __ret;
            switch (__rslt)
            {
            case 0:
                __iput->read(__ret);
                Common::__read_StrStrMap(__iput,props);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("getPropsPrefixs.GroupServer.Group"));
            }
            Common::ObjectAgent::processFinal(__iput);
            return __ret;
        }
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

void GroupServerAgent::getPropsPrefixs_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Common::StrSet& prefixs,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata) const throw()
{
    class __AgentAsync : public Common::AgentAsync
    {
    public:
        __AgentAsync(const Common::ObjectAgentPtr& __agent,const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Common::StrSet& prefixs,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata)
            : x__agent(__agent),x__async(__async),x_groupId(groupId),x_prefixs(prefixs),x__params(__params),x__userdata(__userdata),x__loop(0) {}

        void start()
        {
            Common::AgentAsyncPtr pthis = this;
            try
            {
                Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
                Common::VerListPtr __vers = x__agent->verList("getPropsPrefixs.GroupServer.Group");
                short __ver = 0;
                if (__vers)
                {
                    __ver = __vers->ver(true);
                    if (__ver > 0) __ver = 0;
                }
                switch (__ver)
                {
                case 0:
                    __oput->write((short)1);
                    __oput->write((short)__ver);
                    __oput->write(x_groupId);
                    Common::__write_StrSet(__oput,x_prefixs);
                    break;
                default:
                    throw Common::CallException(Common::ObjectAgent::versionError("getPropsPrefixs.GroupServer.Group"));
                }
                x__agent->ex_async(this,"getPropsPrefixs.GroupServer.Group",__oput,x__params,0);
            }
            catch (const Common::CallException& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
            catch (const Common::Exception& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
        }
        void cmdResult(int __rslt,const Common::IputStreamPtr& __iput,const Common::ObjectPtr& __userdata)
        {
            if ((__rslt>>16)!=VersionException)
            {
                if (x__async) x__async->cmdResult(__rslt,__iput,x__userdata);
                return;
            }
            x__loop ++;
            if (x__loop >= 3)
            {
                if (x__async)
                    Common::ObjectAgent::throwException(x__async, Common::CallException(Common::ObjectAgent::versionError("getPropsPrefixs.GroupServer.Group")), x__userdata);
                return;
            }
            start();
        }
    private:
        Common::ObjectAgentPtr x__agent;
        Common::AgentAsyncPtr x__async;
        Common::String x_groupId;
        Common::StrSet x_prefixs;
        Common::CallParamsPtr x__params;
        Common::ObjectPtr x__userdata;
        int x__loop;
    };
    (new __AgentAsync(__agent,__async,groupId,prefixs,__params,__userdata))->start();
}

bool GroupServerAgent::getPropsPrefixs_end(int __rslt,const Common::IputStreamPtr& __iput,Common::StrStrMap& props) throw()
{
    try
    {
        Common::CallError __error;
        if (Common::ObjectAgent::processException(__rslt,__iput,__error))
            throw Common::CallException(__error);
        Assert((__rslt>>16) == 0);
        bool __ret;
        switch (__rslt)
        {
        case 0:
            __iput->read(__ret);
            Common::__read_StrStrMap(__iput,props);
            break;
        default:
            throw Common::CallException(Common::ObjectAgent::versionError("getPropsPrefixs.GroupServer.Group"));
        }
        Common::ObjectAgent::processFinal(__iput);
        return __ret;
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

bool GroupServerAgent::setStatus(const Common::String& groupId,const Common::String& targetId,const Common::String& type,const Common::String& value,Common::Long timeStamp,const Common::CallParamsPtr& __params) const throw()
{
    try
    {
        int __loop = 0;
        while (1)
        {
            Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
            Common::VerListPtr __vers = __agent->verList("setStatus.GroupServer.Group");
            short __ver = 0;
            if (__vers)
            {
                __ver = __vers->ver(true);
                if (__ver > 0) __ver = 0;
            }
            switch (__ver)
            {
            case 0:
                __oput->write((short)1);
                __oput->write((short)__ver);
                __oput->write(groupId);
                __oput->write(targetId);
                __oput->write(type);
                __oput->write(value);
                __oput->write(timeStamp);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("setStatus.GroupServer.Group"));
            }
            Common::IputStreamPtr __iput;
            Common::CallError __error;
            int __rslt = __agent->ex_sync("setStatus.GroupServer.Group",__oput,__iput,__params,__error);
            if (__rslt == -1)
                throw Common::CallException(__error);
            if (__rslt>>16)
            {
                Assert((__rslt>>16) == VersionException);
                __loop ++;
                if (__loop >= 3)
                    throw Common::CallException(Common::ObjectAgent::versionError("setStatus.GroupServer.Group"));
                continue;
            }
            bool __ret;
            switch (__rslt)
            {
            case 0:
                __iput->read(__ret);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("setStatus.GroupServer.Group"));
            }
            Common::ObjectAgent::processFinal(__iput);
            return __ret;
        }
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

void GroupServerAgent::setStatus_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Common::String& targetId,const Common::String& type,const Common::String& value,Common::Long timeStamp,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata) const throw()
{
    class __AgentAsync : public Common::AgentAsync
    {
    public:
        __AgentAsync(const Common::ObjectAgentPtr& __agent,const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Common::String& targetId,const Common::String& type,const Common::String& value,Common::Long timeStamp,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata)
            : x__agent(__agent),x__async(__async),x_groupId(groupId),x_targetId(targetId),x_type(type),x_value(value),x_timeStamp(timeStamp),x__params(__params),x__userdata(__userdata),x__loop(0) {}

        void start()
        {
            Common::AgentAsyncPtr pthis = this;
            try
            {
                Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
                Common::VerListPtr __vers = x__agent->verList("setStatus.GroupServer.Group");
                short __ver = 0;
                if (__vers)
                {
                    __ver = __vers->ver(true);
                    if (__ver > 0) __ver = 0;
                }
                switch (__ver)
                {
                case 0:
                    __oput->write((short)1);
                    __oput->write((short)__ver);
                    __oput->write(x_groupId);
                    __oput->write(x_targetId);
                    __oput->write(x_type);
                    __oput->write(x_value);
                    __oput->write(x_timeStamp);
                    break;
                default:
                    throw Common::CallException(Common::ObjectAgent::versionError("setStatus.GroupServer.Group"));
                }
                x__agent->ex_async(this,"setStatus.GroupServer.Group",__oput,x__params,0);
            }
            catch (const Common::CallException& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
            catch (const Common::Exception& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
        }
        void cmdResult(int __rslt,const Common::IputStreamPtr& __iput,const Common::ObjectPtr& __userdata)
        {
            if ((__rslt>>16)!=VersionException)
            {
                if (x__async) x__async->cmdResult(__rslt,__iput,x__userdata);
                return;
            }
            x__loop ++;
            if (x__loop >= 3)
            {
                if (x__async)
                    Common::ObjectAgent::throwException(x__async, Common::CallException(Common::ObjectAgent::versionError("setStatus.GroupServer.Group")), x__userdata);
                return;
            }
            start();
        }
    private:
        Common::ObjectAgentPtr x__agent;
        Common::AgentAsyncPtr x__async;
        Common::String x_groupId;
        Common::String x_targetId;
        Common::String x_type;
        Common::String x_value;
        Common::Long x_timeStamp;
        Common::CallParamsPtr x__params;
        Common::ObjectPtr x__userdata;
        int x__loop;
    };
    (new __AgentAsync(__agent,__async,groupId,targetId,type,value,timeStamp,__params,__userdata))->start();
}

bool GroupServerAgent::setStatus_end(int __rslt,const Common::IputStreamPtr& __iput) throw()
{
    try
    {
        Common::CallError __error;
        if (Common::ObjectAgent::processException(__rslt,__iput,__error))
            throw Common::CallException(__error);
        Assert((__rslt>>16) == 0);
        bool __ret;
        switch (__rslt)
        {
        case 0:
            __iput->read(__ret);
            break;
        default:
            throw Common::CallException(Common::ObjectAgent::versionError("setStatus.GroupServer.Group"));
        }
        Common::ObjectAgent::processFinal(__iput);
        return __ret;
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

bool GroupServerAgent::setStatuses(const Common::String& groupId,const Common::String& targetId,const Status::StatusTimes& statusVers,const Common::CallParamsPtr& __params) const throw()
{
    try
    {
        int __loop = 0;
        while (1)
        {
            Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
            Common::VerListPtr __vers = __agent->verList("setStatuses.GroupServer.Group");
            short __ver = 0;
            if (__vers)
            {
                __ver = __vers->ver(true);
                if (__ver > 0) __ver = 0;
            }
            switch (__ver)
            {
            case 0:
                __oput->write((short)1);
                __oput->write((short)__ver);
                __oput->write(groupId);
                __oput->write(targetId);
                Status::__write_StatusTimes(__oput,statusVers);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("setStatuses.GroupServer.Group"));
            }
            Common::IputStreamPtr __iput;
            Common::CallError __error;
            int __rslt = __agent->ex_sync("setStatuses.GroupServer.Group",__oput,__iput,__params,__error);
            if (__rslt == -1)
                throw Common::CallException(__error);
            if (__rslt>>16)
            {
                Assert((__rslt>>16) == VersionException);
                __loop ++;
                if (__loop >= 3)
                    throw Common::CallException(Common::ObjectAgent::versionError("setStatuses.GroupServer.Group"));
                continue;
            }
            bool __ret;
            switch (__rslt)
            {
            case 0:
                __iput->read(__ret);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("setStatuses.GroupServer.Group"));
            }
            Common::ObjectAgent::processFinal(__iput);
            return __ret;
        }
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

void GroupServerAgent::setStatuses_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Common::String& targetId,const Status::StatusTimes& statusVers,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata) const throw()
{
    class __AgentAsync : public Common::AgentAsync
    {
    public:
        __AgentAsync(const Common::ObjectAgentPtr& __agent,const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Common::String& targetId,const Status::StatusTimes& statusVers,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata)
            : x__agent(__agent),x__async(__async),x_groupId(groupId),x_targetId(targetId),x_statusVers(statusVers),x__params(__params),x__userdata(__userdata),x__loop(0) {}

        void start()
        {
            Common::AgentAsyncPtr pthis = this;
            try
            {
                Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
                Common::VerListPtr __vers = x__agent->verList("setStatuses.GroupServer.Group");
                short __ver = 0;
                if (__vers)
                {
                    __ver = __vers->ver(true);
                    if (__ver > 0) __ver = 0;
                }
                switch (__ver)
                {
                case 0:
                    __oput->write((short)1);
                    __oput->write((short)__ver);
                    __oput->write(x_groupId);
                    __oput->write(x_targetId);
                    Status::__write_StatusTimes(__oput,x_statusVers);
                    break;
                default:
                    throw Common::CallException(Common::ObjectAgent::versionError("setStatuses.GroupServer.Group"));
                }
                x__agent->ex_async(this,"setStatuses.GroupServer.Group",__oput,x__params,0);
            }
            catch (const Common::CallException& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
            catch (const Common::Exception& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
        }
        void cmdResult(int __rslt,const Common::IputStreamPtr& __iput,const Common::ObjectPtr& __userdata)
        {
            if ((__rslt>>16)!=VersionException)
            {
                if (x__async) x__async->cmdResult(__rslt,__iput,x__userdata);
                return;
            }
            x__loop ++;
            if (x__loop >= 3)
            {
                if (x__async)
                    Common::ObjectAgent::throwException(x__async, Common::CallException(Common::ObjectAgent::versionError("setStatuses.GroupServer.Group")), x__userdata);
                return;
            }
            start();
        }
    private:
        Common::ObjectAgentPtr x__agent;
        Common::AgentAsyncPtr x__async;
        Common::String x_groupId;
        Common::String x_targetId;
        Status::StatusTimes x_statusVers;
        Common::CallParamsPtr x__params;
        Common::ObjectPtr x__userdata;
        int x__loop;
    };
    (new __AgentAsync(__agent,__async,groupId,targetId,statusVers,__params,__userdata))->start();
}

bool GroupServerAgent::setStatuses_end(int __rslt,const Common::IputStreamPtr& __iput) throw()
{
    try
    {
        Common::CallError __error;
        if (Common::ObjectAgent::processException(__rslt,__iput,__error))
            throw Common::CallException(__error);
        Assert((__rslt>>16) == 0);
        bool __ret;
        switch (__rslt)
        {
        case 0:
            __iput->read(__ret);
            break;
        default:
            throw Common::CallException(Common::ObjectAgent::versionError("setStatuses.GroupServer.Group"));
        }
        Common::ObjectAgent::processFinal(__iput);
        return __ret;
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

bool GroupServerAgent::refreshStatuses(const Common::String& groupId,const Common::StrSet& interests,const Common::StrSet& types,Common::Long baseTime,Status::StatusesMap& statusesMap,Common::Long& queryTime,const Common::CallParamsPtr& __params) const throw()
{
    try
    {
        int __loop = 0;
        while (1)
        {
            Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
            Common::VerListPtr __vers = __agent->verList("refreshStatuses.GroupServer.Group");
            short __ver = 0;
            if (__vers)
            {
                __ver = __vers->ver(true);
                if (__ver > 0) __ver = 0;
            }
            switch (__ver)
            {
            case 0:
                __oput->write((short)1);
                __oput->write((short)__ver);
                __oput->write(groupId);
                Common::__write_StrSet(__oput,interests);
                Common::__write_StrSet(__oput,types);
                __oput->write(baseTime);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("refreshStatuses.GroupServer.Group"));
            }
            Common::IputStreamPtr __iput;
            Common::CallError __error;
            int __rslt = __agent->ex_sync("refreshStatuses.GroupServer.Group",__oput,__iput,__params,__error);
            if (__rslt == -1)
                throw Common::CallException(__error);
            if (__rslt>>16)
            {
                Assert((__rslt>>16) == VersionException);
                __loop ++;
                if (__loop >= 3)
                    throw Common::CallException(Common::ObjectAgent::versionError("refreshStatuses.GroupServer.Group"));
                continue;
            }
            bool __ret;
            switch (__rslt)
            {
            case 0:
                __iput->read(__ret);
                Status::__read_StatusesMap(__iput,statusesMap);
                __iput->read(queryTime);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("refreshStatuses.GroupServer.Group"));
            }
            Common::ObjectAgent::processFinal(__iput);
            return __ret;
        }
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

void GroupServerAgent::refreshStatuses_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Common::StrSet& interests,const Common::StrSet& types,Common::Long baseTime,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata) const throw()
{
    class __AgentAsync : public Common::AgentAsync
    {
    public:
        __AgentAsync(const Common::ObjectAgentPtr& __agent,const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Common::StrSet& interests,const Common::StrSet& types,Common::Long baseTime,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata)
            : x__agent(__agent),x__async(__async),x_groupId(groupId),x_interests(interests),x_types(types),x_baseTime(baseTime),x__params(__params),x__userdata(__userdata),x__loop(0) {}

        void start()
        {
            Common::AgentAsyncPtr pthis = this;
            try
            {
                Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
                Common::VerListPtr __vers = x__agent->verList("refreshStatuses.GroupServer.Group");
                short __ver = 0;
                if (__vers)
                {
                    __ver = __vers->ver(true);
                    if (__ver > 0) __ver = 0;
                }
                switch (__ver)
                {
                case 0:
                    __oput->write((short)1);
                    __oput->write((short)__ver);
                    __oput->write(x_groupId);
                    Common::__write_StrSet(__oput,x_interests);
                    Common::__write_StrSet(__oput,x_types);
                    __oput->write(x_baseTime);
                    break;
                default:
                    throw Common::CallException(Common::ObjectAgent::versionError("refreshStatuses.GroupServer.Group"));
                }
                x__agent->ex_async(this,"refreshStatuses.GroupServer.Group",__oput,x__params,0);
            }
            catch (const Common::CallException& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
            catch (const Common::Exception& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
        }
        void cmdResult(int __rslt,const Common::IputStreamPtr& __iput,const Common::ObjectPtr& __userdata)
        {
            if ((__rslt>>16)!=VersionException)
            {
                if (x__async) x__async->cmdResult(__rslt,__iput,x__userdata);
                return;
            }
            x__loop ++;
            if (x__loop >= 3)
            {
                if (x__async)
                    Common::ObjectAgent::throwException(x__async, Common::CallException(Common::ObjectAgent::versionError("refreshStatuses.GroupServer.Group")), x__userdata);
                return;
            }
            start();
        }
    private:
        Common::ObjectAgentPtr x__agent;
        Common::AgentAsyncPtr x__async;
        Common::String x_groupId;
        Common::StrSet x_interests;
        Common::StrSet x_types;
        Common::Long x_baseTime;
        Common::CallParamsPtr x__params;
        Common::ObjectPtr x__userdata;
        int x__loop;
    };
    (new __AgentAsync(__agent,__async,groupId,interests,types,baseTime,__params,__userdata))->start();
}

bool GroupServerAgent::refreshStatuses_end(int __rslt,const Common::IputStreamPtr& __iput,Status::StatusesMap& statusesMap,Common::Long& queryTime) throw()
{
    try
    {
        Common::CallError __error;
        if (Common::ObjectAgent::processException(__rslt,__iput,__error))
            throw Common::CallException(__error);
        Assert((__rslt>>16) == 0);
        bool __ret;
        switch (__rslt)
        {
        case 0:
            __iput->read(__ret);
            Status::__read_StatusesMap(__iput,statusesMap);
            __iput->read(queryTime);
            break;
        default:
            throw Common::CallException(Common::ObjectAgent::versionError("refreshStatuses.GroupServer.Group"));
        }
        Common::ObjectAgent::processFinal(__iput);
        return __ret;
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

bool GroupServerAgent::refreshGroup(const Common::String& groupId,Common::Long relBaseUpdateTime,Common::Long statusBaseTime,bool& diffFromBase,Group::RelationsMap& diffOrTotal,Common::Long& relationUpdateTime,Status::StatusVersMap& statusVersMap,Common::Long& statusQueryTime,Common::StrStrMap& props,const Common::CallParamsPtr& __params) const throw()
{
    try
    {
        int __loop = 0;
        while (1)
        {
            Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
            Common::VerListPtr __vers = __agent->verList("refreshGroup.GroupServer.Group");
            short __ver = 0;
            if (__vers)
            {
                __ver = __vers->ver(true);
                if (__ver > 0) __ver = 0;
            }
            switch (__ver)
            {
            case 0:
                __oput->write((short)1);
                __oput->write((short)__ver);
                __oput->write(groupId);
                __oput->write(relBaseUpdateTime);
                __oput->write(statusBaseTime);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("refreshGroup.GroupServer.Group"));
            }
            Common::IputStreamPtr __iput;
            Common::CallError __error;
            int __rslt = __agent->ex_sync("refreshGroup.GroupServer.Group",__oput,__iput,__params,__error);
            if (__rslt == -1)
                throw Common::CallException(__error);
            if (__rslt>>16)
            {
                Assert((__rslt>>16) == VersionException);
                __loop ++;
                if (__loop >= 3)
                    throw Common::CallException(Common::ObjectAgent::versionError("refreshGroup.GroupServer.Group"));
                continue;
            }
            bool __ret;
            switch (__rslt)
            {
            case 0:
                __iput->read(__ret);
                __iput->read(diffFromBase);
                Group::__read_RelationsMap(__iput,diffOrTotal);
                __iput->read(relationUpdateTime);
                Status::__read_StatusVersMap(__iput,statusVersMap);
                __iput->read(statusQueryTime);
                Common::__read_StrStrMap(__iput,props);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("refreshGroup.GroupServer.Group"));
            }
            Common::ObjectAgent::processFinal(__iput);
            return __ret;
        }
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

void GroupServerAgent::refreshGroup_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,Common::Long relBaseUpdateTime,Common::Long statusBaseTime,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata) const throw()
{
    class __AgentAsync : public Common::AgentAsync
    {
    public:
        __AgentAsync(const Common::ObjectAgentPtr& __agent,const Common::AgentAsyncPtr& __async,const Common::String& groupId,Common::Long relBaseUpdateTime,Common::Long statusBaseTime,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata)
            : x__agent(__agent),x__async(__async),x_groupId(groupId),x_relBaseUpdateTime(relBaseUpdateTime),x_statusBaseTime(statusBaseTime),x__params(__params),x__userdata(__userdata),x__loop(0) {}

        void start()
        {
            Common::AgentAsyncPtr pthis = this;
            try
            {
                Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
                Common::VerListPtr __vers = x__agent->verList("refreshGroup.GroupServer.Group");
                short __ver = 0;
                if (__vers)
                {
                    __ver = __vers->ver(true);
                    if (__ver > 0) __ver = 0;
                }
                switch (__ver)
                {
                case 0:
                    __oput->write((short)1);
                    __oput->write((short)__ver);
                    __oput->write(x_groupId);
                    __oput->write(x_relBaseUpdateTime);
                    __oput->write(x_statusBaseTime);
                    break;
                default:
                    throw Common::CallException(Common::ObjectAgent::versionError("refreshGroup.GroupServer.Group"));
                }
                x__agent->ex_async(this,"refreshGroup.GroupServer.Group",__oput,x__params,0);
            }
            catch (const Common::CallException& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
            catch (const Common::Exception& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
        }
        void cmdResult(int __rslt,const Common::IputStreamPtr& __iput,const Common::ObjectPtr& __userdata)
        {
            if ((__rslt>>16)!=VersionException)
            {
                if (x__async) x__async->cmdResult(__rslt,__iput,x__userdata);
                return;
            }
            x__loop ++;
            if (x__loop >= 3)
            {
                if (x__async)
                    Common::ObjectAgent::throwException(x__async, Common::CallException(Common::ObjectAgent::versionError("refreshGroup.GroupServer.Group")), x__userdata);
                return;
            }
            start();
        }
    private:
        Common::ObjectAgentPtr x__agent;
        Common::AgentAsyncPtr x__async;
        Common::String x_groupId;
        Common::Long x_relBaseUpdateTime;
        Common::Long x_statusBaseTime;
        Common::CallParamsPtr x__params;
        Common::ObjectPtr x__userdata;
        int x__loop;
    };
    (new __AgentAsync(__agent,__async,groupId,relBaseUpdateTime,statusBaseTime,__params,__userdata))->start();
}

bool GroupServerAgent::refreshGroup_end(int __rslt,const Common::IputStreamPtr& __iput,bool& diffFromBase,Group::RelationsMap& diffOrTotal,Common::Long& relationUpdateTime,Status::StatusVersMap& statusVersMap,Common::Long& statusQueryTime,Common::StrStrMap& props) throw()
{
    try
    {
        Common::CallError __error;
        if (Common::ObjectAgent::processException(__rslt,__iput,__error))
            throw Common::CallException(__error);
        Assert((__rslt>>16) == 0);
        bool __ret;
        switch (__rslt)
        {
        case 0:
            __iput->read(__ret);
            __iput->read(diffFromBase);
            Group::__read_RelationsMap(__iput,diffOrTotal);
            __iput->read(relationUpdateTime);
            Status::__read_StatusVersMap(__iput,statusVersMap);
            __iput->read(statusQueryTime);
            Common::__read_StrStrMap(__iput,props);
            break;
        default:
            throw Common::CallException(Common::ObjectAgent::versionError("refreshGroup.GroupServer.Group"));
        }
        Common::ObjectAgent::processFinal(__iput);
        return __ret;
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

bool GroupServerAgent::getSCProps(const Common::StrSet& userIds,const Common::StrSet& orgIds,Status::StatusVersMap& statusVersMap,const Common::CallParamsPtr& __params) const throw()
{
    try
    {
        int __loop = 0;
        while (1)
        {
            Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
            Common::VerListPtr __vers = __agent->verList("getSCProps.GroupServer.Group");
            short __ver = 0;
            if (__vers)
            {
                __ver = __vers->ver(true);
                if (__ver > 0) __ver = 0;
            }
            switch (__ver)
            {
            case 0:
                __oput->write((short)1);
                __oput->write((short)__ver);
                Common::__write_StrSet(__oput,userIds);
                Common::__write_StrSet(__oput,orgIds);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("getSCProps.GroupServer.Group"));
            }
            Common::IputStreamPtr __iput;
            Common::CallError __error;
            int __rslt = __agent->ex_sync("getSCProps.GroupServer.Group",__oput,__iput,__params,__error);
            if (__rslt == -1)
                throw Common::CallException(__error);
            if (__rslt>>16)
            {
                Assert((__rslt>>16) == VersionException);
                __loop ++;
                if (__loop >= 3)
                    throw Common::CallException(Common::ObjectAgent::versionError("getSCProps.GroupServer.Group"));
                continue;
            }
            bool __ret;
            switch (__rslt)
            {
            case 0:
                __iput->read(__ret);
                Status::__read_StatusVersMap(__iput,statusVersMap);
                break;
            default:
                throw Common::CallException(Common::ObjectAgent::versionError("getSCProps.GroupServer.Group"));
            }
            Common::ObjectAgent::processFinal(__iput);
            return __ret;
        }
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

void GroupServerAgent::getSCProps_begin(const Common::AgentAsyncPtr& __async,const Common::StrSet& userIds,const Common::StrSet& orgIds,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata) const throw()
{
    class __AgentAsync : public Common::AgentAsync
    {
    public:
        __AgentAsync(const Common::ObjectAgentPtr& __agent,const Common::AgentAsyncPtr& __async,const Common::StrSet& userIds,const Common::StrSet& orgIds,const Common::CallParamsPtr& __params,const Common::ObjectPtr& __userdata)
            : x__agent(__agent),x__async(__async),x_userIds(userIds),x_orgIds(orgIds),x__params(__params),x__userdata(__userdata),x__loop(0) {}

        void start()
        {
            Common::AgentAsyncPtr pthis = this;
            try
            {
                Common::OputStreamPtr __oput = Common::OputStream::create(Common::StreamData);
                Common::VerListPtr __vers = x__agent->verList("getSCProps.GroupServer.Group");
                short __ver = 0;
                if (__vers)
                {
                    __ver = __vers->ver(true);
                    if (__ver > 0) __ver = 0;
                }
                switch (__ver)
                {
                case 0:
                    __oput->write((short)1);
                    __oput->write((short)__ver);
                    Common::__write_StrSet(__oput,x_userIds);
                    Common::__write_StrSet(__oput,x_orgIds);
                    break;
                default:
                    throw Common::CallException(Common::ObjectAgent::versionError("getSCProps.GroupServer.Group"));
                }
                x__agent->ex_async(this,"getSCProps.GroupServer.Group",__oput,x__params,0);
            }
            catch (const Common::CallException& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
            catch (const Common::Exception& ex)
            {
                Common::ObjectAgent::throwException(x__async,ex,x__userdata);
            }
        }
        void cmdResult(int __rslt,const Common::IputStreamPtr& __iput,const Common::ObjectPtr& __userdata)
        {
            if ((__rslt>>16)!=VersionException)
            {
                if (x__async) x__async->cmdResult(__rslt,__iput,x__userdata);
                return;
            }
            x__loop ++;
            if (x__loop >= 3)
            {
                if (x__async)
                    Common::ObjectAgent::throwException(x__async, Common::CallException(Common::ObjectAgent::versionError("getSCProps.GroupServer.Group")), x__userdata);
                return;
            }
            start();
        }
    private:
        Common::ObjectAgentPtr x__agent;
        Common::AgentAsyncPtr x__async;
        Common::StrSet x_userIds;
        Common::StrSet x_orgIds;
        Common::CallParamsPtr x__params;
        Common::ObjectPtr x__userdata;
        int x__loop;
    };
    (new __AgentAsync(__agent,__async,userIds,orgIds,__params,__userdata))->start();
}

bool GroupServerAgent::getSCProps_end(int __rslt,const Common::IputStreamPtr& __iput,Status::StatusVersMap& statusVersMap) throw()
{
    try
    {
        Common::CallError __error;
        if (Common::ObjectAgent::processException(__rslt,__iput,__error))
            throw Common::CallException(__error);
        Assert((__rslt>>16) == 0);
        bool __ret;
        switch (__rslt)
        {
        case 0:
            __iput->read(__ret);
            Status::__read_StatusVersMap(__iput,statusVersMap);
            break;
        default:
            throw Common::CallException(Common::ObjectAgent::versionError("getSCProps.GroupServer.Group"));
        }
        Common::ObjectAgent::processFinal(__iput);
        return __ret;
    }
    catch (const Common::CallException& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
    catch (const Common::Exception& ex)
    {
        Common::ObjectAgent::processFinal(ex);
        return false;
    }
}

};//namespace: Group
