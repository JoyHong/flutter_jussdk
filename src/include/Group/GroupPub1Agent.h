//
// *****************************************************************************
// Copyright(c) 2017-2022 Juphoon System Software Co., LTD. All rights reserved.
// *****************************************************************************
//
// Auto generated from: GroupPub1.def
// Warning: do not edit this file.
//

#ifndef __Group_GroupPub1Agent_h
#define __Group_GroupPub1Agent_h

#include "Group/GroupPub1Pub.h"

namespace Group
{

/* accountId -> tag */
/*

*/
class GroupServerAgent : public Common::Agent
{
public:
    GroupServerAgent(int zero = 0) : Common::Agent(zero) {}
    GroupServerAgent(const Common::Agent& agent) : Common::Agent(agent) {}
    GroupServerAgent(const Common::ObjectAgentPtr& agent) : Common::Agent(agent) {}

    bool createOrganize(const Group::RelationsMap& relations,const Common::StrStrMap& orgProps,Common::String& orgId,Group::Relation& orgRelation,Common::Long& lastUpdateTime,Common::Long& updateTime,const Common::CallParamsPtr& __params = 0) const throw();
    void createOrganize_begin(const Common::AgentAsyncPtr& __async,const Group::RelationsMap& relations,const Common::StrStrMap& orgProps,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool createOrganize_end(int __rslt,const Common::IputStreamPtr& __iput,Common::String& orgId,Group::Relation& orgRelation,Common::Long& lastUpdateTime,Common::Long& updateTime) throw();

    bool createOrg(const Group::RelationsMap& relations,const Common::StrStrMap& orgProps,Common::String& orgId,Common::Long& lastUpdateTime,Common::Long& updateTime,const Common::CallParamsPtr& __params = 0) const throw();
    void createOrg_begin(const Common::AgentAsyncPtr& __async,const Group::RelationsMap& relations,const Common::StrStrMap& orgProps,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool createOrg_end(int __rslt,const Common::IputStreamPtr& __iput,Common::String& orgId,Common::Long& lastUpdateTime,Common::Long& updateTime) throw();

    bool disbandOrganize(const Common::String& orgId,Common::Long& lastUpdateTime,Common::Long& updateTime,const Common::CallParamsPtr& __params = 0) const throw();
    void disbandOrganize_begin(const Common::AgentAsyncPtr& __async,const Common::String& orgId,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool disbandOrganize_end(int __rslt,const Common::IputStreamPtr& __iput,Common::Long& lastUpdateTime,Common::Long& updateTime) throw();

    // getRelations2合并了getRelationsDiff和getRelations.
    bool getRelations2(const Common::String& groupId,Common::Long baseUpdateTime,bool& diffFromBase,Group::RelationsMap& totalOrAdded,Group::RelationsMap& changed,Common::StrSet& removed,Common::Long& updateTime,const Common::CallParamsPtr& __params = 0) const throw();
    void getRelations2_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,Common::Long baseUpdateTime,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool getRelations2_end(int __rslt,const Common::IputStreamPtr& __iput,bool& diffFromBase,Group::RelationsMap& totalOrAdded,Group::RelationsMap& changed,Common::StrSet& removed,Common::Long& updateTime) throw();

    // @removed应直接使用StrSet.
    // 1. 对于组织,是否同步删除是由组织只读属性Group.Org.Sync决定的,入参中不应体现.
    // 2. 对于个人,一般来说,除删除可能需要同步之外,降级也可能导致同步删除(A将B设为黑名单的同时将A从GroupB中删除).
    //    为简单考虑,这种同步行为由终端通过两次setRelations自行完成.相比组织删除,这样的行为无需保持原子性,故终端自行同步是可行的.
    //    采取如下方式实现此类行为:
    //      a. A先将自己从GroupB中删除,如报错且错误不是remove_not_exist(A实际上无法确定自己是否仍在GroupB当中),则报错失败.否则继续b.
    //      b. A处理GroupA自身的删除/降级.若b成功,最终返回成功,否则失败.
    //    综上所述,个人列表也无需在入参中包含同步标志.
    bool setRelations(const Common::String& groupId,const Group::RelationsMap& added,const Group::RelationsMap& changed,const Common::StrBoolMap& removed,Common::Long& lastUpdateTime,Common::Long& updateTime,const Common::CallParamsPtr& __params = 0) const throw();
    void setRelations_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Group::RelationsMap& added,const Group::RelationsMap& changed,const Common::StrBoolMap& removed,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool setRelations_end(int __rslt,const Common::IputStreamPtr& __iput,Common::Long& lastUpdateTime,Common::Long& updateTime) throw();

    // obsolete
    bool setSelfCfg(const Common::String& targetId,const Common::String& key,const Common::String& value,Common::Long& lastUpdateTime,Common::Long& updateTime,const Common::CallParamsPtr& __params = 0) const throw();
    void setSelfCfg_begin(const Common::AgentAsyncPtr& __async,const Common::String& targetId,const Common::String& key,const Common::String& value,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool setSelfCfg_end(int __rslt,const Common::IputStreamPtr& __iput,Common::Long& lastUpdateTime,Common::Long& updateTime) throw();

    bool setRels(const Common::String& groupId,const Group::RelationsMap& added,const Group::RelationsMap& changed,const Common::StrLongMap& removed,Common::Long& lastUpdateTime,Common::Long& updateTime,Status::StatusVersMap& addedStatuses,const Common::CallParamsPtr& __params = 0) const throw();
    void setRels_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Group::RelationsMap& added,const Group::RelationsMap& changed,const Common::StrLongMap& removed,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool setRels_end(int __rslt,const Common::IputStreamPtr& __iput,Common::Long& lastUpdateTime,Common::Long& updateTime,Status::StatusVersMap& addedStatuses) throw();

    bool checkRelation(const Common::String& userId,Group::RelationType& relationType,const Common::CallParamsPtr& __params = 0) const throw();
    void checkRelation_begin(const Common::AgentAsyncPtr& __async,const Common::String& userId,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool checkRelation_end(int __rslt,const Common::IputStreamPtr& __iput,Group::RelationType& relationType) throw();

    bool applyRelation(const Common::String& groupId,const Common::String& targetId,Group::RelationType targetType,const Common::String& desc,const Group::Relation& syncRelation,const Common::StrStrMap& inParams,const Common::CallParamsPtr& __params = 0) const throw();
    void applyRelation_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Common::String& targetId,Group::RelationType targetType,const Common::String& desc,const Group::Relation& syncRelation,const Common::StrStrMap& inParams,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool applyRelation_end(int __rslt,const Common::IputStreamPtr& __iput) throw();

    bool acceptRelation(Common::Long msgIdx,const Common::String& targetTagName,const Common::String& targetTag,const Common::StrStrMap& targetCfgs,const Common::StrStrMap& inParams,const Common::CallParamsPtr& __params = 0) const throw();
    void acceptRelation_begin(const Common::AgentAsyncPtr& __async,Common::Long msgIdx,const Common::String& targetTagName,const Common::String& targetTag,const Common::StrStrMap& targetCfgs,const Common::StrStrMap& inParams,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool acceptRelation_end(int __rslt,const Common::IputStreamPtr& __iput) throw();

    //bool refuseRelation(long msgIdx,string desc) async onexception(false) cache(60);
    bool setProps(const Common::String& groupId,const Common::StrStrMap& props,const Common::CallParamsPtr& __params = 0) const throw();
    void setProps_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Common::StrStrMap& props,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool setProps_end(int __rslt,const Common::IputStreamPtr& __iput) throw();

    bool getPropsPrefixs(const Common::String& groupId,const Common::StrSet& prefixs,Common::StrStrMap& props,const Common::CallParamsPtr& __params = 0) const throw();
    void getPropsPrefixs_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Common::StrSet& prefixs,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool getPropsPrefixs_end(int __rslt,const Common::IputStreamPtr& __iput,Common::StrStrMap& props) throw();

    // 设置基于关联的状态.@groupId是状态所在group上下文的id.
    // @targetId是待设置的状态所属者的groupId,要么是调用者自身,要么是组织中的较调用者级别低的成员.
    // 1. 当@groupId是组织时,该接口用于设置@targetId在该组织内的Status.
    // 2. 当@groupId是个人时,该接口用于设置自己之于@groupId的Status---@targetId是自己的userId.
    bool setStatus(const Common::String& groupId,const Common::String& targetId,const Common::String& type,const Common::String& value,Common::Long timeStamp,const Common::CallParamsPtr& __params = 0) const throw();
    void setStatus_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Common::String& targetId,const Common::String& type,const Common::String& value,Common::Long timeStamp,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool setStatus_end(int __rslt,const Common::IputStreamPtr& __iput) throw();

    bool setStatuses(const Common::String& groupId,const Common::String& targetId,const Status::StatusTimes& statusVers,const Common::CallParamsPtr& __params = 0) const throw();
    void setStatuses_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Common::String& targetId,const Status::StatusTimes& statusVers,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool setStatuses_end(int __rslt,const Common::IputStreamPtr& __iput) throw();

    bool refreshStatuses(const Common::String& groupId,const Common::StrSet& interests,const Common::StrSet& types,Common::Long baseTime,Status::StatusesMap& statusesMap,Common::Long& queryTime,const Common::CallParamsPtr& __params = 0) const throw();
    void refreshStatuses_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,const Common::StrSet& interests,const Common::StrSet& types,Common::Long baseTime,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool refreshStatuses_end(int __rslt,const Common::IputStreamPtr& __iput,Status::StatusesMap& statusesMap,Common::Long& queryTime) throw();

    // 通过props['PropTimestamp']来实现JusTalk的属性差异读写, 但它只作为接口实现的一个可选项
    // 故propTimeStamp本身不显式体现在入参中,而是通过callParams传递
    bool refreshGroup(const Common::String& groupId,Common::Long relBaseUpdateTime,Common::Long statusBaseTime,bool& diffFromBase,Group::RelationsMap& diffOrTotal,Common::Long& relationUpdateTime,Status::StatusVersMap& statusVersMap,Common::Long& statusQueryTime,Common::StrStrMap& props,const Common::CallParamsPtr& __params = 0) const throw();
    void refreshGroup_begin(const Common::AgentAsyncPtr& __async,const Common::String& groupId,Common::Long relBaseUpdateTime,Common::Long statusBaseTime,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool refreshGroup_end(int __rslt,const Common::IputStreamPtr& __iput,bool& diffFromBase,Group::RelationsMap& diffOrTotal,Common::Long& relationUpdateTime,Status::StatusVersMap& statusVersMap,Common::Long& statusQueryTime,Common::StrStrMap& props) throw();

    // 配合refreshGroup使用, 终端刷新得到的added,借助getSCProps补完SC.前缀属性信息
    bool getSCProps(const Common::StrSet& userIds,const Common::StrSet& orgIds,Status::StatusVersMap& statusVersMap,const Common::CallParamsPtr& __params = 0) const throw();
    void getSCProps_begin(const Common::AgentAsyncPtr& __async,const Common::StrSet& userIds,const Common::StrSet& orgIds,const Common::CallParamsPtr& __params = 0,const Common::ObjectPtr& __userdata = 0) const throw();
    static bool getSCProps_end(int __rslt,const Common::IputStreamPtr& __iput,Status::StatusVersMap& statusVersMap) throw();
};

};//namespace: Group

#endif //__Group_GroupPub1Agent_h
