//
// *****************************************************************************
// Copyright(c) 2017-2022 Juphoon System Software Co., LTD. All rights reserved.
// *****************************************************************************
//
// Auto generated from: GroupPub1.def
// Warning: do not edit this file.
//

#ifndef __Group_GroupPub1Pub_h
#define __Group_GroupPub1Pub_h

#include "Common/Common.h"
#include "Common/TypesPub.h"
#include "Status/StatusPub1Pub.h"

namespace Group
{

enum RelationType
{
    /* 类型的相对顺序不能改变,见GroupI.cpp, GroupInternal::checkSetRelationParams. */
    Owner = 0,
    /* 组织类型必须 >= Owner */
    Manager = 1,
    Member = 2,
    ExMember = 8,
    OrgEnd = 9,
    /* 组织类型必须 < OrgEnd */
    Organize = 10,
    /* 个人类型必须 >= Organize */
    CloseFriend = 11,
    Friend = 12,
    Contact = 13,
    Follow = 14,
    Stranger = 15,
    Blacklist = 16,
    System = 18,
    PersonEnd = 19,
    /* 个人类型必须 < PersonEnd */
    NullType = 20,
    NoneSyncType = 21,
};
const char* RelationType_toString(Group::RelationType val);

class Relation
{
public:
    Relation();
    Relation(Group::RelationType,const Common::String&,const Common::String&,const Common::StrStrMap&);

    bool operator<(const Relation&) const;
    bool operator==(const Relation&) const;
    bool operator!=(const Relation&__obj) const { return !operator==(__obj);}
    void __write(const Common::OputStreamPtr&) const;
    void __read(const Common::IputStreamPtr&);
    void __textWrite(const Common::OputStreamPtr&,const Common::String&) const;
    bool __textRead(const Common::IputStreamPtr&,const Common::String&,int = 0);
public:
    Group::RelationType type;
    Common::String tagName;
    /* 保存备注名，默认取个人的昵称或者组织创建者指定的组织名. */
    Common::String tag;
    /* 保存基于Relation的无需服务理解的内容,比如Comment/category... */
    Common::StrStrMap cfgs;
};
void __write_Relation(const Common::OputStreamPtr&,const Group::Relation&);
void __read_Relation(const Common::IputStreamPtr&,Group::Relation&);
void __textWrite_Relation(const Common::OputStreamPtr&,const Common::String&,const Group::Relation&);
bool __textRead_Relation(const Common::IputStreamPtr&,const Common::String&,Group::Relation&,int = 0);

typedef map<Common::String,Group::Relation> RelationsMap;
void __write_RelationsMap(const Common::OputStreamPtr&,const Group::RelationsMap&);
void __read_RelationsMap(const Common::IputStreamPtr&,Group::RelationsMap&);
void __textWrite_RelationsMap(const Common::OputStreamPtr&,const Common::String&,const Group::RelationsMap&);
bool __textRead_RelationsMap(const Common::IputStreamPtr&,const Common::String&,Group::RelationsMap&,int = 0);

/* groupId -> Relation, groupId = userId/orgId  */
typedef map<Common::String,Common::String> ContactsMap;
void __write_ContactsMap(const Common::OputStreamPtr&,const Group::ContactsMap&);
void __read_ContactsMap(const Common::IputStreamPtr&,Group::ContactsMap&);
void __textWrite_ContactsMap(const Common::OputStreamPtr&,const Common::String&,const Group::ContactsMap&);
bool __textRead_ContactsMap(const Common::IputStreamPtr&,const Common::String&,Group::ContactsMap&,int = 0);

};//namespace: Group

#endif //__Group_GroupPub1Pub_h
